{"version":3,"file":"static/js/2478.4c75cd0c.chunk.js","mappings":"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","sources":["api/chatflows.js","hooks/useApi.js","ui-component/button/StyledButton.js","ui-component/dialog/LoginDialog.js","ui-component/editor/DarkCodeEditor.js","ui-component/editor/LightCodeEditor.js","ui-component/dialog/ExpandTextDialog.js","ui-component/input/Input.js","ui-component/json/SelectVariable.js","../../../node_modules/flowise-embed-react/dist/index.js","views/chatbot/index.js"],"sourcesContent":["import client from './client'\r\n\r\nconst getAllChatflows = () => client.get('/chatflows')\r\n\r\nconst getSpecificChatflow = (id) => client.get(`/chatflows/${id}`)\r\n\r\nconst getSpecificChatflowFromPublicEndpoint = (id) => client.get(`/public-chatflows/${id}`)\r\n\r\nconst createNewChatflow = (body) => client.post(`/chatflows`, body)\r\n\r\nconst updateChatflow = (id, body) => client.put(`/chatflows/${id}`, body)\r\n\r\nconst deleteChatflow = (id) => client.delete(`/chatflows/${id}`)\r\n\r\nconst getIsChatflowStreaming = (id) => client.get(`/chatflows-streaming/${id}`)\r\n\r\nexport default {\r\n    getAllChatflows,\r\n    getSpecificChatflow,\r\n    getSpecificChatflowFromPublicEndpoint,\r\n    createNewChatflow,\r\n    updateChatflow,\r\n    deleteChatflow,\r\n    getIsChatflowStreaming\r\n}\r\n","import { useState } from 'react'\r\n\r\nexport default (apiFunc) => {\r\n    const [data, setData] = useState(null)\r\n    const [error, setError] = useState(null)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const request = async (...args) => {\r\n        setLoading(true)\r\n        try {\r\n            const result = await apiFunc(...args)\r\n            setData(result.data)\r\n        } catch (err) {\r\n            setError(err || 'Unexpected Error!')\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    return {\r\n        data,\r\n        error,\r\n        loading,\r\n        request\r\n    }\r\n}\r\n","import { styled } from '@mui/material/styles'\r\nimport { Button } from '@mui/material'\r\nimport MuiToggleButton from '@mui/material/ToggleButton'\r\n\r\nexport const StyledButton = styled(Button)(({ theme, color = 'primary' }) => ({\r\n    color: 'white',\r\n    backgroundColor: theme.palette[color].main,\r\n    '&:hover': {\r\n        backgroundColor: theme.palette[color].main,\r\n        backgroundImage: `linear-gradient(rgb(0 0 0/10%) 0 0)`\r\n    }\r\n}))\r\n\r\nexport const StyledToggleButton = styled(MuiToggleButton)(({ theme, color = 'primary' }) => ({\r\n    '&.Mui-selected, &.Mui-selected:hover': {\r\n        color: 'white',\r\n        backgroundColor: theme.palette[color].main\r\n    }\r\n}))\r\n","import { createPortal } from 'react-dom'\r\nimport { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Dialog, DialogActions, DialogContent, Typography, DialogTitle } from '@mui/material'\r\nimport { StyledButton } from 'ui-component/button/StyledButton'\r\nimport { Input } from 'ui-component/input/Input'\r\n\r\nconst LoginDialog = ({ show, dialogProps, onConfirm }) => {\r\n    const portalElement = document.getElementById('portal')\r\n    const usernameInput = {\r\n        label: 'Username',\r\n        name: 'username',\r\n        type: 'string',\r\n        placeholder: 'john doe'\r\n    }\r\n    const passwordInput = {\r\n        label: 'Password',\r\n        name: 'password',\r\n        type: 'password'\r\n    }\r\n    const [usernameVal, setUsernameVal] = useState('')\r\n    const [passwordVal, setPasswordVal] = useState('')\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            onKeyUp={(e) => {\r\n                if (e.key === 'Enter') {\r\n                    onConfirm(usernameVal, passwordVal)\r\n                }\r\n            }}\r\n            open={show}\r\n            fullWidth\r\n            maxWidth='xs'\r\n            aria-labelledby='alert-dialog-title'\r\n            aria-describedby='alert-dialog-description'\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <Typography>Username</Typography>\r\n                <Input\r\n                    inputParam={usernameInput}\r\n                    onChange={(newValue) => setUsernameVal(newValue)}\r\n                    value={usernameVal}\r\n                    showDialog={false}\r\n                />\r\n                <div style={{ marginTop: 20 }}></div>\r\n                <Typography>Password</Typography>\r\n                <Input inputParam={passwordInput} onChange={(newValue) => setPasswordVal(newValue)} value={passwordVal} />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <StyledButton variant='contained' onClick={() => onConfirm(usernameVal, passwordVal)}>\r\n                    {dialogProps.confirmButtonName}\r\n                </StyledButton>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nLoginDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onConfirm: PropTypes.func\r\n}\r\n\r\nexport default LoginDialog\r\n","import Editor from 'react-simple-code-editor'\r\nimport { highlight, languages } from 'prismjs/components/prism-core'\r\nimport 'prismjs/components/prism-clike'\r\nimport 'prismjs/components/prism-javascript'\r\nimport 'prismjs/components/prism-json'\r\nimport 'prismjs/components/prism-markup'\r\nimport './prism-dark.css'\r\nimport PropTypes from 'prop-types'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\nexport const DarkCodeEditor = ({ value, placeholder, disabled = false, type, style, onValueChange, onMouseUp, onBlur }) => {\r\n    const theme = useTheme()\r\n\r\n    return (\r\n        <Editor\r\n            disabled={disabled}\r\n            value={value}\r\n            placeholder={placeholder}\r\n            highlight={(code) => highlight(code, type === 'json' ? languages.json : languages.js)}\r\n            padding={10}\r\n            onValueChange={onValueChange}\r\n            onMouseUp={onMouseUp}\r\n            onBlur={onBlur}\r\n            tabSize={4}\r\n            style={{\r\n                ...style,\r\n                background: theme.palette.codeEditor.main\r\n            }}\r\n            textareaClassName='editor__textarea'\r\n        />\r\n    )\r\n}\r\n\r\nDarkCodeEditor.propTypes = {\r\n    value: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    type: PropTypes.string,\r\n    style: PropTypes.object,\r\n    onValueChange: PropTypes.func,\r\n    onMouseUp: PropTypes.func,\r\n    onBlur: PropTypes.func\r\n}\r\n","import Editor from 'react-simple-code-editor'\r\nimport { highlight, languages } from 'prismjs/components/prism-core'\r\nimport 'prismjs/components/prism-clike'\r\nimport 'prismjs/components/prism-javascript'\r\nimport 'prismjs/components/prism-json'\r\nimport 'prismjs/components/prism-markup'\r\nimport './prism-light.css'\r\nimport PropTypes from 'prop-types'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\nexport const LightCodeEditor = ({ value, placeholder, disabled = false, type, style, onValueChange, onMouseUp, onBlur }) => {\r\n    const theme = useTheme()\r\n\r\n    return (\r\n        <Editor\r\n            disabled={disabled}\r\n            value={value}\r\n            placeholder={placeholder}\r\n            highlight={(code) => highlight(code, type === 'json' ? languages.json : languages.js)}\r\n            padding={10}\r\n            onValueChange={onValueChange}\r\n            onMouseUp={onMouseUp}\r\n            onBlur={onBlur}\r\n            tabSize={4}\r\n            style={{\r\n                ...style,\r\n                background: theme.palette.card.main\r\n            }}\r\n            textareaClassName='editor__textarea'\r\n        />\r\n    )\r\n}\r\n\r\nLightCodeEditor.propTypes = {\r\n    value: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    type: PropTypes.string,\r\n    style: PropTypes.object,\r\n    onValueChange: PropTypes.func,\r\n    onMouseUp: PropTypes.func,\r\n    onBlur: PropTypes.func\r\n}\r\n","import { createPortal } from 'react-dom'\r\nimport { useState, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { Button, Dialog, DialogActions, DialogContent, Typography } from '@mui/material'\r\nimport { useTheme } from '@mui/material/styles'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport { StyledButton } from 'ui-component/button/StyledButton'\r\nimport { DarkCodeEditor } from 'ui-component/editor/DarkCodeEditor'\r\nimport { LightCodeEditor } from 'ui-component/editor/LightCodeEditor'\r\nimport { HIDE_CANVAS_DIALOG, SHOW_CANVAS_DIALOG } from 'store/actions'\r\n\r\nimport './ExpandTextDialog.css'\r\n\r\nconst ExpandTextDialog = ({ show, dialogProps, onCancel, onConfirm }) => {\r\n    const portalElement = document.getElementById('portal')\r\n\r\n    const theme = useTheme()\r\n    const dispatch = useDispatch()\r\n    const customization = useSelector((state) => state.customization)\r\n    const languageType = 'json'\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n    const [inputParam, setInputParam] = useState(null)\r\n\r\n    useEffect(() => {\r\n        if (dialogProps.value) setInputValue(dialogProps.value)\r\n        if (dialogProps.inputParam) setInputParam(dialogProps.inputParam)\r\n\r\n        return () => {\r\n            setInputValue('')\r\n            setInputParam(null)\r\n        }\r\n    }, [dialogProps])\r\n\r\n    useEffect(() => {\r\n        if (show) dispatch({ type: SHOW_CANVAS_DIALOG })\r\n        else dispatch({ type: HIDE_CANVAS_DIALOG })\r\n        return () => dispatch({ type: HIDE_CANVAS_DIALOG })\r\n    }, [show, dispatch])\r\n\r\n    const component = show ? (\r\n        <Dialog open={show} fullWidth maxWidth='md' aria-labelledby='alert-dialog-title' aria-describedby='alert-dialog-description'>\r\n            <DialogContent>\r\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                    {inputParam && inputParam.type === 'string' && (\r\n                        <div style={{ flex: 70 }}>\r\n                            <Typography sx={{ mb: 2, ml: 1 }} variant='h4'>\r\n                                {inputParam.label}\r\n                            </Typography>\r\n                            <PerfectScrollbar\r\n                                style={{\r\n                                    border: '1px solid',\r\n                                    borderColor: theme.palette.grey['500'],\r\n                                    borderRadius: '12px',\r\n                                    height: '100%',\r\n                                    maxHeight: 'calc(100vh - 220px)',\r\n                                    overflowX: 'hidden',\r\n                                    backgroundColor: 'white'\r\n                                }}\r\n                            >\r\n                                {customization.isDarkMode ? (\r\n                                    <DarkCodeEditor\r\n                                        disabled={dialogProps.disabled}\r\n                                        value={inputValue}\r\n                                        onValueChange={(code) => setInputValue(code)}\r\n                                        placeholder={inputParam.placeholder}\r\n                                        type={languageType}\r\n                                        style={{\r\n                                            fontSize: '0.875rem',\r\n                                            minHeight: 'calc(100vh - 220px)',\r\n                                            width: '100%'\r\n                                        }}\r\n                                    />\r\n                                ) : (\r\n                                    <LightCodeEditor\r\n                                        disabled={dialogProps.disabled}\r\n                                        value={inputValue}\r\n                                        onValueChange={(code) => setInputValue(code)}\r\n                                        placeholder={inputParam.placeholder}\r\n                                        type={languageType}\r\n                                        style={{\r\n                                            fontSize: '0.875rem',\r\n                                            minHeight: 'calc(100vh - 220px)',\r\n                                            width: '100%'\r\n                                        }}\r\n                                    />\r\n                                )}\r\n                            </PerfectScrollbar>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onCancel}>{dialogProps.cancelButtonName}</Button>\r\n                <StyledButton disabled={dialogProps.disabled} variant='contained' onClick={() => onConfirm(inputValue, inputParam.name)}>\r\n                    {dialogProps.confirmButtonName}\r\n                </StyledButton>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nExpandTextDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onConfirm: PropTypes.func\r\n}\r\n\r\nexport default ExpandTextDialog\r\n","import { useState, useEffect, useRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { FormControl, OutlinedInput, Popover } from '@mui/material'\r\nimport ExpandTextDialog from 'ui-component/dialog/ExpandTextDialog'\r\nimport SelectVariable from 'ui-component/json/SelectVariable'\r\nimport { getAvailableNodesForVariable } from 'utils/genericHelper'\r\n\r\nexport const Input = ({\r\n    inputParam,\r\n    value,\r\n    nodes,\r\n    edges,\r\n    nodeId,\r\n    onChange,\r\n    disabled = false,\r\n    showDialog,\r\n    dialogProps,\r\n    onDialogCancel,\r\n    onDialogConfirm\r\n}) => {\r\n    const [myValue, setMyValue] = useState(value ?? '')\r\n    const [anchorEl, setAnchorEl] = useState(null)\r\n    const [availableNodesForVariable, setAvailableNodesForVariable] = useState([])\r\n    const ref = useRef(null)\r\n\r\n    const openPopOver = Boolean(anchorEl)\r\n\r\n    const handleClosePopOver = () => {\r\n        setAnchorEl(null)\r\n    }\r\n\r\n    const setNewVal = (val) => {\r\n        const newVal = myValue + val.substring(2)\r\n        onChange(newVal)\r\n        setMyValue(newVal)\r\n    }\r\n\r\n    const getInputType = (type) => {\r\n        switch (type) {\r\n            case 'string':\r\n                return 'text'\r\n            case 'password':\r\n                return 'password'\r\n            case 'number':\r\n                return 'number'\r\n            default:\r\n                return 'text'\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!disabled && nodes && edges && nodeId && inputParam) {\r\n            const nodesForVariable = inputParam?.acceptVariable ? getAvailableNodesForVariable(nodes, edges, nodeId, inputParam.id) : []\r\n            setAvailableNodesForVariable(nodesForVariable)\r\n        }\r\n    }, [disabled, inputParam, nodes, edges, nodeId])\r\n\r\n    useEffect(() => {\r\n        if (typeof myValue === 'string' && myValue && myValue.endsWith('{{')) {\r\n            setAnchorEl(ref.current)\r\n        }\r\n    }, [myValue])\r\n\r\n    return (\r\n        <>\r\n            <FormControl sx={{ mt: 1, width: '100%' }} size='small'>\r\n                <OutlinedInput\r\n                    id={inputParam.name}\r\n                    size='small'\r\n                    disabled={disabled}\r\n                    type={getInputType(inputParam.type)}\r\n                    placeholder={inputParam.placeholder}\r\n                    multiline={!!inputParam.rows}\r\n                    rows={inputParam.rows ?? 1}\r\n                    value={myValue}\r\n                    name={inputParam.name}\r\n                    onChange={(e) => {\r\n                        setMyValue(e.target.value)\r\n                        onChange(e.target.value)\r\n                    }}\r\n                    inputProps={{\r\n                        step: inputParam.step ?? 1,\r\n                        style: {\r\n                            height: inputParam.rows ? '90px' : 'inherit'\r\n                        }\r\n                    }}\r\n                />\r\n            </FormControl>\r\n            {showDialog && (\r\n                <ExpandTextDialog\r\n                    show={showDialog}\r\n                    dialogProps={dialogProps}\r\n                    onCancel={onDialogCancel}\r\n                    onConfirm={(newValue, inputParamName) => {\r\n                        setMyValue(newValue)\r\n                        onDialogConfirm(newValue, inputParamName)\r\n                    }}\r\n                ></ExpandTextDialog>\r\n            )}\r\n            <div ref={ref}></div>\r\n            {inputParam?.acceptVariable && (\r\n                <Popover\r\n                    open={openPopOver}\r\n                    anchorEl={anchorEl}\r\n                    onClose={handleClosePopOver}\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'left'\r\n                    }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'left'\r\n                    }}\r\n                >\r\n                    <SelectVariable\r\n                        disabled={disabled}\r\n                        availableNodesForVariable={availableNodesForVariable}\r\n                        onSelectAndReturnVal={(val) => {\r\n                            setNewVal(val)\r\n                            handleClosePopOver()\r\n                        }}\r\n                    />\r\n                </Popover>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nInput.propTypes = {\r\n    inputParam: PropTypes.object,\r\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    onChange: PropTypes.func,\r\n    disabled: PropTypes.bool,\r\n    showDialog: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    nodes: PropTypes.array,\r\n    edges: PropTypes.array,\r\n    nodeId: PropTypes.string,\r\n    onDialogCancel: PropTypes.func,\r\n    onDialogConfirm: PropTypes.func\r\n}\r\n","import { useSelector } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { Box, List, ListItemButton, ListItem, ListItemAvatar, ListItemText, Typography, Stack } from '@mui/material'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport robotPNG from 'assets/images/robot.png'\r\nimport chatPNG from 'assets/images/chathistory.png'\r\nimport { baseURL } from 'store/constant'\r\n\r\nconst SelectVariable = ({ availableNodesForVariable, disabled = false, onSelectAndReturnVal }) => {\r\n    const customization = useSelector((state) => state.customization)\r\n\r\n    const onSelectOutputResponseClick = (node, prefix) => {\r\n        let variablePath = node ? `${node.id}.data.instance` : prefix\r\n        const newInput = `{{${variablePath}}}`\r\n        onSelectAndReturnVal(newInput)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!disabled && (\r\n                <div style={{ flex: 30 }}>\r\n                    <Stack flexDirection='row' sx={{ mb: 1, ml: 2, mt: 2 }}>\r\n                        <Typography variant='h5'>Select Variable</Typography>\r\n                    </Stack>\r\n                    <PerfectScrollbar style={{ height: '100%', maxHeight: 'calc(100vh - 220px)', overflowX: 'hidden' }}>\r\n                        <Box sx={{ pl: 2, pr: 2 }}>\r\n                            <List>\r\n                                <ListItemButton\r\n                                    sx={{\r\n                                        p: 0,\r\n                                        borderRadius: `${customization.borderRadius}px`,\r\n                                        boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\r\n                                        mb: 1\r\n                                    }}\r\n                                    disabled={disabled}\r\n                                    onClick={() => onSelectOutputResponseClick(null, 'question')}\r\n                                >\r\n                                    <ListItem alignItems='center'>\r\n                                        <ListItemAvatar>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: 50,\r\n                                                    height: 50,\r\n                                                    borderRadius: '50%',\r\n                                                    backgroundColor: 'white'\r\n                                                }}\r\n                                            >\r\n                                                <img\r\n                                                    style={{\r\n                                                        width: '100%',\r\n                                                        height: '100%',\r\n                                                        padding: 10,\r\n                                                        objectFit: 'contain'\r\n                                                    }}\r\n                                                    alt='AI'\r\n                                                    src={robotPNG}\r\n                                                />\r\n                                            </div>\r\n                                        </ListItemAvatar>\r\n                                        <ListItemText sx={{ ml: 1 }} primary='question' secondary={`User's question from chatbox`} />\r\n                                    </ListItem>\r\n                                </ListItemButton>\r\n                                <ListItemButton\r\n                                    sx={{\r\n                                        p: 0,\r\n                                        borderRadius: `${customization.borderRadius}px`,\r\n                                        boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\r\n                                        mb: 1\r\n                                    }}\r\n                                    disabled={disabled}\r\n                                    onClick={() => onSelectOutputResponseClick(null, 'chat_history')}\r\n                                >\r\n                                    <ListItem alignItems='center'>\r\n                                        <ListItemAvatar>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: 50,\r\n                                                    height: 50,\r\n                                                    borderRadius: '50%',\r\n                                                    backgroundColor: 'white'\r\n                                                }}\r\n                                            >\r\n                                                <img\r\n                                                    style={{\r\n                                                        width: '100%',\r\n                                                        height: '100%',\r\n                                                        padding: 10,\r\n                                                        objectFit: 'contain'\r\n                                                    }}\r\n                                                    alt='chatHistory'\r\n                                                    src={chatPNG}\r\n                                                />\r\n                                            </div>\r\n                                        </ListItemAvatar>\r\n                                        <ListItemText\r\n                                            sx={{ ml: 1 }}\r\n                                            primary='chat_history'\r\n                                            secondary={`Past conversation history between user and AI`}\r\n                                        />\r\n                                    </ListItem>\r\n                                </ListItemButton>\r\n                                {availableNodesForVariable &&\r\n                                    availableNodesForVariable.length > 0 &&\r\n                                    availableNodesForVariable.map((node, index) => {\r\n                                        const selectedOutputAnchor = node.data.outputAnchors[0].options.find(\r\n                                            (ancr) => ancr.name === node.data.outputs['output']\r\n                                        )\r\n                                        return (\r\n                                            <ListItemButton\r\n                                                key={index}\r\n                                                sx={{\r\n                                                    p: 0,\r\n                                                    borderRadius: `${customization.borderRadius}px`,\r\n                                                    boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\r\n                                                    mb: 1\r\n                                                }}\r\n                                                disabled={disabled}\r\n                                                onClick={() => onSelectOutputResponseClick(node)}\r\n                                            >\r\n                                                <ListItem alignItems='center'>\r\n                                                    <ListItemAvatar>\r\n                                                        <div\r\n                                                            style={{\r\n                                                                width: 50,\r\n                                                                height: 50,\r\n                                                                borderRadius: '50%',\r\n                                                                backgroundColor: 'white'\r\n                                                            }}\r\n                                                        >\r\n                                                            <img\r\n                                                                style={{\r\n                                                                    width: '100%',\r\n                                                                    height: '100%',\r\n                                                                    padding: 10,\r\n                                                                    objectFit: 'contain'\r\n                                                                }}\r\n                                                                alt={node.data.name}\r\n                                                                src={`${baseURL}/api/v1/node-icon/${node.data.name}`}\r\n                                                            />\r\n                                                        </div>\r\n                                                    </ListItemAvatar>\r\n                                                    <ListItemText\r\n                                                        sx={{ ml: 1 }}\r\n                                                        primary={node.data.inputs.chainName ? node.data.inputs.chainName : node.data.id}\r\n                                                        secondary={`${selectedOutputAnchor?.label ?? 'output'} from ${node.data.label}`}\r\n                                                    />\r\n                                                </ListItem>\r\n                                            </ListItemButton>\r\n                                        )\r\n                                    })}\r\n                            </List>\r\n                        </Box>\r\n                    </PerfectScrollbar>\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nSelectVariable.propTypes = {\r\n    availableNodesForVariable: PropTypes.array,\r\n    disabled: PropTypes.bool,\r\n    onSelectAndReturnVal: PropTypes.func\r\n}\r\n\r\nexport default SelectVariable\r\n","import{jsx as t}from\"react/jsx-runtime\";import{useRef as e,useEffect as n,useState as r,useCallback as o}from\"react\";function c(t,e,n,r){return new(n||(n=Promise))((function(o,c){function i(t){try{u(r.next(t))}catch(t){c(t)}}function l(t){try{u(r.throw(t))}catch(t){c(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(i,l)}u((r=r.apply(t,e||[])).next())}))}const i=r=>{var{style:o,className:i}=r,l=function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&\"function\"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(t);o<r.length;o++)e.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(t,r[o])&&(n[r[o]]=t[r[o]])}return n}(r,[\"style\",\"className\"]);const u=e(null);return n((()=>{c(void 0,void 0,void 0,(function*(){yield import(\"flowise-embed/dist/web\")}))}),[]),n((()=>{u.current&&Object.assign(u.current,l)}),[l]),t(\"flowise-fullchatbot\",{ref:u,style:o,class:i})},l=t=>{const i=e(null),[l,u]=r(!1);n((()=>(c(void 0,void 0,void 0,(function*(){yield import(\"flowise-embed/dist/web\"),u(!0)})),()=>{var t;null===(t=i.current)||void 0===t||t.remove()})),[]);const s=o((t=>{const e=document.createElement(\"flowise-chatbot\");i.current=e,a(i.current,t),document.body.append(i.current)}),[]);n((()=>{l&&(i.current||s(t),a(i.current,t))}),[s,l,t]);const a=(t,e)=>{Object.assign(t,e)};return null};export{l as BubbleChat,i as FullPageChat};\n","import { useEffect, useState } from 'react'\r\nimport { FullPageChat } from 'flowise-embed-react'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\n// Project import\r\nimport LoginDialog from 'ui-component/dialog/LoginDialog'\r\n\r\n// API\r\nimport chatflowsApi from 'api/chatflows'\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi'\r\n\r\n//Const\r\nimport { baseURL } from 'store/constant'\r\n\r\n// ==============================|| Chatbot ||============================== //\r\n\r\nconst ChatbotFull = () => {\r\n    const URLpath = document.location.pathname.toString().split('/')\r\n    const chatflowId = URLpath[URLpath.length - 1] === 'chatbot' ? '' : URLpath[URLpath.length - 1]\r\n    const navigate = useNavigate()\r\n\r\n    const [chatflow, setChatflow] = useState(null)\r\n    const [chatbotTheme, setChatbotTheme] = useState({})\r\n    const [loginDialogOpen, setLoginDialogOpen] = useState(false)\r\n    const [loginDialogProps, setLoginDialogProps] = useState({})\r\n    const [isLoading, setLoading] = useState(true)\r\n    const [chatbotOverrideConfig, setChatbotOverrideConfig] = useState({})\r\n\r\n    const getSpecificChatflowFromPublicApi = useApi(chatflowsApi.getSpecificChatflowFromPublicEndpoint)\r\n    const getSpecificChatflowApi = useApi(chatflowsApi.getSpecificChatflow)\r\n\r\n    const onLoginClick = (username, password) => {\r\n        localStorage.setItem('username', username)\r\n        localStorage.setItem('password', password)\r\n        navigate(0)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getSpecificChatflowFromPublicApi.request(chatflowId)\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (getSpecificChatflowFromPublicApi.error) {\r\n            if (getSpecificChatflowFromPublicApi.error?.response?.status === 401) {\r\n                if (localStorage.getItem('username') && localStorage.getItem('password')) {\r\n                    getSpecificChatflowApi.request(chatflowId)\r\n                } else {\r\n                    setLoginDialogProps({\r\n                        title: 'Login',\r\n                        confirmButtonName: 'Login'\r\n                    })\r\n                    setLoginDialogOpen(true)\r\n                }\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getSpecificChatflowFromPublicApi.error])\r\n\r\n    useEffect(() => {\r\n        if (getSpecificChatflowApi.error) {\r\n            if (getSpecificChatflowApi.error?.response?.status === 401) {\r\n                setLoginDialogProps({\r\n                    title: 'Login',\r\n                    confirmButtonName: 'Login'\r\n                })\r\n                setLoginDialogOpen(true)\r\n            }\r\n        }\r\n    }, [getSpecificChatflowApi.error])\r\n\r\n    useEffect(() => {\r\n        if (getSpecificChatflowFromPublicApi.data || getSpecificChatflowApi.data) {\r\n            const chatflowData = getSpecificChatflowFromPublicApi.data || getSpecificChatflowApi.data\r\n            setChatflow(chatflowData)\r\n            if (chatflowData.chatbotConfig) {\r\n                try {\r\n                    const parsedConfig = JSON.parse(chatflowData.chatbotConfig)\r\n                    setChatbotTheme(parsedConfig)\r\n                    if (parsedConfig.overrideConfig) {\r\n                        // Generate new sessionId\r\n                        if (parsedConfig.overrideConfig.generateNewSession) {\r\n                            parsedConfig.overrideConfig.sessionId = Date.now().toString()\r\n                        }\r\n                        setChatbotOverrideConfig(parsedConfig.overrideConfig)\r\n                    }\r\n                } catch (e) {\r\n                    console.error(e)\r\n                    setChatbotTheme({})\r\n                    setChatbotOverrideConfig({})\r\n                }\r\n            }\r\n        }\r\n    }, [getSpecificChatflowFromPublicApi.data, getSpecificChatflowApi.data])\r\n\r\n    useEffect(() => {\r\n        setLoading(getSpecificChatflowFromPublicApi.loading || getSpecificChatflowApi.loading)\r\n    }, [getSpecificChatflowFromPublicApi.loading, getSpecificChatflowApi.loading])\r\n\r\n    return (\r\n        <>\r\n            {!isLoading ? (\r\n                <>\r\n                    {!chatflow || chatflow.apikeyid ? (\r\n                        <p>Invalid Chatbot</p>\r\n                    ) : (\r\n                        <FullPageChat\r\n                            chatflowid={chatflow.id}\r\n                            apiHost={baseURL}\r\n                            chatflowConfig={chatbotOverrideConfig}\r\n                            theme={{ chatWindow: chatbotTheme }}\r\n                        />\r\n                    )}\r\n                    <LoginDialog show={loginDialogOpen} dialogProps={loginDialogProps} onConfirm={onLoginClick} />\r\n                </>\r\n            ) : null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChatbotFull\r\n"],"names":["getAllChatflows","client","get","getSpecificChatflow","id","concat","getSpecificChatflowFromPublicEndpoint","createNewChatflow","body","post","updateChatflow","put","deleteChatflow","delete","getIsChatflowStreaming","apiFunc","data","setData","useState","error","setError","loading","setLoading","request","async","result","arguments","err","StyledButton","styled","Button","_ref","theme","color","backgroundColor","palette","main","backgroundImage","MuiToggleButton","_ref2","show","dialogProps","onConfirm","portalElement","document","getElementById","usernameVal","setUsernameVal","passwordVal","setPasswordVal","component","_jsxs","Dialog","onKeyUp","e","key","open","fullWidth","maxWidth","children","_jsx","DialogTitle","sx","fontSize","title","DialogContent","Typography","Input","inputParam","label","name","type","placeholder","onChange","newValue","value","showDialog","style","marginTop","DialogActions","variant","onClick","confirmButtonName","createPortal","DarkCodeEditor","disabled","onValueChange","onMouseUp","onBlur","useTheme","Editor","highlight","code","languages","json","js","padding","tabSize","background","codeEditor","textareaClassName","LightCodeEditor","card","onCancel","dispatch","useDispatch","customization","useSelector","state","languageType","inputValue","setInputValue","setInputParam","useEffect","SHOW_CANVAS_DIALOG","HIDE_CANVAS_DIALOG","display","flexDirection","flex","mb","ml","PerfectScrollbar","border","borderColor","grey","borderRadius","height","maxHeight","overflowX","isDarkMode","minHeight","width","cancelButtonName","_inputParam$rows","_inputParam$step","nodes","edges","nodeId","onDialogCancel","onDialogConfirm","myValue","setMyValue","anchorEl","setAnchorEl","availableNodesForVariable","setAvailableNodesForVariable","ref","useRef","openPopOver","Boolean","handleClosePopOver","nodesForVariable","acceptVariable","getAvailableNodesForVariable","endsWith","current","_Fragment","FormControl","mt","size","OutlinedInput","getInputType","multiline","rows","target","inputProps","step","ExpandTextDialog","inputParamName","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","SelectVariable","onSelectAndReturnVal","val","newVal","substring","setNewVal","onSelectOutputResponseClick","node","prefix","variablePath","newInput","Stack","Box","pl","pr","List","ListItemButton","p","boxShadow","ListItem","alignItems","ListItemAvatar","objectFit","alt","src","robotPNG","ListItemText","primary","secondary","chatPNG","length","map","index","_selectedOutputAnchor","selectedOutputAnchor","outputAnchors","options","find","ancr","outputs","baseURL","inputs","chainName","c","t","n","r","Promise","o","i","u","next","l","throw","done","then","apply","className","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","propertyIsEnumerable","assign","class","ChatbotFull","URLpath","location","pathname","toString","split","chatflowId","navigate","useNavigate","chatflow","setChatflow","chatbotTheme","setChatbotTheme","loginDialogOpen","setLoginDialogOpen","loginDialogProps","setLoginDialogProps","isLoading","chatbotOverrideConfig","setChatbotOverrideConfig","getSpecificChatflowFromPublicApi","useApi","chatflowsApi","getSpecificChatflowApi","_getSpecificChatflowF","_getSpecificChatflowF2","response","status","localStorage","getItem","_getSpecificChatflowA","_getSpecificChatflowA2","chatflowData","chatbotConfig","parsedConfig","JSON","parse","overrideConfig","generateNewSession","sessionId","Date","now","console","apikeyid","FullPageChat","chatflowid","apiHost","chatflowConfig","chatWindow","LoginDialog","onLoginClick","username","password","setItem"],"sourceRoot":""}