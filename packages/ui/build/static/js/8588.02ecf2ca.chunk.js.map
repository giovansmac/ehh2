{"version":3,"file":"static/js/8588.02ecf2ca.chunk.js","mappings":"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","sources":["api/assistants.js","ui-component/dropdown/AsyncDropdown.js","ui-component/dropdown/MultiDropdown.js","ui-component/file/File.js","views/assistants/DeleteConfirmDialog.js","views/assistants/AssistantDialog.js","views/canvas/CredentialInputHandler.js"],"sourcesContent":["import client from './client'\r\n\r\nconst getAllAssistants = () => client.get('/assistants')\r\n\r\nconst getSpecificAssistant = (id) => client.get(`/assistants/${id}`)\r\n\r\nconst getAssistantObj = (id, credential) => client.get(`/openai-assistants/${id}?credential=${credential}`)\r\n\r\nconst getAllAvailableAssistants = (credential) => client.get(`/openai-assistants?credential=${credential}`)\r\n\r\nconst createNewAssistant = (body) => client.post(`/assistants`, body)\r\n\r\nconst updateAssistant = (id, body) => client.put(`/assistants/${id}`, body)\r\n\r\nconst deleteAssistant = (id, isDeleteBoth) =>\r\n    isDeleteBoth ? client.delete(`/assistants/${id}?isDeleteBoth=true`) : client.delete(`/assistants/${id}`)\r\n\r\nexport default {\r\n    getAllAssistants,\r\n    getSpecificAssistant,\r\n    getAssistantObj,\r\n    getAllAvailableAssistants,\r\n    createNewAssistant,\r\n    updateAssistant,\r\n    deleteAssistant\r\n}\r\n","import { useState, useEffect, Fragment } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport axios from 'axios'\r\n\r\n// Material\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete'\r\nimport { Popper, CircularProgress, TextField, Box, Typography } from '@mui/material'\r\nimport { styled } from '@mui/material/styles'\r\n\r\n// API\r\nimport credentialsApi from 'api/credentials'\r\n\r\n// const\r\nimport { baseURL } from 'store/constant'\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10\r\n        }\r\n    }\r\n})\r\n\r\nconst fetchList = async ({ name, nodeData }) => {\r\n    const loadMethod = nodeData.inputParams.find((param) => param.name === name)?.loadMethod\r\n    const username = localStorage.getItem('username')\r\n    const password = localStorage.getItem('password')\r\n\r\n    let lists = await axios\r\n        .post(\r\n            `${baseURL}/api/v1/node-load-method/${nodeData.name}`,\r\n            { ...nodeData, loadMethod },\r\n            { auth: username && password ? { username, password } : undefined }\r\n        )\r\n        .then(async function (response) {\r\n            return response.data\r\n        })\r\n        .catch(function (error) {\r\n            console.error(error)\r\n        })\r\n    return lists\r\n}\r\n\r\nexport const AsyncDropdown = ({\r\n    name,\r\n    nodeData,\r\n    value,\r\n    onSelect,\r\n    isCreateNewOption,\r\n    onCreateNew,\r\n    credentialNames = [],\r\n    disabled = false,\r\n    disableClearable = false\r\n}) => {\r\n    const customization = useSelector((state) => state.customization)\r\n\r\n    const [open, setOpen] = useState(false)\r\n    const [options, setOptions] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n    const findMatchingOptions = (options = [], value) => options.find((option) => option.name === value)\r\n    const getDefaultOptionValue = () => ''\r\n    const addNewOption = [{ label: '- Create New -', name: '-create-' }]\r\n    let [internalValue, setInternalValue] = useState(value ?? 'choose an option')\r\n\r\n    const fetchCredentialList = async () => {\r\n        try {\r\n            let names = ''\r\n            if (credentialNames.length > 1) {\r\n                names = credentialNames.join('&credentialName=')\r\n            } else {\r\n                names = credentialNames[0]\r\n            }\r\n            const resp = await credentialsApi.getCredentialsByName(names)\r\n            if (resp.data) {\r\n                const returnList = []\r\n                for (let i = 0; i < resp.data.length; i += 1) {\r\n                    const data = {\r\n                        label: resp.data[i].name,\r\n                        name: resp.data[i].id\r\n                    }\r\n                    returnList.push(data)\r\n                }\r\n                return returnList\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        ;(async () => {\r\n            const fetchData = async () => {\r\n                let response = credentialNames.length ? await fetchCredentialList() : await fetchList({ name, nodeData })\r\n                if (isCreateNewOption) setOptions([...response, ...addNewOption])\r\n                else setOptions([...response])\r\n                setLoading(false)\r\n            }\r\n            fetchData()\r\n        })()\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <Autocomplete\r\n                id={name}\r\n                disabled={disabled}\r\n                disableClearable={disableClearable}\r\n                size='small'\r\n                sx={{ width: '100%' }}\r\n                open={open}\r\n                onOpen={() => {\r\n                    setOpen(true)\r\n                }}\r\n                onClose={() => {\r\n                    setOpen(false)\r\n                }}\r\n                options={options}\r\n                value={findMatchingOptions(options, internalValue) || getDefaultOptionValue()}\r\n                onChange={(e, selection) => {\r\n                    const value = selection ? selection.name : ''\r\n                    if (isCreateNewOption && value === '-create-') {\r\n                        onCreateNew()\r\n                    } else {\r\n                        setInternalValue(value)\r\n                        onSelect(value)\r\n                    }\r\n                }}\r\n                PopperComponent={StyledPopper}\r\n                loading={loading}\r\n                renderInput={(params) => (\r\n                    <TextField\r\n                        {...params}\r\n                        value={internalValue}\r\n                        InputProps={{\r\n                            ...params.InputProps,\r\n                            endAdornment: (\r\n                                <Fragment>\r\n                                    {loading ? <CircularProgress color='inherit' size={20} /> : null}\r\n                                    {params.InputProps.endAdornment}\r\n                                </Fragment>\r\n                            )\r\n                        }}\r\n                    />\r\n                )}\r\n                renderOption={(props, option) => (\r\n                    <Box component='li' {...props}>\r\n                        <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                            <Typography variant='h5'>{option.label}</Typography>\r\n                            {option.description && (\r\n                                <Typography sx={{ color: customization.isDarkMode ? '#9e9e9e' : '' }}>{option.description}</Typography>\r\n                            )}\r\n                        </div>\r\n                    </Box>\r\n                )}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nAsyncDropdown.propTypes = {\r\n    name: PropTypes.string,\r\n    nodeData: PropTypes.object,\r\n    value: PropTypes.string,\r\n    onSelect: PropTypes.func,\r\n    onCreateNew: PropTypes.func,\r\n    disabled: PropTypes.bool,\r\n    credentialNames: PropTypes.array,\r\n    disableClearable: PropTypes.bool,\r\n    isCreateNewOption: PropTypes.bool\r\n}\r\n","import { useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { Popper, FormControl, TextField, Box, Typography } from '@mui/material'\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete'\r\nimport { styled } from '@mui/material/styles'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10\r\n        }\r\n    }\r\n})\r\n\r\nexport const MultiDropdown = ({ name, value, options, onSelect, formControlSx = {}, disabled = false, disableClearable = false }) => {\r\n    const customization = useSelector((state) => state.customization)\r\n    const findMatchingOptions = (options = [], internalValue) => {\r\n        let values = []\r\n        if (internalValue && typeof internalValue === 'string') values = JSON.parse(internalValue)\r\n        else values = internalValue\r\n        return options.filter((option) => values.includes(option.name))\r\n    }\r\n    const getDefaultOptionValue = () => []\r\n    let [internalValue, setInternalValue] = useState(value ?? [])\r\n\r\n    return (\r\n        <FormControl sx={{ mt: 1, width: '100%', ...formControlSx }} size='small'>\r\n            <Autocomplete\r\n                id={name}\r\n                disabled={disabled}\r\n                disableClearable={disableClearable}\r\n                size='small'\r\n                multiple\r\n                filterSelectedOptions\r\n                options={options || []}\r\n                value={findMatchingOptions(options, internalValue) || getDefaultOptionValue()}\r\n                onChange={(e, selections) => {\r\n                    let value = ''\r\n                    if (selections.length) {\r\n                        const selectionNames = []\r\n                        for (let i = 0; i < selections.length; i += 1) {\r\n                            selectionNames.push(selections[i].name)\r\n                        }\r\n                        value = JSON.stringify(selectionNames)\r\n                    }\r\n                    setInternalValue(value)\r\n                    onSelect(value)\r\n                }}\r\n                PopperComponent={StyledPopper}\r\n                renderInput={(params) => <TextField {...params} value={internalValue} />}\r\n                renderOption={(props, option) => (\r\n                    <Box component='li' {...props}>\r\n                        <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                            <Typography variant='h5'>{option.label}</Typography>\r\n                            {option.description && (\r\n                                <Typography sx={{ color: customization.isDarkMode ? '#9e9e9e' : '' }}>{option.description}</Typography>\r\n                            )}\r\n                        </div>\r\n                    </Box>\r\n                )}\r\n            />\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nMultiDropdown.propTypes = {\r\n    name: PropTypes.string,\r\n    value: PropTypes.string,\r\n    options: PropTypes.array,\r\n    onSelect: PropTypes.func,\r\n    disabled: PropTypes.bool,\r\n    formControlSx: PropTypes.object,\r\n    disableClearable: PropTypes.bool\r\n}\r\n","import { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { useTheme } from '@mui/material/styles'\r\nimport { FormControl, Button } from '@mui/material'\r\nimport { IconUpload } from '@tabler/icons'\r\nimport { getFileName } from 'utils/genericHelper'\r\n\r\nexport const File = ({ value, fileType, onChange, disabled = false }) => {\r\n    const theme = useTheme()\r\n\r\n    const [myValue, setMyValue] = useState(value ?? '')\r\n\r\n    const handleFileUpload = async (e) => {\r\n        if (!e.target.files) return\r\n\r\n        if (e.target.files.length === 1) {\r\n            const file = e.target.files[0]\r\n            const { name } = file\r\n\r\n            const reader = new FileReader()\r\n            reader.onload = (evt) => {\r\n                if (!evt?.target?.result) {\r\n                    return\r\n                }\r\n                const { result } = evt.target\r\n\r\n                const value = result + `,filename:${name}`\r\n\r\n                setMyValue(value)\r\n                onChange(value)\r\n            }\r\n            reader.readAsDataURL(file)\r\n        } else if (e.target.files.length > 0) {\r\n            let files = Array.from(e.target.files).map((file) => {\r\n                const reader = new FileReader()\r\n                const { name } = file\r\n\r\n                return new Promise((resolve) => {\r\n                    reader.onload = (evt) => {\r\n                        if (!evt?.target?.result) {\r\n                            return\r\n                        }\r\n                        const { result } = evt.target\r\n                        const value = result + `,filename:${name}`\r\n                        resolve(value)\r\n                    }\r\n                    reader.readAsDataURL(file)\r\n                })\r\n            })\r\n\r\n            const res = await Promise.all(files)\r\n            setMyValue(JSON.stringify(res))\r\n            onChange(JSON.stringify(res))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <FormControl sx={{ mt: 1, width: '100%' }} size='small'>\r\n            <span\r\n                style={{\r\n                    fontStyle: 'italic',\r\n                    color: theme.palette.grey['800'],\r\n                    marginBottom: '1rem'\r\n                }}\r\n            >\r\n                {myValue ? getFileName(myValue) : 'Choose a file to upload'}\r\n            </span>\r\n            <Button\r\n                disabled={disabled}\r\n                variant='outlined'\r\n                component='label'\r\n                fullWidth\r\n                startIcon={<IconUpload />}\r\n                sx={{ marginRight: '1rem' }}\r\n            >\r\n                {'Upload File'}\r\n                <input type='file' multiple accept={fileType} hidden onChange={(e) => handleFileUpload(e)} />\r\n            </Button>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nFile.propTypes = {\r\n    value: PropTypes.string,\r\n    fileType: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    disabled: PropTypes.bool\r\n}\r\n","import { createPortal } from 'react-dom'\r\nimport PropTypes from 'prop-types'\r\nimport { Button, Dialog, DialogContent, DialogTitle } from '@mui/material'\r\nimport { StyledButton } from 'ui-component/button/StyledButton'\r\n\r\nconst DeleteConfirmDialog = ({ show, dialogProps, onCancel, onDelete, onDeleteBoth }) => {\r\n    const portalElement = document.getElementById('portal')\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            fullWidth\r\n            maxWidth='xs'\r\n            open={show}\r\n            onClose={onCancel}\r\n            aria-labelledby='alert-dialog-title'\r\n            aria-describedby='alert-dialog-description'\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <span>{dialogProps.description}</span>\r\n                <div style={{ display: 'flex', flexDirection: 'column', marginTop: 20 }}>\r\n                    <StyledButton sx={{ mb: 1 }} color='orange' variant='contained' onClick={onDelete}>\r\n                        Delete only from Flowise\r\n                    </StyledButton>\r\n                    <StyledButton sx={{ mb: 1 }} color='error' variant='contained' onClick={onDeleteBoth}>\r\n                        Delete from both OpenAI and Flowise\r\n                    </StyledButton>\r\n                    <Button onClick={onCancel}>{dialogProps.cancelButtonName}</Button>\r\n                </div>\r\n            </DialogContent>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nDeleteConfirmDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onDeleteBoth: PropTypes.func,\r\n    onDelete: PropTypes.func,\r\n    onCancel: PropTypes.func\r\n}\r\n\r\nexport default DeleteConfirmDialog\r\n","import { createPortal } from 'react-dom'\r\nimport PropTypes from 'prop-types'\r\nimport { useState, useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction } from 'store/actions'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nimport { Box, Typography, Button, IconButton, Dialog, DialogActions, DialogContent, DialogTitle, Stack, OutlinedInput } from '@mui/material'\r\n\r\nimport { StyledButton } from 'ui-component/button/StyledButton'\r\nimport { TooltipWithParser } from 'ui-component/tooltip/TooltipWithParser'\r\nimport { Dropdown } from 'ui-component/dropdown/Dropdown'\r\nimport { MultiDropdown } from 'ui-component/dropdown/MultiDropdown'\r\nimport CredentialInputHandler from 'views/canvas/CredentialInputHandler'\r\nimport { File } from 'ui-component/file/File'\r\nimport { BackdropLoader } from 'ui-component/loading/BackdropLoader'\r\nimport DeleteConfirmDialog from './DeleteConfirmDialog'\r\n\r\n// Icons\r\nimport { IconX } from '@tabler/icons'\r\n\r\n// API\r\nimport assistantsApi from 'api/assistants'\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi'\r\n\r\n// utils\r\nimport useNotifier from 'utils/useNotifier'\r\nimport { HIDE_CANVAS_DIALOG, SHOW_CANVAS_DIALOG } from 'store/actions'\r\n\r\nconst assistantAvailableModels = [\r\n    {\r\n        label: 'gpt-4-1106-preview',\r\n        name: 'gpt-4-1106-preview'\r\n    },\r\n    {\r\n        label: 'gpt-4-0613',\r\n        name: 'gpt-4-0613'\r\n    },\r\n    {\r\n        label: 'gpt-4-0314',\r\n        name: 'gpt-4-0314'\r\n    },\r\n    {\r\n        label: 'gpt-4',\r\n        name: 'gpt-4'\r\n    },\r\n    {\r\n        label: 'gpt-3.5-turbo',\r\n        name: 'gpt-3.5-turbo'\r\n    },\r\n    {\r\n        label: 'gpt-3.5-turbo-1106',\r\n        name: 'gpt-3.5-turbo-1106'\r\n    },\r\n    {\r\n        label: 'gpt-3.5-turbo-0613',\r\n        name: 'gpt-3.5-turbo-0613'\r\n    },\r\n    {\r\n        label: 'gpt-3.5-turbo-16k',\r\n        name: 'gpt-3.5-turbo-16k'\r\n    },\r\n    {\r\n        label: 'gpt-3.5-turbo-16k-0613',\r\n        name: 'gpt-3.5-turbo-16k-0613'\r\n    }\r\n]\r\n\r\nconst AssistantDialog = ({ show, dialogProps, onCancel, onConfirm }) => {\r\n    const portalElement = document.getElementById('portal')\r\n    useNotifier()\r\n    const dispatch = useDispatch()\r\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\r\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\r\n\r\n    const getSpecificAssistantApi = useApi(assistantsApi.getSpecificAssistant)\r\n    const getAssistantObjApi = useApi(assistantsApi.getAssistantObj)\r\n\r\n    const [assistantId, setAssistantId] = useState('')\r\n    const [openAIAssistantId, setOpenAIAssistantId] = useState('')\r\n    const [assistantName, setAssistantName] = useState('')\r\n    const [assistantDesc, setAssistantDesc] = useState('')\r\n    const [assistantIcon, setAssistantIcon] = useState(`https://api.dicebear.com/7.x/bottts/svg?seed=${uuidv4()}`)\r\n    const [assistantModel, setAssistantModel] = useState('')\r\n    const [assistantCredential, setAssistantCredential] = useState('')\r\n    const [assistantInstructions, setAssistantInstructions] = useState('')\r\n    const [assistantTools, setAssistantTools] = useState(['code_interpreter', 'retrieval'])\r\n    const [assistantFiles, setAssistantFiles] = useState([])\r\n    const [uploadAssistantFiles, setUploadAssistantFiles] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false)\r\n    const [deleteDialogProps, setDeleteDialogProps] = useState({})\r\n\r\n    useEffect(() => {\r\n        if (show) dispatch({ type: SHOW_CANVAS_DIALOG })\r\n        else dispatch({ type: HIDE_CANVAS_DIALOG })\r\n        return () => dispatch({ type: HIDE_CANVAS_DIALOG })\r\n    }, [show, dispatch])\r\n\r\n    useEffect(() => {\r\n        if (getSpecificAssistantApi.data) {\r\n            setAssistantId(getSpecificAssistantApi.data.id)\r\n            setAssistantIcon(getSpecificAssistantApi.data.iconSrc)\r\n            setAssistantCredential(getSpecificAssistantApi.data.credential)\r\n\r\n            const assistantDetails = JSON.parse(getSpecificAssistantApi.data.details)\r\n            setOpenAIAssistantId(assistantDetails.id)\r\n            setAssistantName(assistantDetails.name)\r\n            setAssistantDesc(assistantDetails.description)\r\n            setAssistantModel(assistantDetails.model)\r\n            setAssistantInstructions(assistantDetails.instructions)\r\n            setAssistantTools(assistantDetails.tools ?? [])\r\n            setAssistantFiles(assistantDetails.files ?? [])\r\n        }\r\n    }, [getSpecificAssistantApi.data])\r\n\r\n    useEffect(() => {\r\n        if (getAssistantObjApi.data) {\r\n            syncData(getAssistantObjApi.data)\r\n        }\r\n    }, [getAssistantObjApi.data])\r\n\r\n    useEffect(() => {\r\n        if (dialogProps.type === 'EDIT' && dialogProps.data) {\r\n            // When assistant dialog is opened from Assistants dashboard\r\n            setAssistantId(dialogProps.data.id)\r\n            setAssistantIcon(dialogProps.data.iconSrc)\r\n            setAssistantCredential(dialogProps.data.credential)\r\n\r\n            const assistantDetails = JSON.parse(dialogProps.data.details)\r\n            setOpenAIAssistantId(assistantDetails.id)\r\n            setAssistantName(assistantDetails.name)\r\n            setAssistantDesc(assistantDetails.description)\r\n            setAssistantModel(assistantDetails.model)\r\n            setAssistantInstructions(assistantDetails.instructions)\r\n            setAssistantTools(assistantDetails.tools ?? [])\r\n            setAssistantFiles(assistantDetails.files ?? [])\r\n        } else if (dialogProps.type === 'EDIT' && dialogProps.assistantId) {\r\n            // When assistant dialog is opened from OpenAIAssistant node in canvas\r\n            getSpecificAssistantApi.request(dialogProps.assistantId)\r\n        } else if (dialogProps.type === 'ADD' && dialogProps.selectedOpenAIAssistantId && dialogProps.credential) {\r\n            // When assistant dialog is to add new assistant from existing\r\n            setAssistantId('')\r\n            setAssistantIcon(`https://api.dicebear.com/7.x/bottts/svg?seed=${uuidv4()}`)\r\n            setAssistantCredential(dialogProps.credential)\r\n\r\n            getAssistantObjApi.request(dialogProps.selectedOpenAIAssistantId, dialogProps.credential)\r\n        } else if (dialogProps.type === 'ADD' && !dialogProps.selectedOpenAIAssistantId) {\r\n            // When assistant dialog is to add a blank new assistant\r\n            setAssistantId('')\r\n            setAssistantIcon(`https://api.dicebear.com/7.x/bottts/svg?seed=${uuidv4()}`)\r\n            setAssistantCredential('')\r\n\r\n            setOpenAIAssistantId('')\r\n            setAssistantName('')\r\n            setAssistantDesc('')\r\n            setAssistantModel('')\r\n            setAssistantInstructions('')\r\n            setAssistantTools(['code_interpreter', 'retrieval'])\r\n            setUploadAssistantFiles('')\r\n            setAssistantFiles([])\r\n        }\r\n\r\n        return () => {\r\n            setAssistantId('')\r\n            setAssistantIcon(`https://api.dicebear.com/7.x/bottts/svg?seed=${uuidv4()}`)\r\n            setAssistantCredential('')\r\n\r\n            setOpenAIAssistantId('')\r\n            setAssistantName('')\r\n            setAssistantDesc('')\r\n            setAssistantModel('')\r\n            setAssistantInstructions('')\r\n            setAssistantTools(['code_interpreter', 'retrieval'])\r\n            setUploadAssistantFiles('')\r\n            setAssistantFiles([])\r\n            setLoading(false)\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [dialogProps])\r\n\r\n    const syncData = (data) => {\r\n        setOpenAIAssistantId(data.id)\r\n        setAssistantName(data.name)\r\n        setAssistantDesc(data.description)\r\n        setAssistantModel(data.model)\r\n        setAssistantInstructions(data.instructions)\r\n        setAssistantFiles(data.files ?? [])\r\n\r\n        let tools = []\r\n        if (data.tools && data.tools.length) {\r\n            for (const tool of data.tools) {\r\n                tools.push(tool.type)\r\n            }\r\n        }\r\n        setAssistantTools(tools)\r\n    }\r\n\r\n    const addNewAssistant = async () => {\r\n        setLoading(true)\r\n        try {\r\n            const assistantDetails = {\r\n                id: openAIAssistantId,\r\n                name: assistantName,\r\n                description: assistantDesc,\r\n                model: assistantModel,\r\n                instructions: assistantInstructions,\r\n                tools: assistantTools,\r\n                files: assistantFiles,\r\n                uploadFiles: uploadAssistantFiles\r\n            }\r\n            const obj = {\r\n                details: JSON.stringify(assistantDetails),\r\n                iconSrc: assistantIcon,\r\n                credential: assistantCredential\r\n            }\r\n\r\n            const createResp = await assistantsApi.createNewAssistant(obj)\r\n            if (createResp.data) {\r\n                enqueueSnackbar({\r\n                    message: 'New Assistant added',\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'success',\r\n                        action: (key) => (\r\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        )\r\n                    }\r\n                })\r\n                onConfirm(createResp.data.id)\r\n            }\r\n            setLoading(false)\r\n        } catch (error) {\r\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n            enqueueSnackbar({\r\n                message: `Failed to add new Assistant: ${errorData}`,\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n            setLoading(false)\r\n            onCancel()\r\n        }\r\n    }\r\n\r\n    const saveAssistant = async () => {\r\n        setLoading(true)\r\n        try {\r\n            const assistantDetails = {\r\n                name: assistantName,\r\n                description: assistantDesc,\r\n                model: assistantModel,\r\n                instructions: assistantInstructions,\r\n                tools: assistantTools,\r\n                files: assistantFiles,\r\n                uploadFiles: uploadAssistantFiles\r\n            }\r\n            const obj = {\r\n                details: JSON.stringify(assistantDetails),\r\n                iconSrc: assistantIcon,\r\n                credential: assistantCredential\r\n            }\r\n            const saveResp = await assistantsApi.updateAssistant(assistantId, obj)\r\n            if (saveResp.data) {\r\n                enqueueSnackbar({\r\n                    message: 'Assistant saved',\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'success',\r\n                        action: (key) => (\r\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        )\r\n                    }\r\n                })\r\n                onConfirm(saveResp.data.id)\r\n            }\r\n            setLoading(false)\r\n        } catch (error) {\r\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n            enqueueSnackbar({\r\n                message: `Failed to save Assistant: ${errorData}`,\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n            setLoading(false)\r\n            onCancel()\r\n        }\r\n    }\r\n\r\n    const onSyncClick = async () => {\r\n        setLoading(true)\r\n        try {\r\n            const getResp = await assistantsApi.getAssistantObj(openAIAssistantId, assistantCredential)\r\n            if (getResp.data) {\r\n                syncData(getResp.data)\r\n                enqueueSnackbar({\r\n                    message: 'Assistant successfully synced!',\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'success',\r\n                        action: (key) => (\r\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n            setLoading(false)\r\n        } catch (error) {\r\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n            enqueueSnackbar({\r\n                message: `Failed to sync Assistant: ${errorData}`,\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    const onDeleteClick = () => {\r\n        setDeleteDialogProps({\r\n            title: `Delete Assistant`,\r\n            description: `Delete Assistant ${assistantName}?`,\r\n            cancelButtonName: 'Cancel'\r\n        })\r\n        setDeleteDialogOpen(true)\r\n    }\r\n\r\n    const deleteAssistant = async (isDeleteBoth) => {\r\n        setDeleteDialogOpen(false)\r\n        try {\r\n            const delResp = await assistantsApi.deleteAssistant(assistantId, isDeleteBoth)\r\n            if (delResp.data) {\r\n                enqueueSnackbar({\r\n                    message: 'Assistant deleted',\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'success',\r\n                        action: (key) => (\r\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        )\r\n                    }\r\n                })\r\n                onConfirm()\r\n            }\r\n        } catch (error) {\r\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n            enqueueSnackbar({\r\n                message: `Failed to delete Assistant: ${errorData}`,\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n            onCancel()\r\n        }\r\n    }\r\n\r\n    const onFileDeleteClick = async (fileId) => {\r\n        setAssistantFiles(assistantFiles.filter((file) => file.id !== fileId))\r\n    }\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            fullWidth\r\n            maxWidth='md'\r\n            open={show}\r\n            onClose={onCancel}\r\n            aria-labelledby='alert-dialog-title'\r\n            aria-describedby='alert-dialog-description'\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <Box sx={{ p: 2 }}>\r\n                    <Stack sx={{ position: 'relative' }} direction='row'>\r\n                        <Typography variant='overline'>\r\n                            Assistant Name\r\n                            <TooltipWithParser\r\n                                style={{ marginLeft: 10 }}\r\n                                title={'The name of the assistant. The maximum length is 256 characters.'}\r\n                            />\r\n                        </Typography>\r\n                    </Stack>\r\n                    <OutlinedInput\r\n                        id='assistantName'\r\n                        type='string'\r\n                        fullWidth\r\n                        placeholder='My New Assistant'\r\n                        value={assistantName}\r\n                        name='assistantName'\r\n                        onChange={(e) => setAssistantName(e.target.value)}\r\n                    />\r\n                </Box>\r\n                <Box sx={{ p: 2 }}>\r\n                    <Stack sx={{ position: 'relative' }} direction='row'>\r\n                        <Typography variant='overline'>\r\n                            Assistant Description\r\n                            <TooltipWithParser\r\n                                style={{ marginLeft: 10 }}\r\n                                title={'The description of the assistant. The maximum length is 512 characters.'}\r\n                            />\r\n                        </Typography>\r\n                    </Stack>\r\n                    <OutlinedInput\r\n                        id='assistantDesc'\r\n                        type='string'\r\n                        fullWidth\r\n                        placeholder='Description of what the Assistant does'\r\n                        multiline={true}\r\n                        rows={3}\r\n                        value={assistantDesc}\r\n                        name='assistantDesc'\r\n                        onChange={(e) => setAssistantDesc(e.target.value)}\r\n                    />\r\n                </Box>\r\n                <Box sx={{ p: 2 }}>\r\n                    <Stack sx={{ position: 'relative' }} direction='row'>\r\n                        <Typography variant='overline'>Assistant Icon Src</Typography>\r\n                    </Stack>\r\n                    <div\r\n                        style={{\r\n                            width: 100,\r\n                            height: 100,\r\n                            borderRadius: '50%',\r\n                            backgroundColor: 'white'\r\n                        }}\r\n                    >\r\n                        <img\r\n                            style={{\r\n                                width: '100%',\r\n                                height: '100%',\r\n                                padding: 5,\r\n                                borderRadius: '50%',\r\n                                objectFit: 'contain'\r\n                            }}\r\n                            alt={assistantName}\r\n                            src={assistantIcon}\r\n                        />\r\n                    </div>\r\n                    <OutlinedInput\r\n                        id='assistantIcon'\r\n                        type='string'\r\n                        fullWidth\r\n                        placeholder={`https://api.dicebear.com/7.x/bottts/svg?seed=${uuidv4()}`}\r\n                        value={assistantIcon}\r\n                        name='assistantIcon'\r\n                        onChange={(e) => setAssistantIcon(e.target.value)}\r\n                    />\r\n                </Box>\r\n                <Box sx={{ p: 2 }}>\r\n                    <Stack sx={{ position: 'relative' }} direction='row'>\r\n                        <Typography variant='overline'>\r\n                            Assistant Model\r\n                            <span style={{ color: 'red' }}>&nbsp;*</span>\r\n                        </Typography>\r\n                    </Stack>\r\n                    <Dropdown\r\n                        key={assistantModel}\r\n                        name={assistantModel}\r\n                        options={assistantAvailableModels}\r\n                        onSelect={(newValue) => setAssistantModel(newValue)}\r\n                        value={assistantModel ?? 'choose an option'}\r\n                    />\r\n                </Box>\r\n                <Box sx={{ p: 2 }}>\r\n                    <Stack sx={{ position: 'relative' }} direction='row'>\r\n                        <Typography variant='overline'>\r\n                            OpenAI Credential\r\n                            <span style={{ color: 'red' }}>&nbsp;*</span>\r\n                        </Typography>\r\n                    </Stack>\r\n                    <CredentialInputHandler\r\n                        key={assistantCredential}\r\n                        data={assistantCredential ? { credential: assistantCredential } : {}}\r\n                        inputParam={{\r\n                            label: 'Connect Credential',\r\n                            name: 'credential',\r\n                            type: 'credential',\r\n                            credentialNames: ['openAIApi']\r\n                        }}\r\n                        onSelect={(newValue) => setAssistantCredential(newValue)}\r\n                    />\r\n                </Box>\r\n                <Box sx={{ p: 2 }}>\r\n                    <Stack sx={{ position: 'relative' }} direction='row'>\r\n                        <Typography variant='overline'>\r\n                            Assistant Instruction\r\n                            <TooltipWithParser\r\n                                style={{ marginLeft: 10 }}\r\n                                title={'The system instructions that the assistant uses. The maximum length is 32768 characters.'}\r\n                            />\r\n                        </Typography>\r\n                    </Stack>\r\n                    <OutlinedInput\r\n                        id='assistantInstructions'\r\n                        type='string'\r\n                        fullWidth\r\n                        placeholder='You are a personal math tutor. When asked a question, write and run Python code to answer the question.'\r\n                        multiline={true}\r\n                        rows={3}\r\n                        value={assistantInstructions}\r\n                        name='assistantInstructions'\r\n                        onChange={(e) => setAssistantInstructions(e.target.value)}\r\n                    />\r\n                </Box>\r\n                <Box sx={{ p: 2 }}>\r\n                    <Stack sx={{ position: 'relative' }} direction='row'>\r\n                        <Typography variant='overline'>\r\n                            Assistant Tools\r\n                            <TooltipWithParser\r\n                                style={{ marginLeft: 10 }}\r\n                                title='A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant.'\r\n                            />\r\n                        </Typography>\r\n                    </Stack>\r\n                    <MultiDropdown\r\n                        key={JSON.stringify(assistantTools)}\r\n                        name={JSON.stringify(assistantTools)}\r\n                        options={[\r\n                            {\r\n                                label: 'Code Interpreter',\r\n                                name: 'code_interpreter'\r\n                            },\r\n                            {\r\n                                label: 'Retrieval',\r\n                                name: 'retrieval'\r\n                            }\r\n                        ]}\r\n                        onSelect={(newValue) => (newValue ? setAssistantTools(JSON.parse(newValue)) : setAssistantTools([]))}\r\n                        value={assistantTools ?? 'choose an option'}\r\n                    />\r\n                </Box>\r\n                <Box sx={{ p: 2 }}>\r\n                    <Stack sx={{ position: 'relative' }} direction='row'>\r\n                        <Typography variant='overline'>\r\n                            Knowledge Files\r\n                            <TooltipWithParser\r\n                                style={{ marginLeft: 10 }}\r\n                                title='Allow assistant to use the content from uploaded files for retrieval and code interpreter. MAX: 20 files'\r\n                            />\r\n                        </Typography>\r\n                    </Stack>\r\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                        {assistantFiles.map((file, index) => (\r\n                            <div\r\n                                key={index}\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    flexDirection: 'row',\r\n                                    alignItems: 'center',\r\n                                    width: 'max-content',\r\n                                    height: 'max-content',\r\n                                    borderRadius: 15,\r\n                                    background: 'rgb(254,252,191)',\r\n                                    paddingLeft: 15,\r\n                                    paddingRight: 15,\r\n                                    paddingTop: 5,\r\n                                    paddingBottom: 5,\r\n                                    marginRight: 10\r\n                                }}\r\n                            >\r\n                                <span style={{ color: 'rgb(116,66,16)', marginRight: 10 }}>{file.filename}</span>\r\n                                <IconButton sx={{ height: 15, width: 15, p: 0 }} onClick={() => onFileDeleteClick(file.id)}>\r\n                                    <IconX />\r\n                                </IconButton>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <File\r\n                        key={uploadAssistantFiles}\r\n                        fileType='*'\r\n                        onChange={(newValue) => setUploadAssistantFiles(newValue)}\r\n                        value={uploadAssistantFiles ?? 'Choose a file to upload'}\r\n                    />\r\n                </Box>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                {dialogProps.type === 'EDIT' && (\r\n                    <StyledButton color='secondary' variant='contained' onClick={() => onSyncClick()}>\r\n                        Sync\r\n                    </StyledButton>\r\n                )}\r\n                {dialogProps.type === 'EDIT' && (\r\n                    <StyledButton color='error' variant='contained' onClick={() => onDeleteClick()}>\r\n                        Delete\r\n                    </StyledButton>\r\n                )}\r\n                <StyledButton\r\n                    disabled={!(assistantModel && assistantCredential)}\r\n                    variant='contained'\r\n                    onClick={() => (dialogProps.type === 'ADD' ? addNewAssistant() : saveAssistant())}\r\n                >\r\n                    {dialogProps.confirmButtonName}\r\n                </StyledButton>\r\n            </DialogActions>\r\n            <DeleteConfirmDialog\r\n                show={deleteDialogOpen}\r\n                dialogProps={deleteDialogProps}\r\n                onCancel={() => setDeleteDialogOpen(false)}\r\n                onDelete={() => deleteAssistant()}\r\n                onDeleteBoth={() => deleteAssistant(true)}\r\n            />\r\n            {loading && <BackdropLoader open={loading} />}\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nAssistantDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onConfirm: PropTypes.func\r\n}\r\n\r\nexport default AssistantDialog\r\n","import PropTypes from 'prop-types'\r\nimport { useRef, useState } from 'react'\r\n\r\n// material-ui\r\nimport { IconButton } from '@mui/material'\r\nimport { IconEdit } from '@tabler/icons'\r\n\r\n// project import\r\nimport { AsyncDropdown } from 'ui-component/dropdown/AsyncDropdown'\r\nimport AddEditCredentialDialog from 'views/credentials/AddEditCredentialDialog'\r\nimport CredentialListDialog from 'views/credentials/CredentialListDialog'\r\n\r\n// API\r\nimport credentialsApi from 'api/credentials'\r\n\r\n// ===========================|| CredentialInputHandler ||=========================== //\r\n\r\nconst CredentialInputHandler = ({ inputParam, data, onSelect, disabled = false }) => {\r\n    const ref = useRef(null)\r\n    const [credentialId, setCredentialId] = useState(data?.credential ?? '')\r\n    const [showCredentialListDialog, setShowCredentialListDialog] = useState(false)\r\n    const [credentialListDialogProps, setCredentialListDialogProps] = useState({})\r\n    const [showSpecificCredentialDialog, setShowSpecificCredentialDialog] = useState(false)\r\n    const [specificCredentialDialogProps, setSpecificCredentialDialogProps] = useState({})\r\n    const [reloadTimestamp, setReloadTimestamp] = useState(Date.now().toString())\r\n\r\n    const editCredential = (credentialId) => {\r\n        const dialogProp = {\r\n            type: 'EDIT',\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Save',\r\n            credentialId\r\n        }\r\n        setSpecificCredentialDialogProps(dialogProp)\r\n        setShowSpecificCredentialDialog(true)\r\n    }\r\n\r\n    const addAsyncOption = async () => {\r\n        try {\r\n            let names = ''\r\n            if (inputParam.credentialNames.length > 1) {\r\n                names = inputParam.credentialNames.join('&')\r\n            } else {\r\n                names = inputParam.credentialNames[0]\r\n            }\r\n            const componentCredentialsResp = await credentialsApi.getSpecificComponentCredential(names)\r\n            if (componentCredentialsResp.data) {\r\n                if (Array.isArray(componentCredentialsResp.data)) {\r\n                    const dialogProp = {\r\n                        title: 'Add New Credential',\r\n                        componentsCredentials: componentCredentialsResp.data\r\n                    }\r\n                    setCredentialListDialogProps(dialogProp)\r\n                    setShowCredentialListDialog(true)\r\n                } else {\r\n                    const dialogProp = {\r\n                        type: 'ADD',\r\n                        cancelButtonName: 'Cancel',\r\n                        confirmButtonName: 'Add',\r\n                        credentialComponent: componentCredentialsResp.data\r\n                    }\r\n                    setSpecificCredentialDialogProps(dialogProp)\r\n                    setShowSpecificCredentialDialog(true)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    const onConfirmAsyncOption = (selectedCredentialId = '') => {\r\n        setCredentialId(selectedCredentialId)\r\n        setReloadTimestamp(Date.now().toString())\r\n        setSpecificCredentialDialogProps({})\r\n        setShowSpecificCredentialDialog(false)\r\n        onSelect(selectedCredentialId)\r\n    }\r\n\r\n    const onCredentialSelected = (credentialComponent) => {\r\n        setShowCredentialListDialog(false)\r\n        const dialogProp = {\r\n            type: 'ADD',\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Add',\r\n            credentialComponent\r\n        }\r\n        setSpecificCredentialDialogProps(dialogProp)\r\n        setShowSpecificCredentialDialog(true)\r\n    }\r\n\r\n    return (\r\n        <div ref={ref}>\r\n            {inputParam && (\r\n                <>\r\n                    {inputParam.type === 'credential' && (\r\n                        <>\r\n                            <div style={{ marginTop: 10 }} />\r\n                            <div key={reloadTimestamp} style={{ display: 'flex', flexDirection: 'row' }}>\r\n                                <AsyncDropdown\r\n                                    disabled={disabled}\r\n                                    name={inputParam.name}\r\n                                    nodeData={data}\r\n                                    value={credentialId ?? 'choose an option'}\r\n                                    isCreateNewOption={true}\r\n                                    credentialNames={inputParam.credentialNames}\r\n                                    onSelect={(newValue) => {\r\n                                        setCredentialId(newValue)\r\n                                        onSelect(newValue)\r\n                                    }}\r\n                                    onCreateNew={() => addAsyncOption(inputParam.name)}\r\n                                />\r\n                                {credentialId && (\r\n                                    <IconButton title='Edit' color='primary' size='small' onClick={() => editCredential(credentialId)}>\r\n                                        <IconEdit />\r\n                                    </IconButton>\r\n                                )}\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                </>\r\n            )}\r\n            {showSpecificCredentialDialog && (\r\n                <AddEditCredentialDialog\r\n                    show={showSpecificCredentialDialog}\r\n                    dialogProps={specificCredentialDialogProps}\r\n                    onCancel={() => setShowSpecificCredentialDialog(false)}\r\n                    onConfirm={onConfirmAsyncOption}\r\n                ></AddEditCredentialDialog>\r\n            )}\r\n            {showCredentialListDialog && (\r\n                <CredentialListDialog\r\n                    show={showCredentialListDialog}\r\n                    dialogProps={credentialListDialogProps}\r\n                    onCancel={() => setShowCredentialListDialog(false)}\r\n                    onCredentialSelected={onCredentialSelected}\r\n                ></CredentialListDialog>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nCredentialInputHandler.propTypes = {\r\n    inputParam: PropTypes.object,\r\n    data: PropTypes.object,\r\n    onSelect: PropTypes.func,\r\n    disabled: PropTypes.bool\r\n}\r\n\r\nexport default CredentialInputHandler\r\n"],"names":["getAllAssistants","client","get","getSpecificAssistant","id","concat","getAssistantObj","credential","getAllAvailableAssistants","createNewAssistant","body","post","updateAssistant","put","deleteAssistant","isDeleteBoth","delete","StyledPopper","styled","Popper","boxShadow","borderRadius","autocompleteClasses","listbox","boxSizing","padding","margin","AsyncDropdown","_ref2","name","nodeData","value","onSelect","isCreateNewOption","onCreateNew","credentialNames","disabled","disableClearable","customization","useSelector","state","open","setOpen","useState","options","setOptions","loading","setLoading","addNewOption","label","internalValue","setInternalValue","useEffect","async","response","length","names","join","resp","credentialsApi","getCredentialsByName","data","returnList","i","push","error","console","fetchCredentialList","_nodeData$inputParams","_ref","loadMethod","inputParams","find","param","username","localStorage","getItem","password","axios","baseURL","auth","undefined","then","catch","fetchList","fetchData","_jsx","_Fragment","children","Autocomplete","size","sx","width","onOpen","onClose","arguments","option","findMatchingOptions","onChange","e","selection","PopperComponent","renderInput","params","TextField","InputProps","endAdornment","_jsxs","Fragment","CircularProgress","color","renderOption","props","Box","component","style","display","flexDirection","Typography","variant","description","isDarkMode","MultiDropdown","formControlSx","FormControl","mt","multiple","filterSelectedOptions","values","JSON","parse","filter","includes","selections","selectionNames","stringify","File","fileType","theme","useTheme","myValue","setMyValue","fontStyle","palette","grey","marginBottom","getFileName","Button","fullWidth","startIcon","IconUpload","marginRight","type","accept","hidden","target","files","file","reader","FileReader","onload","evt","_evt$target","result","readAsDataURL","Array","from","map","Promise","resolve","_evt$target2","res","all","handleFileUpload","show","dialogProps","onCancel","onDelete","onDeleteBoth","portalElement","document","getElementById","Dialog","maxWidth","DialogTitle","fontSize","title","DialogContent","marginTop","StyledButton","mb","onClick","cancelButtonName","createPortal","assistantAvailableModels","onConfirm","useNotifier","dispatch","useDispatch","enqueueSnackbar","enqueueSnackbarAction","closeSnackbar","closeSnackbarAction","getSpecificAssistantApi","useApi","assistantsApi","getAssistantObjApi","assistantId","setAssistantId","openAIAssistantId","setOpenAIAssistantId","assistantName","setAssistantName","assistantDesc","setAssistantDesc","assistantIcon","setAssistantIcon","uuidv4","assistantModel","setAssistantModel","assistantCredential","setAssistantCredential","assistantInstructions","setAssistantInstructions","assistantTools","setAssistantTools","assistantFiles","setAssistantFiles","uploadAssistantFiles","setUploadAssistantFiles","deleteDialogOpen","setDeleteDialogOpen","deleteDialogProps","setDeleteDialogProps","SHOW_CANVAS_DIALOG","HIDE_CANVAS_DIALOG","_assistantDetails$too","_assistantDetails$fil","iconSrc","assistantDetails","details","model","instructions","tools","syncData","_assistantDetails$too2","_assistantDetails$fil2","request","selectedOpenAIAssistantId","_data$files","tool","message","key","Date","getTime","Math","random","action","IconX","errorData","status","statusText","persist","p","Stack","position","direction","TooltipWithParser","marginLeft","OutlinedInput","placeholder","multiline","rows","height","backgroundColor","objectFit","alt","src","Dropdown","newValue","CredentialInputHandler","inputParam","index","alignItems","background","paddingLeft","paddingRight","paddingTop","paddingBottom","filename","IconButton","fileId","onFileDeleteClick","DialogActions","getResp","onSyncClick","uploadFiles","obj","createResp","addNewAssistant","saveResp","saveAssistant","confirmButtonName","DeleteConfirmDialog","BackdropLoader","_data$credential","ref","useRef","credentialId","setCredentialId","showCredentialListDialog","setShowCredentialListDialog","credentialListDialogProps","setCredentialListDialogProps","showSpecificCredentialDialog","setShowSpecificCredentialDialog","specificCredentialDialogProps","setSpecificCredentialDialogProps","reloadTimestamp","setReloadTimestamp","now","toString","componentCredentialsResp","getSpecificComponentCredential","isArray","dialogProp","componentsCredentials","credentialComponent","addAsyncOption","editCredential","IconEdit","AddEditCredentialDialog","selectedCredentialId","CredentialListDialog","onCredentialSelected"],"sourceRoot":""}