{"version":3,"file":"static/js/4886.4a1293ac.chunk.js","mappings":"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","sources":["api/chatflows.js","ui-component/dialog/LoginDialog.js","ui-component/dialog/SaveChatflowDialog.js","ui-component/dialog/ExpandTextDialog.js","ui-component/input/Input.js","ui-component/json/SelectVariable.js","../../../node_modules/@mui/material/ToggleButtonGroup/isValueSelected.js","../../../node_modules/@mui/material/ToggleButtonGroup/toggleButtonGroupClasses.js","../../../node_modules/@mui/material/ToggleButtonGroup/ToggleButtonGroup.js","ui-component/dialog/TagDialog.js","ui-component/button/FlowListMenu.js","ui-component/table/FlowListTable.js","views/chatflows/index.js","../../../node_modules/@mui/icons-material/Category.js","../../../node_modules/@mui/icons-material/Downloading.js","../../../node_modules/@mui/icons-material/Edit.js","../../../node_modules/@mui/icons-material/FileCopy.js","../../../node_modules/@mui/icons-material/KeyboardArrowDown.js","../../../node_modules/@mui/material/ButtonGroup/buttonGroupClasses.js","../../../node_modules/@mui/material/ButtonGroup/ButtonGroup.js","../../../node_modules/@mui/utils/esm/getValidReactChildren.js"],"sourcesContent":["import client from './client'\r\n\r\nconst getAllChatflows = () => client.get('/chatflows')\r\n\r\nconst getSpecificChatflow = (id) => client.get(`/chatflows/${id}`)\r\n\r\nconst getSpecificChatflowFromPublicEndpoint = (id) => client.get(`/public-chatflows/${id}`)\r\n\r\nconst createNewChatflow = (body) => client.post(`/chatflows`, body)\r\n\r\nconst updateChatflow = (id, body) => client.put(`/chatflows/${id}`, body)\r\n\r\nconst deleteChatflow = (id) => client.delete(`/chatflows/${id}`)\r\n\r\nconst getIsChatflowStreaming = (id) => client.get(`/chatflows-streaming/${id}`)\r\n\r\nexport default {\r\n    getAllChatflows,\r\n    getSpecificChatflow,\r\n    getSpecificChatflowFromPublicEndpoint,\r\n    createNewChatflow,\r\n    updateChatflow,\r\n    deleteChatflow,\r\n    getIsChatflowStreaming\r\n}\r\n","import { createPortal } from 'react-dom'\r\nimport { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Dialog, DialogActions, DialogContent, Typography, DialogTitle } from '@mui/material'\r\nimport { StyledButton } from 'ui-component/button/StyledButton'\r\nimport { Input } from 'ui-component/input/Input'\r\n\r\nconst LoginDialog = ({ show, dialogProps, onConfirm }) => {\r\n    const portalElement = document.getElementById('portal')\r\n    const usernameInput = {\r\n        label: 'Username',\r\n        name: 'username',\r\n        type: 'string',\r\n        placeholder: 'john doe'\r\n    }\r\n    const passwordInput = {\r\n        label: 'Password',\r\n        name: 'password',\r\n        type: 'password'\r\n    }\r\n    const [usernameVal, setUsernameVal] = useState('')\r\n    const [passwordVal, setPasswordVal] = useState('')\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            onKeyUp={(e) => {\r\n                if (e.key === 'Enter') {\r\n                    onConfirm(usernameVal, passwordVal)\r\n                }\r\n            }}\r\n            open={show}\r\n            fullWidth\r\n            maxWidth='xs'\r\n            aria-labelledby='alert-dialog-title'\r\n            aria-describedby='alert-dialog-description'\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <Typography>Username</Typography>\r\n                <Input\r\n                    inputParam={usernameInput}\r\n                    onChange={(newValue) => setUsernameVal(newValue)}\r\n                    value={usernameVal}\r\n                    showDialog={false}\r\n                />\r\n                <div style={{ marginTop: 20 }}></div>\r\n                <Typography>Password</Typography>\r\n                <Input inputParam={passwordInput} onChange={(newValue) => setPasswordVal(newValue)} value={passwordVal} />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <StyledButton variant='contained' onClick={() => onConfirm(usernameVal, passwordVal)}>\r\n                    {dialogProps.confirmButtonName}\r\n                </StyledButton>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nLoginDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onConfirm: PropTypes.func\r\n}\r\n\r\nexport default LoginDialog\r\n","import { createPortal } from 'react-dom'\r\nimport { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Button, Dialog, DialogActions, DialogContent, OutlinedInput, DialogTitle } from '@mui/material'\r\nimport { StyledButton } from 'ui-component/button/StyledButton'\r\n\r\nconst SaveChatflowDialog = ({ show, dialogProps, onCancel, onConfirm }) => {\r\n    const portalElement = document.getElementById('portal')\r\n\r\n    const [chatflowName, setChatflowName] = useState('')\r\n    const [isReadyToSave, setIsReadyToSave] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (chatflowName) setIsReadyToSave(true)\r\n        else setIsReadyToSave(false)\r\n    }, [chatflowName])\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            fullWidth\r\n            maxWidth='xs'\r\n            onClose={onCancel}\r\n            aria-labelledby='alert-dialog-title'\r\n            aria-describedby='alert-dialog-description'\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <OutlinedInput\r\n                    sx={{ mt: 1 }}\r\n                    id='chatflow-name'\r\n                    type='text'\r\n                    fullWidth\r\n                    placeholder='My New Chatflow'\r\n                    value={chatflowName}\r\n                    onChange={(e) => setChatflowName(e.target.value)}\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onCancel}>{dialogProps.cancelButtonName}</Button>\r\n                <StyledButton disabled={!isReadyToSave} variant='contained' onClick={() => onConfirm(chatflowName)}>\r\n                    {dialogProps.confirmButtonName}\r\n                </StyledButton>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nSaveChatflowDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onConfirm: PropTypes.func\r\n}\r\n\r\nexport default SaveChatflowDialog\r\n","import { createPortal } from 'react-dom'\r\nimport { useState, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { Button, Dialog, DialogActions, DialogContent, Typography } from '@mui/material'\r\nimport { useTheme } from '@mui/material/styles'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport { StyledButton } from 'ui-component/button/StyledButton'\r\nimport { DarkCodeEditor } from 'ui-component/editor/DarkCodeEditor'\r\nimport { LightCodeEditor } from 'ui-component/editor/LightCodeEditor'\r\nimport { HIDE_CANVAS_DIALOG, SHOW_CANVAS_DIALOG } from 'store/actions'\r\n\r\nimport './ExpandTextDialog.css'\r\n\r\nconst ExpandTextDialog = ({ show, dialogProps, onCancel, onConfirm }) => {\r\n    const portalElement = document.getElementById('portal')\r\n\r\n    const theme = useTheme()\r\n    const dispatch = useDispatch()\r\n    const customization = useSelector((state) => state.customization)\r\n    const languageType = 'json'\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n    const [inputParam, setInputParam] = useState(null)\r\n\r\n    useEffect(() => {\r\n        if (dialogProps.value) setInputValue(dialogProps.value)\r\n        if (dialogProps.inputParam) setInputParam(dialogProps.inputParam)\r\n\r\n        return () => {\r\n            setInputValue('')\r\n            setInputParam(null)\r\n        }\r\n    }, [dialogProps])\r\n\r\n    useEffect(() => {\r\n        if (show) dispatch({ type: SHOW_CANVAS_DIALOG })\r\n        else dispatch({ type: HIDE_CANVAS_DIALOG })\r\n        return () => dispatch({ type: HIDE_CANVAS_DIALOG })\r\n    }, [show, dispatch])\r\n\r\n    const component = show ? (\r\n        <Dialog open={show} fullWidth maxWidth='md' aria-labelledby='alert-dialog-title' aria-describedby='alert-dialog-description'>\r\n            <DialogContent>\r\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                    {inputParam && inputParam.type === 'string' && (\r\n                        <div style={{ flex: 70 }}>\r\n                            <Typography sx={{ mb: 2, ml: 1 }} variant='h4'>\r\n                                {inputParam.label}\r\n                            </Typography>\r\n                            <PerfectScrollbar\r\n                                style={{\r\n                                    border: '1px solid',\r\n                                    borderColor: theme.palette.grey['500'],\r\n                                    borderRadius: '12px',\r\n                                    height: '100%',\r\n                                    maxHeight: 'calc(100vh - 220px)',\r\n                                    overflowX: 'hidden',\r\n                                    backgroundColor: 'white'\r\n                                }}\r\n                            >\r\n                                {customization.isDarkMode ? (\r\n                                    <DarkCodeEditor\r\n                                        disabled={dialogProps.disabled}\r\n                                        value={inputValue}\r\n                                        onValueChange={(code) => setInputValue(code)}\r\n                                        placeholder={inputParam.placeholder}\r\n                                        type={languageType}\r\n                                        style={{\r\n                                            fontSize: '0.875rem',\r\n                                            minHeight: 'calc(100vh - 220px)',\r\n                                            width: '100%'\r\n                                        }}\r\n                                    />\r\n                                ) : (\r\n                                    <LightCodeEditor\r\n                                        disabled={dialogProps.disabled}\r\n                                        value={inputValue}\r\n                                        onValueChange={(code) => setInputValue(code)}\r\n                                        placeholder={inputParam.placeholder}\r\n                                        type={languageType}\r\n                                        style={{\r\n                                            fontSize: '0.875rem',\r\n                                            minHeight: 'calc(100vh - 220px)',\r\n                                            width: '100%'\r\n                                        }}\r\n                                    />\r\n                                )}\r\n                            </PerfectScrollbar>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onCancel}>{dialogProps.cancelButtonName}</Button>\r\n                <StyledButton disabled={dialogProps.disabled} variant='contained' onClick={() => onConfirm(inputValue, inputParam.name)}>\r\n                    {dialogProps.confirmButtonName}\r\n                </StyledButton>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nExpandTextDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onConfirm: PropTypes.func\r\n}\r\n\r\nexport default ExpandTextDialog\r\n","import { useState, useEffect, useRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { FormControl, OutlinedInput, Popover } from '@mui/material'\r\nimport ExpandTextDialog from 'ui-component/dialog/ExpandTextDialog'\r\nimport SelectVariable from 'ui-component/json/SelectVariable'\r\nimport { getAvailableNodesForVariable } from 'utils/genericHelper'\r\n\r\nexport const Input = ({\r\n    inputParam,\r\n    value,\r\n    nodes,\r\n    edges,\r\n    nodeId,\r\n    onChange,\r\n    disabled = false,\r\n    showDialog,\r\n    dialogProps,\r\n    onDialogCancel,\r\n    onDialogConfirm\r\n}) => {\r\n    const [myValue, setMyValue] = useState(value ?? '')\r\n    const [anchorEl, setAnchorEl] = useState(null)\r\n    const [availableNodesForVariable, setAvailableNodesForVariable] = useState([])\r\n    const ref = useRef(null)\r\n\r\n    const openPopOver = Boolean(anchorEl)\r\n\r\n    const handleClosePopOver = () => {\r\n        setAnchorEl(null)\r\n    }\r\n\r\n    const setNewVal = (val) => {\r\n        const newVal = myValue + val.substring(2)\r\n        onChange(newVal)\r\n        setMyValue(newVal)\r\n    }\r\n\r\n    const getInputType = (type) => {\r\n        switch (type) {\r\n            case 'string':\r\n                return 'text'\r\n            case 'password':\r\n                return 'password'\r\n            case 'number':\r\n                return 'number'\r\n            default:\r\n                return 'text'\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!disabled && nodes && edges && nodeId && inputParam) {\r\n            const nodesForVariable = inputParam?.acceptVariable ? getAvailableNodesForVariable(nodes, edges, nodeId, inputParam.id) : []\r\n            setAvailableNodesForVariable(nodesForVariable)\r\n        }\r\n    }, [disabled, inputParam, nodes, edges, nodeId])\r\n\r\n    useEffect(() => {\r\n        if (typeof myValue === 'string' && myValue && myValue.endsWith('{{')) {\r\n            setAnchorEl(ref.current)\r\n        }\r\n    }, [myValue])\r\n\r\n    return (\r\n        <>\r\n            <FormControl sx={{ mt: 1, width: '100%' }} size='small'>\r\n                <OutlinedInput\r\n                    id={inputParam.name}\r\n                    size='small'\r\n                    disabled={disabled}\r\n                    type={getInputType(inputParam.type)}\r\n                    placeholder={inputParam.placeholder}\r\n                    multiline={!!inputParam.rows}\r\n                    rows={inputParam.rows ?? 1}\r\n                    value={myValue}\r\n                    name={inputParam.name}\r\n                    onChange={(e) => {\r\n                        setMyValue(e.target.value)\r\n                        onChange(e.target.value)\r\n                    }}\r\n                    inputProps={{\r\n                        step: inputParam.step ?? 1,\r\n                        style: {\r\n                            height: inputParam.rows ? '90px' : 'inherit'\r\n                        }\r\n                    }}\r\n                />\r\n            </FormControl>\r\n            {showDialog && (\r\n                <ExpandTextDialog\r\n                    show={showDialog}\r\n                    dialogProps={dialogProps}\r\n                    onCancel={onDialogCancel}\r\n                    onConfirm={(newValue, inputParamName) => {\r\n                        setMyValue(newValue)\r\n                        onDialogConfirm(newValue, inputParamName)\r\n                    }}\r\n                ></ExpandTextDialog>\r\n            )}\r\n            <div ref={ref}></div>\r\n            {inputParam?.acceptVariable && (\r\n                <Popover\r\n                    open={openPopOver}\r\n                    anchorEl={anchorEl}\r\n                    onClose={handleClosePopOver}\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'left'\r\n                    }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'left'\r\n                    }}\r\n                >\r\n                    <SelectVariable\r\n                        disabled={disabled}\r\n                        availableNodesForVariable={availableNodesForVariable}\r\n                        onSelectAndReturnVal={(val) => {\r\n                            setNewVal(val)\r\n                            handleClosePopOver()\r\n                        }}\r\n                    />\r\n                </Popover>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nInput.propTypes = {\r\n    inputParam: PropTypes.object,\r\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    onChange: PropTypes.func,\r\n    disabled: PropTypes.bool,\r\n    showDialog: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    nodes: PropTypes.array,\r\n    edges: PropTypes.array,\r\n    nodeId: PropTypes.string,\r\n    onDialogCancel: PropTypes.func,\r\n    onDialogConfirm: PropTypes.func\r\n}\r\n","import { useSelector } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { Box, List, ListItemButton, ListItem, ListItemAvatar, ListItemText, Typography, Stack } from '@mui/material'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport robotPNG from 'assets/images/robot.png'\r\nimport chatPNG from 'assets/images/chathistory.png'\r\nimport { baseURL } from 'store/constant'\r\n\r\nconst SelectVariable = ({ availableNodesForVariable, disabled = false, onSelectAndReturnVal }) => {\r\n    const customization = useSelector((state) => state.customization)\r\n\r\n    const onSelectOutputResponseClick = (node, prefix) => {\r\n        let variablePath = node ? `${node.id}.data.instance` : prefix\r\n        const newInput = `{{${variablePath}}}`\r\n        onSelectAndReturnVal(newInput)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!disabled && (\r\n                <div style={{ flex: 30 }}>\r\n                    <Stack flexDirection='row' sx={{ mb: 1, ml: 2, mt: 2 }}>\r\n                        <Typography variant='h5'>Select Variable</Typography>\r\n                    </Stack>\r\n                    <PerfectScrollbar style={{ height: '100%', maxHeight: 'calc(100vh - 220px)', overflowX: 'hidden' }}>\r\n                        <Box sx={{ pl: 2, pr: 2 }}>\r\n                            <List>\r\n                                <ListItemButton\r\n                                    sx={{\r\n                                        p: 0,\r\n                                        borderRadius: `${customization.borderRadius}px`,\r\n                                        boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\r\n                                        mb: 1\r\n                                    }}\r\n                                    disabled={disabled}\r\n                                    onClick={() => onSelectOutputResponseClick(null, 'question')}\r\n                                >\r\n                                    <ListItem alignItems='center'>\r\n                                        <ListItemAvatar>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: 50,\r\n                                                    height: 50,\r\n                                                    borderRadius: '50%',\r\n                                                    backgroundColor: 'white'\r\n                                                }}\r\n                                            >\r\n                                                <img\r\n                                                    style={{\r\n                                                        width: '100%',\r\n                                                        height: '100%',\r\n                                                        padding: 10,\r\n                                                        objectFit: 'contain'\r\n                                                    }}\r\n                                                    alt='AI'\r\n                                                    src={robotPNG}\r\n                                                />\r\n                                            </div>\r\n                                        </ListItemAvatar>\r\n                                        <ListItemText sx={{ ml: 1 }} primary='question' secondary={`User's question from chatbox`} />\r\n                                    </ListItem>\r\n                                </ListItemButton>\r\n                                <ListItemButton\r\n                                    sx={{\r\n                                        p: 0,\r\n                                        borderRadius: `${customization.borderRadius}px`,\r\n                                        boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\r\n                                        mb: 1\r\n                                    }}\r\n                                    disabled={disabled}\r\n                                    onClick={() => onSelectOutputResponseClick(null, 'chat_history')}\r\n                                >\r\n                                    <ListItem alignItems='center'>\r\n                                        <ListItemAvatar>\r\n                                            <div\r\n                                                style={{\r\n                                                    width: 50,\r\n                                                    height: 50,\r\n                                                    borderRadius: '50%',\r\n                                                    backgroundColor: 'white'\r\n                                                }}\r\n                                            >\r\n                                                <img\r\n                                                    style={{\r\n                                                        width: '100%',\r\n                                                        height: '100%',\r\n                                                        padding: 10,\r\n                                                        objectFit: 'contain'\r\n                                                    }}\r\n                                                    alt='chatHistory'\r\n                                                    src={chatPNG}\r\n                                                />\r\n                                            </div>\r\n                                        </ListItemAvatar>\r\n                                        <ListItemText\r\n                                            sx={{ ml: 1 }}\r\n                                            primary='chat_history'\r\n                                            secondary={`Past conversation history between user and AI`}\r\n                                        />\r\n                                    </ListItem>\r\n                                </ListItemButton>\r\n                                {availableNodesForVariable &&\r\n                                    availableNodesForVariable.length > 0 &&\r\n                                    availableNodesForVariable.map((node, index) => {\r\n                                        const selectedOutputAnchor = node.data.outputAnchors[0].options.find(\r\n                                            (ancr) => ancr.name === node.data.outputs['output']\r\n                                        )\r\n                                        return (\r\n                                            <ListItemButton\r\n                                                key={index}\r\n                                                sx={{\r\n                                                    p: 0,\r\n                                                    borderRadius: `${customization.borderRadius}px`,\r\n                                                    boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\r\n                                                    mb: 1\r\n                                                }}\r\n                                                disabled={disabled}\r\n                                                onClick={() => onSelectOutputResponseClick(node)}\r\n                                            >\r\n                                                <ListItem alignItems='center'>\r\n                                                    <ListItemAvatar>\r\n                                                        <div\r\n                                                            style={{\r\n                                                                width: 50,\r\n                                                                height: 50,\r\n                                                                borderRadius: '50%',\r\n                                                                backgroundColor: 'white'\r\n                                                            }}\r\n                                                        >\r\n                                                            <img\r\n                                                                style={{\r\n                                                                    width: '100%',\r\n                                                                    height: '100%',\r\n                                                                    padding: 10,\r\n                                                                    objectFit: 'contain'\r\n                                                                }}\r\n                                                                alt={node.data.name}\r\n                                                                src={`${baseURL}/api/v1/node-icon/${node.data.name}`}\r\n                                                            />\r\n                                                        </div>\r\n                                                    </ListItemAvatar>\r\n                                                    <ListItemText\r\n                                                        sx={{ ml: 1 }}\r\n                                                        primary={node.data.inputs.chainName ? node.data.inputs.chainName : node.data.id}\r\n                                                        secondary={`${selectedOutputAnchor?.label ?? 'output'} from ${node.data.label}`}\r\n                                                    />\r\n                                                </ListItem>\r\n                                            </ListItemButton>\r\n                                        )\r\n                                    })}\r\n                            </List>\r\n                        </Box>\r\n                    </PerfectScrollbar>\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nSelectVariable.propTypes = {\r\n    availableNodesForVariable: PropTypes.array,\r\n    disabled: PropTypes.bool,\r\n    onSelectAndReturnVal: PropTypes.func\r\n}\r\n\r\nexport default SelectVariable\r\n","// Determine if the toggle button value matches, or is contained in, the\n// candidate group value.\nexport default function isValueSelected(value, candidate) {\n  if (candidate === undefined || value === undefined) {\n    return false;\n  }\n  if (Array.isArray(candidate)) {\n    return candidate.indexOf(value) >= 0;\n  }\n  return value === candidate;\n}","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getToggleButtonGroupUtilityClass(slot) {\n  return generateUtilityClass('MuiToggleButtonGroup', slot);\n}\nconst toggleButtonGroupClasses = generateUtilityClasses('MuiToggleButtonGroup', ['root', 'selected', 'vertical', 'disabled', 'grouped', 'groupedHorizontal', 'groupedVertical', 'fullWidth']);\nexport default toggleButtonGroupClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"color\", \"disabled\", \"exclusive\", \"fullWidth\", \"onChange\", \"orientation\", \"size\", \"value\"];\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport capitalize from '../utils/capitalize';\nimport isValueSelected from './isValueSelected';\nimport toggleButtonGroupClasses, { getToggleButtonGroupUtilityClass } from './toggleButtonGroupClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    orientation,\n    fullWidth,\n    disabled\n  } = ownerState;\n  const slots = {\n    root: ['root', orientation === 'vertical' && 'vertical', fullWidth && 'fullWidth'],\n    grouped: ['grouped', `grouped${capitalize(orientation)}`, disabled && 'disabled']\n  };\n  return composeClasses(slots, getToggleButtonGroupUtilityClass, classes);\n};\nconst ToggleButtonGroupRoot = styled('div', {\n  name: 'MuiToggleButtonGroup',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${toggleButtonGroupClasses.grouped}`]: styles.grouped\n    }, {\n      [`& .${toggleButtonGroupClasses.grouped}`]: styles[`grouped${capitalize(ownerState.orientation)}`]\n    }, styles.root, ownerState.orientation === 'vertical' && styles.vertical, ownerState.fullWidth && styles.fullWidth];\n  }\n})(({\n  ownerState,\n  theme\n}) => _extends({\n  display: 'inline-flex',\n  borderRadius: (theme.vars || theme).shape.borderRadius\n}, ownerState.orientation === 'vertical' && {\n  flexDirection: 'column'\n}, ownerState.fullWidth && {\n  width: '100%'\n}, {\n  [`& .${toggleButtonGroupClasses.grouped}`]: _extends({}, ownerState.orientation === 'horizontal' ? {\n    '&:not(:first-of-type)': {\n      marginLeft: -1,\n      borderLeft: '1px solid transparent',\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0\n    },\n    '&:not(:last-of-type)': {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0\n    },\n    [`&.${toggleButtonGroupClasses.selected} + .${toggleButtonGroupClasses.grouped}.${toggleButtonGroupClasses.selected}`]: {\n      borderLeft: 0,\n      marginLeft: 0\n    }\n  } : {\n    '&:not(:first-of-type)': {\n      marginTop: -1,\n      borderTop: '1px solid transparent',\n      borderTopLeftRadius: 0,\n      borderTopRightRadius: 0\n    },\n    '&:not(:last-of-type)': {\n      borderBottomLeftRadius: 0,\n      borderBottomRightRadius: 0\n    },\n    [`&.${toggleButtonGroupClasses.selected} + .${toggleButtonGroupClasses.grouped}.${toggleButtonGroupClasses.selected}`]: {\n      borderTop: 0,\n      marginTop: 0\n    }\n  })\n}));\nconst ToggleButtonGroup = /*#__PURE__*/React.forwardRef(function ToggleButtonGroup(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiToggleButtonGroup'\n  });\n  const {\n      children,\n      className,\n      color = 'standard',\n      disabled = false,\n      exclusive = false,\n      fullWidth = false,\n      onChange,\n      orientation = 'horizontal',\n      size = 'medium',\n      value\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    disabled,\n    fullWidth,\n    orientation,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  const handleChange = (event, buttonValue) => {\n    if (!onChange) {\n      return;\n    }\n    const index = value && value.indexOf(buttonValue);\n    let newValue;\n    if (value && index >= 0) {\n      newValue = value.slice();\n      newValue.splice(index, 1);\n    } else {\n      newValue = value ? value.concat(buttonValue) : [buttonValue];\n    }\n    onChange(event, newValue);\n  };\n  const handleExclusiveChange = (event, buttonValue) => {\n    if (!onChange) {\n      return;\n    }\n    onChange(event, value === buttonValue ? null : buttonValue);\n  };\n  return /*#__PURE__*/_jsx(ToggleButtonGroupRoot, _extends({\n    role: \"group\",\n    className: clsx(classes.root, className),\n    ref: ref,\n    ownerState: ownerState\n  }, other, {\n    children: React.Children.map(children, child => {\n      if (! /*#__PURE__*/React.isValidElement(child)) {\n        return null;\n      }\n      if (process.env.NODE_ENV !== 'production') {\n        if (isFragment(child)) {\n          console.error([\"MUI: The ToggleButtonGroup component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n        }\n      }\n      return /*#__PURE__*/React.cloneElement(child, {\n        className: clsx(classes.grouped, child.props.className),\n        onChange: exclusive ? handleExclusiveChange : handleChange,\n        selected: child.props.selected === undefined ? isValueSelected(child.props.value, value) : child.props.selected,\n        size: child.props.size || size,\n        fullWidth,\n        color: child.props.color || color,\n        disabled: child.props.disabled || disabled\n      });\n    })\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ToggleButtonGroup.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the button when it is selected.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'standard'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['standard', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * If `true`, the component is disabled. This implies that all ToggleButton children will be disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, only allow one of the child ToggleButton values to be selected.\n   * @default false\n   */\n  exclusive: PropTypes.bool,\n  /**\n   * If `true`, the button group will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.\n   * @param {any} value of the selected buttons. When `exclusive` is true\n   * this is a single value; when false an array of selected values. If no value\n   * is selected and `exclusive` is true the value is null; when false an empty array.\n   */\n  onChange: PropTypes.func,\n  /**\n   * The component orientation (layout flow direction).\n   * @default 'horizontal'\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The currently selected value within the group or an array of selected\n   * values when `exclusive` is false.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default ToggleButtonGroup;","import { useState, useEffect } from 'react'\r\nimport Dialog from '@mui/material/Dialog'\r\nimport Box from '@mui/material/Box'\r\nimport Button from '@mui/material/Button'\r\nimport TextField from '@mui/material/TextField'\r\nimport Chip from '@mui/material/Chip'\r\nimport PropTypes from 'prop-types'\r\nimport { DialogActions, DialogContent, DialogTitle, Typography } from '@mui/material'\r\n\r\nconst TagDialog = ({ isOpen, dialogProps, onClose, onSubmit }) => {\r\n    const [inputValue, setInputValue] = useState('')\r\n    const [categoryValues, setCategoryValues] = useState([])\r\n\r\n    const handleInputChange = (event) => {\r\n        setInputValue(event.target.value)\r\n    }\r\n\r\n    const handleInputKeyDown = (event) => {\r\n        if (event.key === 'Enter' && inputValue.trim()) {\r\n            event.preventDefault()\r\n            if (!categoryValues.includes(inputValue)) {\r\n                setCategoryValues([...categoryValues, inputValue])\r\n                setInputValue('')\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleDeleteTag = (categoryToDelete) => {\r\n        setCategoryValues(categoryValues.filter((category) => category !== categoryToDelete))\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        let newCategories = [...categoryValues]\r\n        if (inputValue.trim() && !categoryValues.includes(inputValue)) {\r\n            newCategories = [...newCategories, inputValue]\r\n            setCategoryValues(newCategories)\r\n        }\r\n        onSubmit(newCategories)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (dialogProps.category) setCategoryValues(dialogProps.category)\r\n\r\n        return () => {\r\n            setInputValue('')\r\n            setCategoryValues([])\r\n        }\r\n    }, [dialogProps])\r\n\r\n    return (\r\n        <Dialog\r\n            fullWidth\r\n            maxWidth='xs'\r\n            open={isOpen}\r\n            onClose={onClose}\r\n            aria-labelledby='category-dialog-title'\r\n            aria-describedby='category-dialog-description'\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\r\n                Set Chatflow Category Tags\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <Box>\r\n                    <form onSubmit={handleSubmit}>\r\n                        {categoryValues.length > 0 && (\r\n                            <div style={{ marginBottom: 10 }}>\r\n                                {categoryValues.map((category, index) => (\r\n                                    <Chip\r\n                                        key={index}\r\n                                        label={category}\r\n                                        onDelete={() => handleDeleteTag(category)}\r\n                                        style={{ marginRight: 5, marginBottom: 5 }}\r\n                                    />\r\n                                ))}\r\n                            </div>\r\n                        )}\r\n                        <TextField\r\n                            sx={{ mt: 2 }}\r\n                            fullWidth\r\n                            value={inputValue}\r\n                            onChange={handleInputChange}\r\n                            onKeyDown={handleInputKeyDown}\r\n                            label='Add a tag'\r\n                            variant='outlined'\r\n                        />\r\n                        <Typography variant='body2' sx={{ fontStyle: 'italic', mt: 1 }} color='text.secondary'>\r\n                            Enter a tag and press enter to add it to the list. You can add as many tags as you want.\r\n                        </Typography>\r\n                    </form>\r\n                </Box>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onClose}>Cancel</Button>\r\n                <Button variant='contained' onClick={handleSubmit}>\r\n                    Submit\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nTagDialog.propTypes = {\r\n    isOpen: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onClose: PropTypes.func,\r\n    onSubmit: PropTypes.func\r\n}\r\n\r\nexport default TagDialog\r\n","import { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { styled, alpha } from '@mui/material/styles'\r\nimport Menu from '@mui/material/Menu'\r\nimport MenuItem from '@mui/material/MenuItem'\r\nimport EditIcon from '@mui/icons-material/Edit'\r\nimport Divider from '@mui/material/Divider'\r\nimport FileCopyIcon from '@mui/icons-material/FileCopy'\r\nimport FileDownloadIcon from '@mui/icons-material/Downloading'\r\nimport FileDeleteIcon from '@mui/icons-material/Delete'\r\nimport FileCategoryIcon from '@mui/icons-material/Category'\r\nimport Button from '@mui/material/Button'\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown'\r\nimport { IconX } from '@tabler/icons'\r\n\r\nimport chatflowsApi from 'api/chatflows'\r\n\r\nimport useApi from '../../hooks/useApi'\r\nimport useConfirm from 'hooks/useConfirm'\r\nimport { uiBaseURL } from '../../store/constant'\r\nimport { closeSnackbar as closeSnackbarAction, enqueueSnackbar as enqueueSnackbarAction } from '../../store/actions'\r\n\r\nimport ConfirmDialog from '../dialog/ConfirmDialog'\r\nimport SaveChatflowDialog from '../dialog/SaveChatflowDialog'\r\nimport TagDialog from '../dialog/TagDialog'\r\n\r\nimport { generateExportFlowData } from '../../utils/genericHelper'\r\nimport useNotifier from '../../utils/useNotifier'\r\n\r\nconst StyledMenu = styled((props) => (\r\n    <Menu\r\n        elevation={0}\r\n        anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'right'\r\n        }}\r\n        transformOrigin={{\r\n            vertical: 'top',\r\n            horizontal: 'right'\r\n        }}\r\n        {...props}\r\n    />\r\n))(({ theme }) => ({\r\n    '& .MuiPaper-root': {\r\n        borderRadius: 6,\r\n        marginTop: theme.spacing(1),\r\n        minWidth: 180,\r\n        boxShadow:\r\n            'rgb(255, 255, 255) 0px 0px 0px 0px, rgba(0, 0, 0, 0.05) 0px 0px 0px 1px, rgba(0, 0, 0, 0.1) 0px 10px 15px -3px, rgba(0, 0, 0, 0.05) 0px 4px 6px -2px',\r\n        '& .MuiMenu-list': {\r\n            padding: '4px 0'\r\n        },\r\n        '& .MuiMenuItem-root': {\r\n            '& .MuiSvgIcon-root': {\r\n                fontSize: 18,\r\n                color: theme.palette.text.secondary,\r\n                marginRight: theme.spacing(1.5)\r\n            },\r\n            '&:active': {\r\n                backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)\r\n            }\r\n        }\r\n    }\r\n}))\r\n\r\nexport default function FlowListMenu({ chatflow, updateFlowsApi }) {\r\n    const { confirm } = useConfirm()\r\n    const dispatch = useDispatch()\r\n    const updateChatflowApi = useApi(chatflowsApi.updateChatflow)\r\n\r\n    useNotifier()\r\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\r\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\r\n\r\n    const [flowDialogOpen, setFlowDialogOpen] = useState(false)\r\n    const [categoryDialogOpen, setCategoryDialogOpen] = useState(false)\r\n    const [categoryDialogProps, setCategoryDialogProps] = useState({})\r\n    const [anchorEl, setAnchorEl] = useState(null)\r\n    const open = Boolean(anchorEl)\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget)\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null)\r\n    }\r\n\r\n    const handleFlowRename = () => {\r\n        setAnchorEl(null)\r\n        setFlowDialogOpen(true)\r\n    }\r\n\r\n    const saveFlowRename = async (chatflowName) => {\r\n        const updateBody = {\r\n            name: chatflowName,\r\n            chatflow\r\n        }\r\n        try {\r\n            await updateChatflowApi.request(chatflow.id, updateBody)\r\n            await updateFlowsApi.request()\r\n        } catch (error) {\r\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n            enqueueSnackbar({\r\n                message: errorData,\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleFlowCategory = () => {\r\n        setAnchorEl(null)\r\n        if (chatflow.category) {\r\n            setCategoryDialogProps({\r\n                category: chatflow.category.split(';')\r\n            })\r\n        }\r\n        setCategoryDialogOpen(true)\r\n    }\r\n\r\n    const saveFlowCategory = async (categories) => {\r\n        setCategoryDialogOpen(false)\r\n        // save categories as string\r\n        const categoryTags = categories.join(';')\r\n        const updateBody = {\r\n            category: categoryTags,\r\n            chatflow\r\n        }\r\n        try {\r\n            await updateChatflowApi.request(chatflow.id, updateBody)\r\n            await updateFlowsApi.request()\r\n        } catch (error) {\r\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n            enqueueSnackbar({\r\n                message: errorData,\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleDelete = async () => {\r\n        setAnchorEl(null)\r\n        const confirmPayload = {\r\n            title: `Delete`,\r\n            description: `Delete chatflow ${chatflow.name}?`,\r\n            confirmButtonName: 'Delete',\r\n            cancelButtonName: 'Cancel'\r\n        }\r\n        const isConfirmed = await confirm(confirmPayload)\r\n\r\n        if (isConfirmed) {\r\n            try {\r\n                await chatflowsApi.deleteChatflow(chatflow.id)\r\n                await updateFlowsApi.request()\r\n            } catch (error) {\r\n                const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n                enqueueSnackbar({\r\n                    message: errorData,\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'error',\r\n                        persist: true,\r\n                        action: (key) => (\r\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleDuplicate = () => {\r\n        setAnchorEl(null)\r\n        try {\r\n            localStorage.setItem('duplicatedFlowData', chatflow.flowData)\r\n            window.open(`${uiBaseURL}/canvas`, '_blank')\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n    }\r\n\r\n    const handleExport = () => {\r\n        setAnchorEl(null)\r\n        try {\r\n            const flowData = JSON.parse(chatflow.flowData)\r\n            let dataStr = JSON.stringify(generateExportFlowData(flowData), null, 2)\r\n            let dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr)\r\n\r\n            let exportFileDefaultName = `${chatflow.name} Chatflow.json`\r\n\r\n            let linkElement = document.createElement('a')\r\n            linkElement.setAttribute('href', dataUri)\r\n            linkElement.setAttribute('download', exportFileDefaultName)\r\n            linkElement.click()\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button\r\n                id='demo-customized-button'\r\n                aria-controls={open ? 'demo-customized-menu' : undefined}\r\n                aria-haspopup='true'\r\n                aria-expanded={open ? 'true' : undefined}\r\n                disableElevation\r\n                onClick={handleClick}\r\n                endIcon={<KeyboardArrowDownIcon />}\r\n            >\r\n                Options\r\n            </Button>\r\n            <StyledMenu\r\n                id='demo-customized-menu'\r\n                MenuListProps={{\r\n                    'aria-labelledby': 'demo-customized-button'\r\n                }}\r\n                anchorEl={anchorEl}\r\n                open={open}\r\n                onClose={handleClose}\r\n            >\r\n                <MenuItem onClick={handleFlowRename} disableRipple>\r\n                    <EditIcon />\r\n                    Rename\r\n                </MenuItem>\r\n                <MenuItem onClick={handleDuplicate} disableRipple>\r\n                    <FileCopyIcon />\r\n                    Duplicate\r\n                </MenuItem>\r\n                <MenuItem onClick={handleExport} disableRipple>\r\n                    <FileDownloadIcon />\r\n                    Export\r\n                </MenuItem>\r\n                <Divider sx={{ my: 0.5 }} />\r\n                <MenuItem onClick={handleFlowCategory} disableRipple>\r\n                    <FileCategoryIcon />\r\n                    Update Category\r\n                </MenuItem>\r\n                <Divider sx={{ my: 0.5 }} />\r\n                <MenuItem onClick={handleDelete} disableRipple>\r\n                    <FileDeleteIcon />\r\n                    Delete\r\n                </MenuItem>\r\n            </StyledMenu>\r\n            <ConfirmDialog />\r\n            <SaveChatflowDialog\r\n                show={flowDialogOpen}\r\n                dialogProps={{\r\n                    title: `Rename Chatflow`,\r\n                    confirmButtonName: 'Rename',\r\n                    cancelButtonName: 'Cancel'\r\n                }}\r\n                onCancel={() => setFlowDialogOpen(false)}\r\n                onConfirm={saveFlowRename}\r\n            />\r\n            <TagDialog\r\n                isOpen={categoryDialogOpen}\r\n                dialogProps={categoryDialogProps}\r\n                onClose={() => setCategoryDialogOpen(false)}\r\n                onSubmit={saveFlowCategory}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nFlowListMenu.propTypes = {\r\n    chatflow: PropTypes.object,\r\n    updateFlowsApi: PropTypes.object\r\n}\r\n","import PropTypes from 'prop-types'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport moment from 'moment'\r\nimport { styled } from '@mui/material/styles'\r\nimport Table from '@mui/material/Table'\r\nimport TableBody from '@mui/material/TableBody'\r\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell'\r\nimport TableContainer from '@mui/material/TableContainer'\r\nimport TableHead from '@mui/material/TableHead'\r\nimport TableRow from '@mui/material/TableRow'\r\nimport Paper from '@mui/material/Paper'\r\nimport Chip from '@mui/material/Chip'\r\nimport { Button, Stack, Typography } from '@mui/material'\r\nimport FlowListMenu from '../button/FlowListMenu'\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 14\r\n    }\r\n}))\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n    '&:nth-of-type(odd)': {\r\n        backgroundColor: theme.palette.action.hover\r\n    },\r\n    // hide last border\r\n    '&:last-child td, &:last-child th': {\r\n        border: 0\r\n    }\r\n}))\r\n\r\nexport const FlowListTable = ({ data, images, filterFunction, updateFlowsApi }) => {\r\n    const navigate = useNavigate()\r\n    const goToCanvas = (selectedChatflow) => {\r\n        navigate(`/canvas/${selectedChatflow.id}`)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <TableContainer style={{ marginTop: '30', border: 1 }} component={Paper}>\r\n                <Table sx={{ minWidth: 650 }} size='small' aria-label='a dense table'>\r\n                    <TableHead>\r\n                        <TableRow sx={{ marginTop: '10', backgroundColor: 'primary' }}>\r\n                            <StyledTableCell component='th' scope='row' style={{ width: '20%' }} key='0'>\r\n                                Name\r\n                            </StyledTableCell>\r\n                            <StyledTableCell style={{ width: '25%' }} key='1'>\r\n                                Category\r\n                            </StyledTableCell>\r\n                            <StyledTableCell style={{ width: '30%' }} key='2'>\r\n                                Nodes\r\n                            </StyledTableCell>\r\n                            <StyledTableCell style={{ width: '15%' }} key='3'>\r\n                                Last Modified Date\r\n                            </StyledTableCell>\r\n                            <StyledTableCell style={{ width: '10%' }} key='4'>\r\n                                Actions\r\n                            </StyledTableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {data.filter(filterFunction).map((row, index) => (\r\n                            <StyledTableRow key={index}>\r\n                                <TableCell key='0'>\r\n                                    <Typography\r\n                                        sx={{ fontSize: '1.2rem', fontWeight: 500, overflowWrap: 'break-word', whiteSpace: 'pre-line' }}\r\n                                    >\r\n                                        <Button onClick={() => goToCanvas(row)}>{row.templateName || row.name}</Button>\r\n                                    </Typography>\r\n                                </TableCell>\r\n                                <TableCell key='1'>\r\n                                    <div\r\n                                        style={{\r\n                                            display: 'flex',\r\n                                            flexDirection: 'row',\r\n                                            flexWrap: 'wrap',\r\n                                            marginTop: 5\r\n                                        }}\r\n                                    >\r\n                                        &nbsp;\r\n                                        {row.category &&\r\n                                            row.category\r\n                                                .split(';')\r\n                                                .map((tag, index) => (\r\n                                                    <Chip key={index} label={tag} style={{ marginRight: 5, marginBottom: 5 }} />\r\n                                                ))}\r\n                                    </div>\r\n                                </TableCell>\r\n                                <TableCell key='2'>\r\n                                    {images[row.id] && (\r\n                                        <div\r\n                                            style={{\r\n                                                display: 'flex',\r\n                                                flexDirection: 'row',\r\n                                                flexWrap: 'wrap',\r\n                                                marginTop: 5\r\n                                            }}\r\n                                        >\r\n                                            {images[row.id].slice(0, images[row.id].length > 5 ? 5 : images[row.id].length).map((img) => (\r\n                                                <div\r\n                                                    key={img}\r\n                                                    style={{\r\n                                                        width: 35,\r\n                                                        height: 35,\r\n                                                        marginRight: 5,\r\n                                                        borderRadius: '50%',\r\n                                                        backgroundColor: 'white',\r\n                                                        marginTop: 5\r\n                                                    }}\r\n                                                >\r\n                                                    <img\r\n                                                        style={{ width: '100%', height: '100%', padding: 5, objectFit: 'contain' }}\r\n                                                        alt=''\r\n                                                        src={img}\r\n                                                    />\r\n                                                </div>\r\n                                            ))}\r\n                                            {images[row.id].length > 5 && (\r\n                                                <Typography\r\n                                                    sx={{ alignItems: 'center', display: 'flex', fontSize: '.8rem', fontWeight: 200 }}\r\n                                                >\r\n                                                    + {images[row.id].length - 5} More\r\n                                                </Typography>\r\n                                            )}\r\n                                        </div>\r\n                                    )}\r\n                                </TableCell>\r\n                                <TableCell key='3'>{moment(row.updatedDate).format('MMMM Do, YYYY')}</TableCell>\r\n                                <TableCell key='4'>\r\n                                    <Stack direction={{ xs: 'column', sm: 'row' }} spacing={1} justifyContent='center' alignItems='center'>\r\n                                        <FlowListMenu chatflow={row} updateFlowsApi={updateFlowsApi} />\r\n                                    </Stack>\r\n                                </TableCell>\r\n                            </StyledTableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nFlowListTable.propTypes = {\r\n    data: PropTypes.object,\r\n    images: PropTypes.array,\r\n    filterFunction: PropTypes.func,\r\n    updateFlowsApi: PropTypes.object\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useSelector } from 'react-redux'\r\n\r\n// material-ui\r\nimport { Grid, Box, Stack, Toolbar, ToggleButton, ButtonGroup, InputAdornment, TextField } from '@mui/material'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard'\r\nimport ItemCard from 'ui-component/cards/ItemCard'\r\nimport { gridSpacing } from 'store/constant'\r\nimport WorkflowEmptySVG from 'assets/images/workflow_empty.svg'\r\nimport LoginDialog from 'ui-component/dialog/LoginDialog'\r\n\r\n// API\r\nimport chatflowsApi from 'api/chatflows'\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi'\r\n\r\n// const\r\nimport { baseURL } from 'store/constant'\r\n\r\n// icons\r\nimport { IconPlus, IconSearch, IconLayoutGrid, IconList } from '@tabler/icons'\r\nimport * as React from 'react'\r\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup'\r\nimport { FlowListTable } from '../../ui-component/table/FlowListTable'\r\nimport { StyledButton } from '../../ui-component/button/StyledButton'\r\n\r\n// ==============================|| CHATFLOWS ||============================== //\r\n\r\nconst Chatflows = () => {\r\n    const navigate = useNavigate()\r\n    const theme = useTheme()\r\n    const customization = useSelector((state) => state.customization)\r\n\r\n    const [isLoading, setLoading] = useState(true)\r\n    const [images, setImages] = useState({})\r\n    const [search, setSearch] = useState('')\r\n    const [loginDialogOpen, setLoginDialogOpen] = useState(false)\r\n    const [loginDialogProps, setLoginDialogProps] = useState({})\r\n\r\n    const getAllChatflowsApi = useApi(chatflowsApi.getAllChatflows)\r\n    const [view, setView] = React.useState(localStorage.getItem('flowDisplayStyle') || 'card')\r\n\r\n    const handleChange = (event, nextView) => {\r\n        localStorage.setItem('flowDisplayStyle', nextView)\r\n        setView(nextView)\r\n    }\r\n\r\n    const onSearchChange = (event) => {\r\n        setSearch(event.target.value)\r\n    }\r\n\r\n    function filterFlows(data) {\r\n        return (\r\n            data.name.toLowerCase().indexOf(search.toLowerCase()) > -1 ||\r\n            (data.category && data.category.toLowerCase().indexOf(search.toLowerCase()) > -1)\r\n        )\r\n    }\r\n\r\n    const onLoginClick = (username, password) => {\r\n        localStorage.setItem('username', username)\r\n        localStorage.setItem('password', password)\r\n        navigate(0)\r\n    }\r\n\r\n    const addNew = () => {\r\n        navigate('/canvas')\r\n    }\r\n\r\n    const goToCanvas = (selectedChatflow) => {\r\n        navigate(`/canvas/${selectedChatflow.id}`)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAllChatflowsApi.request()\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (getAllChatflowsApi.error) {\r\n            if (getAllChatflowsApi.error?.response?.status === 401) {\r\n                setLoginDialogProps({\r\n                    title: 'Login',\r\n                    confirmButtonName: 'Login'\r\n                })\r\n                setLoginDialogOpen(true)\r\n            }\r\n        }\r\n    }, [getAllChatflowsApi.error])\r\n\r\n    useEffect(() => {\r\n        setLoading(getAllChatflowsApi.loading)\r\n    }, [getAllChatflowsApi.loading])\r\n\r\n    useEffect(() => {\r\n        if (getAllChatflowsApi.data) {\r\n            try {\r\n                const chatflows = getAllChatflowsApi.data\r\n                const images = {}\r\n                for (let i = 0; i < chatflows.length; i += 1) {\r\n                    const flowDataStr = chatflows[i].flowData\r\n                    const flowData = JSON.parse(flowDataStr)\r\n                    const nodes = flowData.nodes || []\r\n                    images[chatflows[i].id] = []\r\n                    for (let j = 0; j < nodes.length; j += 1) {\r\n                        const imageSrc = `${baseURL}/api/v1/node-icon/${nodes[j].data.name}`\r\n                        if (!images[chatflows[i].id].includes(imageSrc)) {\r\n                            images[chatflows[i].id].push(imageSrc)\r\n                        }\r\n                    }\r\n                }\r\n                setImages(images)\r\n            } catch (e) {\r\n                console.error(e)\r\n            }\r\n        }\r\n    }, [getAllChatflowsApi.data])\r\n\r\n    return (\r\n        <MainCard sx={{ background: customization.isDarkMode ? theme.palette.common.black : '' }}>\r\n            <Stack flexDirection='column'>\r\n                <Box sx={{ flexGrow: 1 }}>\r\n                    <Toolbar\r\n                        disableGutters={true}\r\n                        style={{\r\n                            margin: 1,\r\n                            padding: 1,\r\n                            paddingBottom: 10,\r\n                            display: 'flex',\r\n                            justifyContent: 'space-between',\r\n                            width: '100%'\r\n                        }}\r\n                    >\r\n                        <h1>Chatflows</h1>\r\n                        <TextField\r\n                            size='small'\r\n                            sx={{ display: { xs: 'none', sm: 'block' }, ml: 3 }}\r\n                            variant='outlined'\r\n                            placeholder='Search name or category'\r\n                            onChange={onSearchChange}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position='start'>\r\n                                        <IconSearch />\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                        />\r\n                        <Box sx={{ flexGrow: 1 }} />\r\n                        <ButtonGroup sx={{ maxHeight: 40 }} disableElevation variant='contained' aria-label='outlined primary button group'>\r\n                            <ButtonGroup disableElevation variant='contained' aria-label='outlined primary button group'>\r\n                                <ToggleButtonGroup sx={{ maxHeight: 40 }} value={view} color='primary' exclusive onChange={handleChange}>\r\n                                    <ToggleButton\r\n                                        sx={{ color: theme?.customization?.isDarkMode ? 'white' : 'inherit' }}\r\n                                        variant='contained'\r\n                                        value='card'\r\n                                        title='Card View'\r\n                                        selectedColor='#00abc0'\r\n                                    >\r\n                                        <IconLayoutGrid />\r\n                                    </ToggleButton>\r\n                                    <ToggleButton\r\n                                        sx={{ color: theme?.customization?.isDarkMode ? 'white' : 'inherit' }}\r\n                                        variant='contained'\r\n                                        value='list'\r\n                                        title='List View'\r\n                                    >\r\n                                        <IconList />\r\n                                    </ToggleButton>\r\n                                </ToggleButtonGroup>\r\n                            </ButtonGroup>\r\n                            <Box sx={{ width: 5 }} />\r\n                            <ButtonGroup disableElevation aria-label='outlined primary button group'>\r\n                                <StyledButton variant='contained' onClick={addNew} startIcon={<IconPlus />}>\r\n                                    Add New\r\n                                </StyledButton>\r\n                            </ButtonGroup>\r\n                        </ButtonGroup>\r\n                    </Toolbar>\r\n                </Box>\r\n                {!isLoading && (!view || view === 'card') && getAllChatflowsApi.data && (\r\n                    <Grid container spacing={gridSpacing}>\r\n                        {getAllChatflowsApi.data.filter(filterFlows).map((data, index) => (\r\n                            <Grid key={index} item lg={3} md={4} sm={6} xs={12}>\r\n                                <ItemCard onClick={() => goToCanvas(data)} data={data} images={images[data.id]} />\r\n                            </Grid>\r\n                        ))}\r\n                    </Grid>\r\n                )}\r\n                {!isLoading && view === 'list' && getAllChatflowsApi.data && (\r\n                    <FlowListTable\r\n                        sx={{ mt: 20 }}\r\n                        data={getAllChatflowsApi.data}\r\n                        images={images}\r\n                        filterFunction={filterFlows}\r\n                        updateFlowsApi={getAllChatflowsApi}\r\n                    />\r\n                )}\r\n            </Stack>\r\n\r\n            {!isLoading && (!getAllChatflowsApi.data || getAllChatflowsApi.data.length === 0) && (\r\n                <Stack sx={{ alignItems: 'center', justifyContent: 'center' }} flexDirection='column'>\r\n                    <Box sx={{ p: 2, height: 'auto' }}>\r\n                        <img style={{ objectFit: 'cover', height: '30vh', width: 'auto' }} src={WorkflowEmptySVG} alt='WorkflowEmptySVG' />\r\n                    </Box>\r\n                    <div>No Chatflows Yet</div>\r\n                </Stack>\r\n            )}\r\n            <LoginDialog show={loginDialogOpen} dialogProps={loginDialogProps} onConfirm={onLoginClick} />\r\n        </MainCard>\r\n    )\r\n}\r\n\r\nexport default Chatflows\r\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)([/*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m12 2-5.5 9h11z\"\n}, \"0\"), /*#__PURE__*/(0, _jsxRuntime.jsx)(\"circle\", {\n  cx: \"17.5\",\n  cy: \"17.5\",\n  r: \"4.5\"\n}, \"1\"), /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M3 13.5h8v8H3z\"\n}, \"2\")], 'Category');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M18.32 4.26C16.84 3.05 15.01 2.25 13 2.05v2.02c1.46.18 2.79.76 3.9 1.62l1.42-1.43zM19.93 11h2.02c-.2-2.01-1-3.84-2.21-5.32L18.31 7.1c.86 1.11 1.44 2.44 1.62 3.9zm-1.62 5.9 1.43 1.43c1.21-1.48 2.01-3.32 2.21-5.32h-2.02c-.18 1.45-.76 2.78-1.62 3.89zM13 19.93v2.02c2.01-.2 3.84-1 5.32-2.21l-1.43-1.43c-1.1.86-2.43 1.44-3.89 1.62zM13 12V7h-2v5H7l5 5 5-5h-4zm-2 7.93v2.02c-5.05-.5-9-4.76-9-9.95s3.95-9.45 9-9.95v2.02C7.05 4.56 4 7.92 4 12s3.05 7.44 7 7.93z\"\n}), 'Downloading');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm-1 4 6 6v10c0 1.1-.9 2-2 2H7.99C6.89 23 6 22.1 6 21l.01-14c0-1.1.89-2 1.99-2h7zm-1 7h5.5L14 6.5V12z\"\n}), 'FileCopy');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M7.41 8.59 12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\"\n}), 'KeyboardArrowDown');\nexports.default = _default;","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getButtonGroupUtilityClass(slot) {\n  return generateUtilityClass('MuiButtonGroup', slot);\n}\nconst buttonGroupClasses = generateUtilityClasses('MuiButtonGroup', ['root', 'contained', 'outlined', 'text', 'disableElevation', 'disabled', 'firstButton', 'fullWidth', 'vertical', 'grouped', 'groupedHorizontal', 'groupedVertical', 'groupedText', 'groupedTextHorizontal', 'groupedTextVertical', 'groupedTextPrimary', 'groupedTextSecondary', 'groupedOutlined', 'groupedOutlinedHorizontal', 'groupedOutlinedVertical', 'groupedOutlinedPrimary', 'groupedOutlinedSecondary', 'groupedContained', 'groupedContainedHorizontal', 'groupedContainedVertical', 'groupedContainedPrimary', 'groupedContainedSecondary', 'lastButton', 'middleButton']);\nexport default buttonGroupClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"color\", \"component\", \"disabled\", \"disableElevation\", \"disableFocusRipple\", \"disableRipple\", \"fullWidth\", \"orientation\", \"size\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport { alpha } from '@mui/system';\nimport { getValidReactChildren } from '@mui/utils';\nimport capitalize from '../utils/capitalize';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport buttonGroupClasses, { getButtonGroupUtilityClass } from './buttonGroupClasses';\nimport ButtonGroupContext from './ButtonGroupContext';\nimport ButtonGroupButtonContext from './ButtonGroupButtonContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst overridesResolver = (props, styles) => {\n  const {\n    ownerState\n  } = props;\n  return [{\n    [`& .${buttonGroupClasses.grouped}`]: styles.grouped\n  }, {\n    [`& .${buttonGroupClasses.grouped}`]: styles[`grouped${capitalize(ownerState.orientation)}`]\n  }, {\n    [`& .${buttonGroupClasses.grouped}`]: styles[`grouped${capitalize(ownerState.variant)}`]\n  }, {\n    [`& .${buttonGroupClasses.grouped}`]: styles[`grouped${capitalize(ownerState.variant)}${capitalize(ownerState.orientation)}`]\n  }, {\n    [`& .${buttonGroupClasses.grouped}`]: styles[`grouped${capitalize(ownerState.variant)}${capitalize(ownerState.color)}`]\n  }, {\n    [`& .${buttonGroupClasses.firstButton}`]: styles.firstButton\n  }, {\n    [`& .${buttonGroupClasses.lastButton}`]: styles.lastButton\n  }, {\n    [`& .${buttonGroupClasses.middleButton}`]: styles.middleButton\n  }, styles.root, styles[ownerState.variant], ownerState.disableElevation === true && styles.disableElevation, ownerState.fullWidth && styles.fullWidth, ownerState.orientation === 'vertical' && styles.vertical];\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    color,\n    disabled,\n    disableElevation,\n    fullWidth,\n    orientation,\n    variant\n  } = ownerState;\n  const slots = {\n    root: ['root', variant, orientation === 'vertical' && 'vertical', fullWidth && 'fullWidth', disableElevation && 'disableElevation'],\n    grouped: ['grouped', `grouped${capitalize(orientation)}`, `grouped${capitalize(variant)}`, `grouped${capitalize(variant)}${capitalize(orientation)}`, `grouped${capitalize(variant)}${capitalize(color)}`, disabled && 'disabled'],\n    firstButton: ['firstButton'],\n    lastButton: ['lastButton'],\n    middleButton: ['middleButton']\n  };\n  return composeClasses(slots, getButtonGroupUtilityClass, classes);\n};\nconst ButtonGroupRoot = styled('div', {\n  name: 'MuiButtonGroup',\n  slot: 'Root',\n  overridesResolver\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  display: 'inline-flex',\n  borderRadius: (theme.vars || theme).shape.borderRadius\n}, ownerState.variant === 'contained' && {\n  boxShadow: (theme.vars || theme).shadows[2]\n}, ownerState.disableElevation && {\n  boxShadow: 'none'\n}, ownerState.fullWidth && {\n  width: '100%'\n}, ownerState.orientation === 'vertical' && {\n  flexDirection: 'column'\n}, {\n  [`& .${buttonGroupClasses.grouped}`]: _extends({\n    minWidth: 40,\n    '&:hover': _extends({}, ownerState.variant === 'contained' && {\n      boxShadow: 'none'\n    })\n  }, ownerState.variant === 'contained' && {\n    boxShadow: 'none'\n  }),\n  [`& .${buttonGroupClasses.firstButton},& .${buttonGroupClasses.middleButton}`]: _extends({}, ownerState.orientation === 'horizontal' && {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0\n  }, ownerState.orientation === 'vertical' && {\n    borderBottomRightRadius: 0,\n    borderBottomLeftRadius: 0\n  }, ownerState.variant === 'text' && ownerState.orientation === 'horizontal' && {\n    borderRight: theme.vars ? `1px solid rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'}`,\n    [`&.${buttonGroupClasses.disabled}`]: {\n      borderRight: `1px solid ${(theme.vars || theme).palette.action.disabled}`\n    }\n  }, ownerState.variant === 'text' && ownerState.orientation === 'vertical' && {\n    borderBottom: theme.vars ? `1px solid rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'}`,\n    [`&.${buttonGroupClasses.disabled}`]: {\n      borderBottom: `1px solid ${(theme.vars || theme).palette.action.disabled}`\n    }\n  }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {\n    borderColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : alpha(theme.palette[ownerState.color].main, 0.5)\n  }, ownerState.variant === 'outlined' && ownerState.orientation === 'horizontal' && {\n    borderRightColor: 'transparent'\n  }, ownerState.variant === 'outlined' && ownerState.orientation === 'vertical' && {\n    borderBottomColor: 'transparent'\n  }, ownerState.variant === 'contained' && ownerState.orientation === 'horizontal' && {\n    borderRight: `1px solid ${(theme.vars || theme).palette.grey[400]}`,\n    [`&.${buttonGroupClasses.disabled}`]: {\n      borderRight: `1px solid ${(theme.vars || theme).palette.action.disabled}`\n    }\n  }, ownerState.variant === 'contained' && ownerState.orientation === 'vertical' && {\n    borderBottom: `1px solid ${(theme.vars || theme).palette.grey[400]}`,\n    [`&.${buttonGroupClasses.disabled}`]: {\n      borderBottom: `1px solid ${(theme.vars || theme).palette.action.disabled}`\n    }\n  }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {\n    borderColor: (theme.vars || theme).palette[ownerState.color].dark\n  }, {\n    '&:hover': _extends({}, ownerState.variant === 'outlined' && ownerState.orientation === 'horizontal' && {\n      borderRightColor: 'currentColor'\n    }, ownerState.variant === 'outlined' && ownerState.orientation === 'vertical' && {\n      borderBottomColor: 'currentColor'\n    })\n  }),\n  [`& .${buttonGroupClasses.lastButton},& .${buttonGroupClasses.middleButton}`]: _extends({}, ownerState.orientation === 'horizontal' && {\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0\n  }, ownerState.orientation === 'vertical' && {\n    borderTopRightRadius: 0,\n    borderTopLeftRadius: 0\n  }, ownerState.variant === 'outlined' && ownerState.orientation === 'horizontal' && {\n    marginLeft: -1\n  }, ownerState.variant === 'outlined' && ownerState.orientation === 'vertical' && {\n    marginTop: -1\n  })\n}));\nconst ButtonGroup = /*#__PURE__*/React.forwardRef(function ButtonGroup(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiButtonGroup'\n  });\n  const {\n      children,\n      className,\n      color = 'primary',\n      component = 'div',\n      disabled = false,\n      disableElevation = false,\n      disableFocusRipple = false,\n      disableRipple = false,\n      fullWidth = false,\n      orientation = 'horizontal',\n      size = 'medium',\n      variant = 'outlined'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    color,\n    component,\n    disabled,\n    disableElevation,\n    disableFocusRipple,\n    disableRipple,\n    fullWidth,\n    orientation,\n    size,\n    variant\n  });\n  const classes = useUtilityClasses(ownerState);\n  const context = React.useMemo(() => ({\n    className: classes.grouped,\n    color,\n    disabled,\n    disableElevation,\n    disableFocusRipple,\n    disableRipple,\n    fullWidth,\n    size,\n    variant\n  }), [color, disabled, disableElevation, disableFocusRipple, disableRipple, fullWidth, size, variant, classes.grouped]);\n  const validChildren = getValidReactChildren(children);\n  const childrenCount = validChildren.length;\n  const getButtonPositionClassName = index => {\n    const isFirstButton = index === 0;\n    const isLastButton = index === childrenCount - 1;\n    if (isFirstButton && isLastButton) {\n      return '';\n    }\n    if (isFirstButton) {\n      return classes.firstButton;\n    }\n    if (isLastButton) {\n      return classes.lastButton;\n    }\n    return classes.middleButton;\n  };\n  return /*#__PURE__*/_jsx(ButtonGroupRoot, _extends({\n    as: component,\n    role: \"group\",\n    className: clsx(classes.root, className),\n    ref: ref,\n    ownerState: ownerState\n  }, other, {\n    children: /*#__PURE__*/_jsx(ButtonGroupContext.Provider, {\n      value: context,\n      children: validChildren.map((child, index) => {\n        return /*#__PURE__*/_jsx(ButtonGroupButtonContext.Provider, {\n          value: getButtonPositionClassName(index),\n          children: child\n        }, index);\n      })\n    })\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ButtonGroup.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, no elevation is used.\n   * @default false\n   */\n  disableElevation: PropTypes.bool,\n  /**\n   * If `true`, the button keyboard focus ripple is disabled.\n   * @default false\n   */\n  disableFocusRipple: PropTypes.bool,\n  /**\n   * If `true`, the button ripple effect is disabled.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * If `true`, the buttons will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The component orientation (layout flow direction).\n   * @default 'horizontal'\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense button styling.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['contained', 'outlined', 'text']), PropTypes.string])\n} : void 0;\nexport default ButtonGroup;","import * as React from 'react';\n\n/**\n * Gets only the valid children of a component,\n * and ignores any nullish or falsy child.\n *\n * @param children the children\n */\nexport default function getValidReactChildren(children) {\n  return React.Children.toArray(children).filter(child => /*#__PURE__*/React.isValidElement(child));\n}"],"names":["getAllChatflows","client","get","getSpecificChatflow","id","concat","getSpecificChatflowFromPublicEndpoint","createNewChatflow","body","post","updateChatflow","put","deleteChatflow","delete","getIsChatflowStreaming","_ref","show","dialogProps","onConfirm","portalElement","document","getElementById","usernameVal","setUsernameVal","useState","passwordVal","setPasswordVal","component","_jsxs","Dialog","onKeyUp","e","key","open","fullWidth","maxWidth","children","_jsx","DialogTitle","sx","fontSize","title","DialogContent","Typography","Input","inputParam","label","name","type","placeholder","onChange","newValue","value","showDialog","style","marginTop","DialogActions","StyledButton","variant","onClick","confirmButtonName","createPortal","onCancel","chatflowName","setChatflowName","isReadyToSave","setIsReadyToSave","useEffect","onClose","OutlinedInput","mt","target","Button","cancelButtonName","disabled","theme","useTheme","dispatch","useDispatch","customization","useSelector","state","languageType","inputValue","setInputValue","setInputParam","SHOW_CANVAS_DIALOG","HIDE_CANVAS_DIALOG","display","flexDirection","flex","mb","ml","PerfectScrollbar","border","borderColor","palette","grey","borderRadius","height","maxHeight","overflowX","backgroundColor","isDarkMode","DarkCodeEditor","onValueChange","code","minHeight","width","LightCodeEditor","_inputParam$rows","_inputParam$step","nodes","edges","nodeId","onDialogCancel","onDialogConfirm","myValue","setMyValue","anchorEl","setAnchorEl","availableNodesForVariable","setAvailableNodesForVariable","ref","useRef","openPopOver","Boolean","handleClosePopOver","nodesForVariable","acceptVariable","getAvailableNodesForVariable","endsWith","current","_Fragment","FormControl","size","getInputType","multiline","rows","inputProps","step","ExpandTextDialog","inputParamName","Popover","anchorOrigin","vertical","horizontal","transformOrigin","SelectVariable","onSelectAndReturnVal","val","newVal","substring","setNewVal","onSelectOutputResponseClick","node","prefix","variablePath","newInput","Stack","Box","pl","pr","List","ListItemButton","p","boxShadow","ListItem","alignItems","ListItemAvatar","padding","objectFit","alt","src","robotPNG","ListItemText","primary","secondary","chatPNG","length","map","index","_selectedOutputAnchor","selectedOutputAnchor","data","outputAnchors","options","find","ancr","outputs","baseURL","inputs","chainName","isValueSelected","candidate","undefined","Array","isArray","indexOf","getToggleButtonGroupUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","ToggleButtonGroupRoot","styled","overridesResolver","props","styles","ownerState","toggleButtonGroupClasses","grouped","capitalize","orientation","root","_extends","vars","shape","marginLeft","borderLeft","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","selected","borderTop","React","inProps","useThemeProps","className","color","exclusive","other","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","handleChange","event","buttonValue","slice","splice","handleExclusiveChange","role","clsx","child","isOpen","onSubmit","categoryValues","setCategoryValues","handleSubmit","preventDefault","newCategories","trim","includes","category","marginBottom","Chip","onDelete","handleDeleteTag","categoryToDelete","filter","marginRight","TextField","onKeyDown","fontStyle","StyledMenu","Menu","elevation","spacing","minWidth","text","alpha","main","action","selectedOpacity","FlowListMenu","_ref2","chatflow","updateFlowsApi","confirm","useConfirm","updateChatflowApi","useApi","chatflowsApi","useNotifier","enqueueSnackbar","enqueueSnackbarAction","arguments","closeSnackbar","closeSnackbarAction","flowDialogOpen","setFlowDialogOpen","categoryDialogOpen","setCategoryDialogOpen","categoryDialogProps","setCategoryDialogProps","disableElevation","currentTarget","endIcon","KeyboardArrowDownIcon","MenuListProps","handleClose","MenuItem","handleFlowRename","disableRipple","EditIcon","handleDuplicate","localStorage","setItem","flowData","window","uiBaseURL","console","error","FileCopyIcon","handleExport","JSON","parse","dataStr","stringify","generateExportFlowData","dataUri","encodeURIComponent","exportFileDefaultName","linkElement","createElement","setAttribute","click","FileDownloadIcon","Divider","my","handleFlowCategory","split","FileCategoryIcon","async","confirmPayload","description","request","errorData","response","status","statusText","message","Date","getTime","Math","random","persist","IconX","FileDeleteIcon","ConfirmDialog","SaveChatflowDialog","updateBody","TagDialog","categories","join","StyledTableCell","TableCell","tableCellClasses","head","common","black","white","StyledTableRow","TableRow","hover","FlowListTable","_ref3","images","filterFunction","navigate","useNavigate","TableContainer","Paper","Table","TableHead","scope","TableBody","row","fontWeight","overflowWrap","whiteSpace","templateName","flexWrap","tag","img","moment","updatedDate","format","direction","xs","sm","justifyContent","Chatflows","_theme$customization","_theme$customization2","isLoading","setLoading","setImages","search","setSearch","loginDialogOpen","setLoginDialogOpen","loginDialogProps","setLoginDialogProps","getAllChatflowsApi","view","setView","getItem","filterFlows","toLowerCase","_getAllChatflowsApi$e","_getAllChatflowsApi$e2","loading","chatflows","i","flowDataStr","j","imageSrc","push","MainCard","background","flexGrow","Toolbar","disableGutters","margin","paddingBottom","InputProps","startAdornment","InputAdornment","position","IconSearch","ButtonGroup","ToggleButtonGroup","nextView","ToggleButton","selectedColor","IconLayoutGrid","IconList","addNew","startIcon","IconPlus","Grid","container","gridSpacing","item","lg","md","ItemCard","WorkflowEmptySVG","LoginDialog","onLoginClick","username","password","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","cx","cy","r","getButtonGroupUtilityClass","ButtonGroupRoot","buttonGroupClasses","firstButton","lastButton","middleButton","shadows","borderRight","onBackgroundChannel","mode","borderBottom","mainChannel","borderRightColor","borderBottomColor","dark","disableFocusRipple","context","validChildren","toArray","getValidReactChildren","childrenCount","getButtonPositionClassName","isFirstButton","isLastButton","as","ButtonGroupContext","Provider","ButtonGroupButtonContext"],"sourceRoot":""}