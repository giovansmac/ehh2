{"version":3,"file":"static/js/2902.103a9d1a.chunk.js","mappings":"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","sources":["assets/images/tools_empty.svg","api/tools.js","hooks/useApi.js","hooks/useConfirm.js","ui-component/button/StyledButton.js","ui-component/cards/Skeleton/ChatflowCard.js","ui-component/cards/ItemCard.js","ui-component/dialog/ConfirmDialog.js","ui-component/editor/DarkCodeEditor.js","ui-component/editor/LightCodeEditor.js","ui-component/tooltip/TooltipWithParser.js","utils/useNotifier.js","ui-component/grid/Grid.js","views/tools/ToolDialog.js","views/tools/index.js"],"sourcesContent":["var _path, _path2, _path3, _path4, _path5, _path6, _path7, _ellipse, _ellipse2, _ellipse3, _path8, _path9, _path10, _circle, _path11, _path12, _circle2, _circle3, _path13, _ellipse4, _ellipse5, _ellipse6, _ellipse7, _circle4, _path14, _ellipse8, _path15, _ellipse9, _circle5, _circle6, _path16, _path17, _path18, _path19, _path20, _path21, _circle7, _circle8, _path22;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgToolsEmpty(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"data-name\": \"Layer 1\",\n    width: 620.87643,\n    height: 425.50091,\n    viewBox: \"0 0 620.87643 425.50091\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M774.835,609.82742c25.95488-19.769,38.35157-52.98886,30.5907-84.67858q-.28924-1.1811-.6106-2.35681c-5.14512-18.81065-17.87431-36.68854-36.42655-42.69907-15.57756-5.0467-32.58093-1.16586-48.83211-3.17276-31.90194-3.93968-56.63486-29.75207-74.03759-56.77793-17.40277-27.02593-30.7774-57.27755-53.90189-79.60489-38.117-36.80284-100.29531-44.72652-147.55488-20.77063-47.25954,23.956-77.36336,77.10424-76.07951,130.07313,1.2839,52.96892,32.72918,103.61088,78.39554,130.47969,16.776,9.87049,36.179,16.863,55.4889,14.41614,16.755-2.12308,31.97892-11.12589,48.655-13.79867,26.21873-4.20225,52.27041,7.65209,74.94762,21.466,22.67716,13.8139,44.58173,30.18754,70.35126,36.59165C720.84306,645.21307,751.843,627.33966,774.835,609.82742Z\",\n    transform: \"translate(-289.56179 -237.24954)\",\n    fill: \"#f2f2f2\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M569.46756,373.27275h-258.57a20.36369,20.36369,0,0,0-20.34,20.34v128.69a20.36368,20.36368,0,0,0,20.34,20.34h258.57a20.35727,20.35727,0,0,0,20.34-20.34v-128.69A20.35729,20.35729,0,0,0,569.46756,373.27275Z\",\n    transform: \"translate(-289.56179 -237.24954)\",\n    fill: \"#fff\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M569.46852,543.64532H310.90212A21.36451,21.36451,0,0,1,289.56179,522.305V393.61114a21.36451,21.36451,0,0,1,21.34033-21.34033h258.5664a21.36452,21.36452,0,0,1,21.34034,21.34033V522.305A21.36452,21.36452,0,0,1,569.46852,543.64532ZM310.90212,374.27081a19.36253,19.36253,0,0,0-19.34033,19.34033V522.305a19.36253,19.36253,0,0,0,19.34033,19.34033h258.5664A19.36254,19.36254,0,0,0,588.80886,522.305V393.61114a19.36254,19.36254,0,0,0-19.34034-19.34033Z\",\n    transform: \"translate(-289.56179 -237.24954)\",\n    fill: \"#2f2e41\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M584.36253,571.2219H336.574a8.07568,8.07568,0,1,1,0-16.15137H584.36253a8.07568,8.07568,0,0,1,0,16.15137Z\",\n    transform: \"translate(-289.56179 -237.24954)\",\n    fill: \"#673ab7\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M813.114,466.4061H705.06175a8.50951,8.50951,0,0,1-8.5-8.5V404.12631a8.50951,8.50951,0,0,1,8.5-8.5H813.114a8.50951,8.50951,0,0,1,8.5,8.5V457.9061A8.50951,8.50951,0,0,1,813.114,466.4061Z\",\n    transform: \"translate(-289.56179 -237.24954)\",\n    fill: \"#fff\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M813.114,467.40606H705.06179a9.5108,9.5108,0,0,1-9.5-9.5V404.12628a9.5108,9.5108,0,0,1,9.5-9.5H813.114a9.5108,9.5108,0,0,1,9.5,9.5v53.77978A9.51081,9.51081,0,0,1,813.114,467.40606ZM705.06179,396.62628a7.50819,7.50819,0,0,0-7.5,7.5v53.77978a7.5082,7.5082,0,0,0,7.5,7.5H813.114a7.5082,7.5082,0,0,0,7.5-7.5V404.12628a7.5082,7.5082,0,0,0-7.5-7.5Z\",\n    transform: \"translate(-289.56179 -237.24954)\",\n    fill: \"#2f2e41\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M773.42989,271.73374h-454.293a1.807,1.807,0,0,1,0-3.61319h454.293a1.807,1.807,0,0,1,0,3.61319Z\",\n    transform: \"translate(-289.56179 -237.24954)\",\n    fill: \"#cacaca\"\n  })), _ellipse || (_ellipse = /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: 60.49941,\n    cy: 10.82345,\n    rx: 10.58751,\n    ry: 10.82345,\n    fill: \"#3f3d56\"\n  })), _ellipse2 || (_ellipse2 = /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: 97.07443,\n    cy: 10.82345,\n    rx: 10.58751,\n    ry: 10.82345,\n    fill: \"#3f3d56\"\n  })), _ellipse3 || (_ellipse3 = /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: 133.64945,\n    cy: 10.82345,\n    rx: 10.58751,\n    ry: 10.82345,\n    fill: \"#3f3d56\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M751.40863,239.93225h-25.981a1.96761,1.96761,0,0,0,0,3.93445h25.981a1.96761,1.96761,0,0,0,0-3.93445Z\",\n    transform: \"translate(-289.56179 -237.24954)\",\n    fill: \"#3f3d56\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M751.40863,247.31662h-25.981a1.96761,1.96761,0,0,0,0,3.93445h25.981a1.96761,1.96761,0,0,0,0-3.93445Z\",\n    transform: \"translate(-289.56179 -237.24954)\",\n    fill: \"#3f3d56\"\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M751.40863,254.69129h-25.981a1.96761,1.96761,0,0,0,0,3.93445h25.981a1.96761,1.96761,0,0,0,0-3.93445Z\",\n    transform: \"translate(-289.56179 -237.24954)\",\n    fill: \"#3f3d56\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 531.3001,\n    cy: 227.78558,\n    r: 12.37235,\n    fill: \"#3f3d56\"\n  })), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M819.93558,469.97983c-.02638,0-.05276-.00086-.07913-.00215a1.618,1.618,0,0,1-1.19937-.62316l-2.06763-2.65821a1.61859,1.61859,0,0,1,.2837-2.27178l.07441-.0579a1.61843,1.61843,0,0,1,2.27221.28392,1.18065,1.18065,0,0,0,1.788.08707l4.1981-4.43206a1.621,1.621,0,0,1,2.28872-.06219l.06884.06562a1.61842,1.61842,0,0,1,.06175,2.28851l-6.51491,6.87668A1.61694,1.61694,0,0,1,819.93558,469.97983Z\",\n    transform: \"translate(-289.56179 -237.24954)\",\n    fill: \"#fff\"\n  })), _path12 || (_path12 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M482.26132,521.98877a42.83052,42.83052,0,0,1-4.43,19.04c-.33.68-.68,1.34-1.05,2h-75.17c-.37-.66-.72-1.32-1.05-2a43.07126,43.07126,0,1,1,81.7-19.04Z\",\n    transform: \"translate(-289.56179 -237.24954)\",\n    fill: \"#2f2e41\"\n  })), _circle2 || (_circle2 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 150.7258,\n    cy: 273.83154,\n    r: 14.71922,\n    fill: \"#fff\"\n  })), _circle3 || (_circle3 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 150.7258,\n    cy: 273.83154,\n    r: 4.90642,\n    fill: \"#3f3d56\"\n  })), _path13 || (_path13 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M397.42045,481.93283c-3.47748-15.57379,7.63867-31.31043,24.82861-35.1488s33.94423,5.67511,37.4217,21.2489-7.91492,21.31769-25.10486,25.156S400.898,497.50668,397.42045,481.93283Z\",\n    transform: \"translate(-289.56179 -237.24954)\",\n    fill: \"#673ab7\"\n  })), _ellipse4 || (_ellipse4 = /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: 481.86685,\n    cy: 545.87131,\n    rx: 6.59448,\n    ry: 21.00616,\n    transform: \"translate(-535.18697 339.05996) rotate(-50.95946)\",\n    fill: \"#2f2e41\"\n  })), _ellipse5 || (_ellipse5 = /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: 392.86685,\n    cy: 508.87131,\n    rx: 6.59448,\n    ry: 21.00616,\n    transform: \"translate(-539.39062 256.23881) rotate(-50.95946)\",\n    fill: \"#2f2e41\"\n  })), _ellipse6 || (_ellipse6 = /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: 807.47311,\n    cy: 407.61601,\n    rx: 21.00616,\n    ry: 6.59448,\n    transform: \"translate(-365.84099 -22.36516) rotate(-14.48222)\",\n    fill: \"#2f2e41\"\n  })), _ellipse7 || (_ellipse7 = /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: 719.47314,\n    cy: 411.61606,\n    rx: 21.00616,\n    ry: 6.59448,\n    transform: \"translate(-226.28569 680.79993) rotate(-67.4341)\",\n    fill: \"#2f2e41\"\n  })), _circle4 || (_circle4 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 475.79752,\n    cy: 164.43254,\n    r: 42.01233,\n    fill: \"#2f2e41\"\n  })), _path14 || (_path14 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M759.23733,457.5503l-12.76312.05932c-9.34253-9.197-7.96015-16.57959-.10627-22.86724l12.76307-.05933C753.24673,441.928,751.67831,449.44822,759.23733,457.5503Z\",\n    transform: \"translate(-289.56179 -237.24954)\",\n    fill: \"#2f2e41\"\n  })), _ellipse8 || (_ellipse8 = /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: 750.20791,\n    cy: 459.9854,\n    rx: 10.63605,\n    ry: 3.98853,\n    transform: \"translate(-419.14428 203.57028) rotate(-30.26634)\",\n    fill: \"#2f2e41\"\n  })), _path15 || (_path15 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M782.23733,457.5503l-12.76312.05932c-9.34253-9.197-7.96015-16.57959-.10627-22.86724l12.76307-.05933C776.24673,441.928,774.67831,449.44822,782.23733,457.5503Z\",\n    transform: \"translate(-289.56179 -237.24954)\",\n    fill: \"#2f2e41\"\n  })), _ellipse9 || (_ellipse9 = /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: 773.20792,\n    cy: 459.9854,\n    rx: 10.63605,\n    ry: 3.98853,\n    transform: \"translate(-416.00919 215.16275) rotate(-30.26634)\",\n    fill: \"#2f2e41\"\n  })), _circle5 || (_circle5 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 474.68448,\n    cy: 153.80158,\n    r: 14.35864,\n    fill: \"#fff\"\n  })), _circle6 || (_circle6 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 474.76596,\n    cy: 160.70867,\n    r: 4.78621,\n    fill: \"#3f3d56\"\n  })), _path16 || (_path16 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M805.93063,362.4228c3.32165-15.20789-7.59339-30.50849-24.37952-34.17481s-33.08661,5.68993-36.40826,20.89783,7.81762,20.75931,24.6037,24.42569S802.609,377.63071,805.93063,362.4228Z\",\n    transform: \"translate(-289.56179 -237.24954)\",\n    fill: \"#673ab7\"\n  })), _path17 || (_path17 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M773.84939,419.99a9.57243,9.57243,0,0,1-19.14435.13842l-.00018-.03064-.00012-.0188c-.0246-5.28665,4.256-6.40152,9.54266-6.426S773.82485,414.70334,773.84939,419.99Z\",\n    transform: \"translate(-289.56179 -237.24954)\",\n    fill: \"#fff\"\n  })), _path18 || (_path18 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M902.36253,405.722H829.574a8.07569,8.07569,0,1,1,0-16.15137h72.78857a8.07569,8.07569,0,0,1,0,16.15137Z\",\n    transform: \"translate(-289.56179 -237.24954)\",\n    fill: \"#673ab7\"\n  })), _path19 || (_path19 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M770.42312,627.07088a34.67943,34.67943,0,1,1-34.67943-34.67943h0a34.53207,34.53207,0,0,1,34.67943,34.384Q770.42378,626.92317,770.42312,627.07088Z\",\n    transform: \"translate(-289.56179 -237.24954)\",\n    fill: \"#fff\"\n  })), _path20 || (_path20 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M735.74376,662.75046a35.67945,35.67945,0,1,1,0-71.35889c.05176,0,.10449-.00049.15625-.00049a35.53226,35.53226,0,0,1,35.523,35.38086v.29883A35.72,35.72,0,0,1,735.74376,662.75046Zm.1499-69.35938c-.04931,0-.09619.00049-.1455.00049a33.67945,33.67945,0,1,0,33.6748,33.6792v-.29A33.57226,33.57226,0,0,0,735.89366,593.39108Z\",\n    transform: \"translate(-289.56179 -237.24954)\",\n    fill: \"#2f2e41\"\n  })), _path21 || (_path21 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M759.86035,651.91v.07224a34.64757,34.64757,0,0,1-46.875,1.24265c-.02893-.43347-.04339-.88141-.04339-1.31493a23.45919,23.45919,0,0,1,46.91834-.06509V651.91Z\",\n    transform: \"translate(-289.56179 -237.24954)\",\n    fill: \"#2f2e41\"\n  })), _circle7 || (_circle7 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 447.43041,\n    cy: 408.71336,\n    r: 8.01934,\n    fill: \"#fff\"\n  })), _circle8 || (_circle8 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 447.43041,\n    cy: 408.71336,\n    r: 2.6731,\n    fill: \"#3f3d56\"\n  })), _path22 || (_path22 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M713.63733,630.08232c-1.89459-8.48492,4.16172-17.05855,13.52716-19.14977s18.49348,3.09191,20.38807,11.57683-4.31218,11.61431-13.67762,13.70553S715.53192,638.56728,713.63733,630.08232Z\",\n    transform: \"translate(-289.56179 -237.24954)\",\n    fill: \"#673ab7\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgToolsEmpty);\nexport default __webpack_public_path__ + \"static/media/tools_empty.eecfe609e06019f7ab47cef3ee1171a1.svg\";\nexport { ForwardRef as ReactComponent };","import client from './client'\r\n\r\nconst getAllTools = () => client.get('/tools')\r\n\r\nconst getSpecificTool = (id) => client.get(`/tools/${id}`)\r\n\r\nconst createNewTool = (body) => client.post(`/tools`, body)\r\n\r\nconst updateTool = (id, body) => client.put(`/tools/${id}`, body)\r\n\r\nconst deleteTool = (id) => client.delete(`/tools/${id}`)\r\n\r\nexport default {\r\n    getAllTools,\r\n    getSpecificTool,\r\n    createNewTool,\r\n    updateTool,\r\n    deleteTool\r\n}\r\n","import { useState } from 'react'\r\n\r\nexport default (apiFunc) => {\r\n    const [data, setData] = useState(null)\r\n    const [error, setError] = useState(null)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const request = async (...args) => {\r\n        setLoading(true)\r\n        try {\r\n            const result = await apiFunc(...args)\r\n            setData(result.data)\r\n        } catch (err) {\r\n            setError(err || 'Unexpected Error!')\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    return {\r\n        data,\r\n        error,\r\n        loading,\r\n        request\r\n    }\r\n}\r\n","import { useContext } from 'react'\r\nimport ConfirmContext from 'store/context/ConfirmContext'\r\nimport { HIDE_CONFIRM, SHOW_CONFIRM } from 'store/actions'\r\n\r\nlet resolveCallback\r\nconst useConfirm = () => {\r\n    const [confirmState, dispatch] = useContext(ConfirmContext)\r\n\r\n    const closeConfirm = () => {\r\n        dispatch({\r\n            type: HIDE_CONFIRM\r\n        })\r\n    }\r\n\r\n    const onConfirm = () => {\r\n        closeConfirm()\r\n        resolveCallback(true)\r\n    }\r\n\r\n    const onCancel = () => {\r\n        closeConfirm()\r\n        resolveCallback(false)\r\n    }\r\n    const confirm = (confirmPayload) => {\r\n        dispatch({\r\n            type: SHOW_CONFIRM,\r\n            payload: confirmPayload\r\n        })\r\n        return new Promise((res) => {\r\n            resolveCallback = res\r\n        })\r\n    }\r\n\r\n    return { confirm, onConfirm, onCancel, confirmState }\r\n}\r\n\r\nexport default useConfirm\r\n","import { styled } from '@mui/material/styles'\r\nimport { Button } from '@mui/material'\r\nimport MuiToggleButton from '@mui/material/ToggleButton'\r\n\r\nexport const StyledButton = styled(Button)(({ theme, color = 'primary' }) => ({\r\n    color: 'white',\r\n    backgroundColor: theme.palette[color].main,\r\n    '&:hover': {\r\n        backgroundColor: theme.palette[color].main,\r\n        backgroundImage: `linear-gradient(rgb(0 0 0/10%) 0 0)`\r\n    }\r\n}))\r\n\r\nexport const StyledToggleButton = styled(MuiToggleButton)(({ theme, color = 'primary' }) => ({\r\n    '&.Mui-selected, &.Mui-selected:hover': {\r\n        color: 'white',\r\n        backgroundColor: theme.palette[color].main\r\n    }\r\n}))\r\n","// material-ui\r\nimport { Card, CardContent, Grid } from '@mui/material'\r\nimport Skeleton from '@mui/material/Skeleton'\r\n\r\n// ==============================|| SKELETON - BRIDGE CARD ||============================== //\r\n\r\nconst ChatflowCard = () => (\r\n    <Card>\r\n        <CardContent>\r\n            <Grid container direction='column'>\r\n                <Grid item>\r\n                    <Grid container justifyContent='space-between'>\r\n                        <Grid item>\r\n                            <Skeleton variant='rectangular' width={44} height={44} />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Skeleton variant='rectangular' width={34} height={34} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Skeleton variant='rectangular' sx={{ my: 2 }} height={40} />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Skeleton variant='rectangular' height={30} />\r\n                </Grid>\r\n            </Grid>\r\n        </CardContent>\r\n    </Card>\r\n)\r\n\r\nexport default ChatflowCard\r\n","import PropTypes from 'prop-types'\r\n\r\n// material-ui\r\nimport { styled } from '@mui/material/styles'\r\nimport { Box, Grid, Typography } from '@mui/material'\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard'\r\nimport SkeletonChatflowCard from 'ui-component/cards/Skeleton/ChatflowCard'\r\n\r\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\r\n    background: theme.palette.card.main,\r\n    color: theme.darkTextPrimary,\r\n    overflow: 'auto',\r\n    position: 'relative',\r\n    boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\r\n    cursor: 'pointer',\r\n    '&:hover': {\r\n        background: theme.palette.card.hover,\r\n        boxShadow: '0 2px 14px 0 rgb(32 40 45 / 20%)'\r\n    },\r\n    maxHeight: '300px',\r\n    maxWidth: '300px',\r\n    overflowWrap: 'break-word',\r\n    whiteSpace: 'pre-line'\r\n}))\r\n\r\n// ===========================|| CONTRACT CARD ||=========================== //\r\n\r\nconst ItemCard = ({ isLoading, data, images, onClick }) => {\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <SkeletonChatflowCard />\r\n            ) : (\r\n                <CardWrapper border={false} content={false} onClick={onClick}>\r\n                    <Box sx={{ p: 2.25 }}>\r\n                        <Grid container direction='column'>\r\n                            <div\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    flexDirection: 'row',\r\n                                    alignItems: 'center'\r\n                                }}\r\n                            >\r\n                                {data.iconSrc && (\r\n                                    <div\r\n                                        style={{\r\n                                            width: 35,\r\n                                            height: 35,\r\n                                            marginRight: 10,\r\n                                            borderRadius: '50%',\r\n                                            background: `url(${data.iconSrc})`,\r\n                                            backgroundSize: 'contain',\r\n                                            backgroundRepeat: 'no-repeat',\r\n                                            backgroundPosition: 'center center'\r\n                                        }}\r\n                                    ></div>\r\n                                )}\r\n                                {!data.iconSrc && data.color && (\r\n                                    <div\r\n                                        style={{\r\n                                            width: 35,\r\n                                            height: 35,\r\n                                            marginRight: 10,\r\n                                            borderRadius: '50%',\r\n                                            background: data.color\r\n                                        }}\r\n                                    ></div>\r\n                                )}\r\n                                <Typography\r\n                                    sx={{ fontSize: '1.5rem', fontWeight: 500, overflowWrap: 'break-word', whiteSpace: 'pre-line' }}\r\n                                >\r\n                                    {data.templateName || data.name}\r\n                                </Typography>\r\n                            </div>\r\n                            {data.description && (\r\n                                <span style={{ marginTop: 10, overflowWrap: 'break-word', whiteSpace: 'pre-line' }}>\r\n                                    {data.description}\r\n                                </span>\r\n                            )}\r\n                            {images && (\r\n                                <div\r\n                                    style={{\r\n                                        display: 'flex',\r\n                                        flexDirection: 'row',\r\n                                        flexWrap: 'wrap',\r\n                                        marginTop: 5\r\n                                    }}\r\n                                >\r\n                                    {images.map((img) => (\r\n                                        <div\r\n                                            key={img}\r\n                                            style={{\r\n                                                width: 35,\r\n                                                height: 35,\r\n                                                marginRight: 5,\r\n                                                borderRadius: '50%',\r\n                                                backgroundColor: 'white',\r\n                                                marginTop: 5\r\n                                            }}\r\n                                        >\r\n                                            <img\r\n                                                style={{ width: '100%', height: '100%', padding: 5, objectFit: 'contain' }}\r\n                                                alt=''\r\n                                                src={img}\r\n                                            />\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                        </Grid>\r\n                    </Box>\r\n                </CardWrapper>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nItemCard.propTypes = {\r\n    isLoading: PropTypes.bool,\r\n    data: PropTypes.object,\r\n    images: PropTypes.array,\r\n    onClick: PropTypes.func\r\n}\r\n\r\nexport default ItemCard\r\n","import { createPortal } from 'react-dom'\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material'\r\nimport useConfirm from 'hooks/useConfirm'\r\nimport { StyledButton } from 'ui-component/button/StyledButton'\r\n\r\nconst ConfirmDialog = () => {\r\n    const { onConfirm, onCancel, confirmState } = useConfirm()\r\n    const portalElement = document.getElementById('portal')\r\n\r\n    const component = confirmState.show ? (\r\n        <Dialog\r\n            fullWidth\r\n            maxWidth='xs'\r\n            open={confirmState.show}\r\n            onClose={onCancel}\r\n            aria-labelledby='alert-dialog-title'\r\n            aria-describedby='alert-dialog-description'\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\r\n                {confirmState.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <span>{confirmState.description}</span>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onCancel}>{confirmState.cancelButtonName}</Button>\r\n                <StyledButton variant='contained' onClick={onConfirm}>\r\n                    {confirmState.confirmButtonName}\r\n                </StyledButton>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nexport default ConfirmDialog\r\n","import Editor from 'react-simple-code-editor'\r\nimport { highlight, languages } from 'prismjs/components/prism-core'\r\nimport 'prismjs/components/prism-clike'\r\nimport 'prismjs/components/prism-javascript'\r\nimport 'prismjs/components/prism-json'\r\nimport 'prismjs/components/prism-markup'\r\nimport './prism-dark.css'\r\nimport PropTypes from 'prop-types'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\nexport const DarkCodeEditor = ({ value, placeholder, disabled = false, type, style, onValueChange, onMouseUp, onBlur }) => {\r\n    const theme = useTheme()\r\n\r\n    return (\r\n        <Editor\r\n            disabled={disabled}\r\n            value={value}\r\n            placeholder={placeholder}\r\n            highlight={(code) => highlight(code, type === 'json' ? languages.json : languages.js)}\r\n            padding={10}\r\n            onValueChange={onValueChange}\r\n            onMouseUp={onMouseUp}\r\n            onBlur={onBlur}\r\n            tabSize={4}\r\n            style={{\r\n                ...style,\r\n                background: theme.palette.codeEditor.main\r\n            }}\r\n            textareaClassName='editor__textarea'\r\n        />\r\n    )\r\n}\r\n\r\nDarkCodeEditor.propTypes = {\r\n    value: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    type: PropTypes.string,\r\n    style: PropTypes.object,\r\n    onValueChange: PropTypes.func,\r\n    onMouseUp: PropTypes.func,\r\n    onBlur: PropTypes.func\r\n}\r\n","import Editor from 'react-simple-code-editor'\r\nimport { highlight, languages } from 'prismjs/components/prism-core'\r\nimport 'prismjs/components/prism-clike'\r\nimport 'prismjs/components/prism-javascript'\r\nimport 'prismjs/components/prism-json'\r\nimport 'prismjs/components/prism-markup'\r\nimport './prism-light.css'\r\nimport PropTypes from 'prop-types'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\nexport const LightCodeEditor = ({ value, placeholder, disabled = false, type, style, onValueChange, onMouseUp, onBlur }) => {\r\n    const theme = useTheme()\r\n\r\n    return (\r\n        <Editor\r\n            disabled={disabled}\r\n            value={value}\r\n            placeholder={placeholder}\r\n            highlight={(code) => highlight(code, type === 'json' ? languages.json : languages.js)}\r\n            padding={10}\r\n            onValueChange={onValueChange}\r\n            onMouseUp={onMouseUp}\r\n            onBlur={onBlur}\r\n            tabSize={4}\r\n            style={{\r\n                ...style,\r\n                background: theme.palette.card.main\r\n            }}\r\n            textareaClassName='editor__textarea'\r\n        />\r\n    )\r\n}\r\n\r\nLightCodeEditor.propTypes = {\r\n    value: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    type: PropTypes.string,\r\n    style: PropTypes.object,\r\n    onValueChange: PropTypes.func,\r\n    onMouseUp: PropTypes.func,\r\n    onBlur: PropTypes.func\r\n}\r\n","import { Info } from '@mui/icons-material'\r\nimport { IconButton, Tooltip } from '@mui/material'\r\nimport parser from 'html-react-parser'\r\nimport PropTypes from 'prop-types'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport const TooltipWithParser = ({ title, style }) => {\r\n    const customization = useSelector((state) => state.customization)\r\n\r\n    return (\r\n        <Tooltip title={parser(title)} placement='right'>\r\n            <IconButton sx={{ height: 15, width: 15 }}>\r\n                <Info\r\n                    style={{\r\n                        ...style,\r\n                        background: 'transparent',\r\n                        color: customization.isDarkMode ? 'white' : 'inherit',\r\n                        height: 15,\r\n                        width: 15\r\n                    }}\r\n                />\r\n            </IconButton>\r\n        </Tooltip>\r\n    )\r\n}\r\n\r\nTooltipWithParser.propTypes = {\r\n    title: PropTypes.node,\r\n    style: PropTypes.any\r\n}\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useSnackbar } from 'notistack'\r\nimport { removeSnackbar } from 'store/actions'\r\n\r\nlet displayed = []\r\n\r\nconst useNotifier = () => {\r\n    const dispatch = useDispatch()\r\n    const notifier = useSelector((state) => state.notifier)\r\n    const { notifications } = notifier\r\n\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar()\r\n\r\n    const storeDisplayed = (id) => {\r\n        displayed = [...displayed, id]\r\n    }\r\n\r\n    const removeDisplayed = (id) => {\r\n        displayed = [...displayed.filter((key) => id !== key)]\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        notifications.forEach(({ key, message, options = {}, dismissed = false }) => {\r\n            if (dismissed) {\r\n                // dismiss snackbar using notistack\r\n                closeSnackbar(key)\r\n                return\r\n            }\r\n\r\n            // do nothing if snackbar is already displayed\r\n            if (displayed.includes(key)) return\r\n\r\n            // display snackbar using notistack\r\n            enqueueSnackbar(message, {\r\n                key,\r\n                ...options,\r\n                onClose: (event, reason, myKey) => {\r\n                    if (options.onClose) {\r\n                        options.onClose(event, reason, myKey)\r\n                    }\r\n                },\r\n                onExited: (event, myKey) => {\r\n                    // remove this snackbar from redux store\r\n                    dispatch(removeSnackbar(myKey))\r\n                    removeDisplayed(myKey)\r\n                }\r\n            })\r\n\r\n            // keep track of snackbars that we've displayed\r\n            storeDisplayed(key)\r\n        })\r\n    }, [notifications, closeSnackbar, enqueueSnackbar, dispatch])\r\n}\r\n\r\nexport default useNotifier\r\n","import PropTypes from 'prop-types'\r\nimport { DataGrid } from '@mui/x-data-grid'\r\nimport { IconPlus } from '@tabler/icons'\r\nimport { Button } from '@mui/material'\r\n\r\nexport const Grid = ({ columns, rows, style, disabled = false, onRowUpdate, addNewRow }) => {\r\n    const handleProcessRowUpdate = (newRow) => {\r\n        onRowUpdate(newRow)\r\n        return newRow\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!disabled && (\r\n                <Button variant='outlined' onClick={addNewRow} startIcon={<IconPlus />}>\r\n                    Add Item\r\n                </Button>\r\n            )}\r\n            {rows && columns && (\r\n                <div style={{ marginTop: 10, height: 300, width: '100%', ...style }}>\r\n                    <DataGrid\r\n                        processRowUpdate={handleProcessRowUpdate}\r\n                        isCellEditable={() => {\r\n                            return !disabled\r\n                        }}\r\n                        onProcessRowUpdateError={(error) => console.error(error)}\r\n                        rows={rows}\r\n                        columns={columns}\r\n                    />\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nGrid.propTypes = {\r\n    rows: PropTypes.array,\r\n    columns: PropTypes.array,\r\n    style: PropTypes.any,\r\n    disabled: PropTypes.bool,\r\n    addNewRow: PropTypes.func,\r\n    onRowUpdate: PropTypes.func\r\n}\r\n","import { createPortal } from 'react-dom'\r\nimport PropTypes from 'prop-types'\r\nimport { useState, useEffect, useCallback, useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction } from 'store/actions'\r\nimport { cloneDeep } from 'lodash'\r\n\r\nimport { Box, Typography, Button, Dialog, DialogActions, DialogContent, DialogTitle, Stack, OutlinedInput } from '@mui/material'\r\nimport { StyledButton } from 'ui-component/button/StyledButton'\r\nimport { Grid } from 'ui-component/grid/Grid'\r\nimport { TooltipWithParser } from 'ui-component/tooltip/TooltipWithParser'\r\nimport { GridActionsCellItem } from '@mui/x-data-grid'\r\nimport DeleteIcon from '@mui/icons-material/Delete'\r\nimport ConfirmDialog from 'ui-component/dialog/ConfirmDialog'\r\nimport { DarkCodeEditor } from 'ui-component/editor/DarkCodeEditor'\r\nimport { LightCodeEditor } from 'ui-component/editor/LightCodeEditor'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\n// Icons\r\nimport { IconX, IconFileExport } from '@tabler/icons'\r\n\r\n// API\r\nimport toolsApi from 'api/tools'\r\n\r\n// Hooks\r\nimport useConfirm from 'hooks/useConfirm'\r\nimport useApi from 'hooks/useApi'\r\n\r\n// utils\r\nimport useNotifier from 'utils/useNotifier'\r\nimport { generateRandomGradient, formatDataGridRows } from 'utils/genericHelper'\r\nimport { HIDE_CANVAS_DIALOG, SHOW_CANVAS_DIALOG } from 'store/actions'\r\n\r\nconst exampleAPIFunc = `/*\r\n* You can use any libraries imported in Flowise\r\n* You can use properties specified in Output Schema as variables. Ex: Property = userid, Variable = $userid\r\n* Must return a string value at the end of function\r\n*/\r\n\r\nconst fetch = require('node-fetch');\r\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\r\nconst options = {\r\n    method: 'GET',\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n};\r\ntry {\r\n    const response = await fetch(url, options);\r\n    const text = await response.text();\r\n    return text;\r\n} catch (error) {\r\n    console.error(error);\r\n    return '';\r\n}`\r\n\r\nconst ToolDialog = ({ show, dialogProps, onUseTemplate, onCancel, onConfirm }) => {\r\n    const portalElement = document.getElementById('portal')\r\n    const theme = useTheme()\r\n\r\n    const customization = useSelector((state) => state.customization)\r\n    const dispatch = useDispatch()\r\n\r\n    // ==============================|| Snackbar ||============================== //\r\n\r\n    useNotifier()\r\n    const { confirm } = useConfirm()\r\n\r\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\r\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\r\n\r\n    const getSpecificToolApi = useApi(toolsApi.getSpecificTool)\r\n\r\n    const [toolId, setToolId] = useState('')\r\n    const [toolName, setToolName] = useState('')\r\n    const [toolDesc, setToolDesc] = useState('')\r\n    const [toolIcon, setToolIcon] = useState('')\r\n    const [toolSchema, setToolSchema] = useState([])\r\n    const [toolFunc, setToolFunc] = useState('')\r\n\r\n    const deleteItem = useCallback(\r\n        (id) => () => {\r\n            setTimeout(() => {\r\n                setToolSchema((prevRows) => prevRows.filter((row) => row.id !== id))\r\n            })\r\n        },\r\n        []\r\n    )\r\n\r\n    const addNewRow = () => {\r\n        setTimeout(() => {\r\n            setToolSchema((prevRows) => {\r\n                let allRows = [...cloneDeep(prevRows)]\r\n                const lastRowId = allRows.length ? allRows[allRows.length - 1].id + 1 : 1\r\n                allRows.push({\r\n                    id: lastRowId,\r\n                    property: '',\r\n                    description: '',\r\n                    type: '',\r\n                    required: false\r\n                })\r\n                return allRows\r\n            })\r\n        })\r\n    }\r\n\r\n    const onRowUpdate = (newRow) => {\r\n        setTimeout(() => {\r\n            setToolSchema((prevRows) => {\r\n                let allRows = [...cloneDeep(prevRows)]\r\n                const indexToUpdate = allRows.findIndex((row) => row.id === newRow.id)\r\n                if (indexToUpdate >= 0) {\r\n                    allRows[indexToUpdate] = { ...newRow }\r\n                }\r\n                return allRows\r\n            })\r\n        })\r\n    }\r\n\r\n    const columns = useMemo(\r\n        () => [\r\n            { field: 'property', headerName: 'Property', editable: true, flex: 1 },\r\n            {\r\n                field: 'type',\r\n                headerName: 'Type',\r\n                type: 'singleSelect',\r\n                valueOptions: ['string', 'number', 'boolean', 'date'],\r\n                editable: true,\r\n                width: 120\r\n            },\r\n            { field: 'description', headerName: 'Description', editable: true, flex: 1 },\r\n            { field: 'required', headerName: 'Required', type: 'boolean', editable: true, width: 80 },\r\n            {\r\n                field: 'actions',\r\n                type: 'actions',\r\n                width: 80,\r\n                getActions: (params) => [\r\n                    <GridActionsCellItem key={'Delete'} icon={<DeleteIcon />} label='Delete' onClick={deleteItem(params.id)} />\r\n                ]\r\n            }\r\n        ],\r\n        [deleteItem]\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (show) dispatch({ type: SHOW_CANVAS_DIALOG })\r\n        else dispatch({ type: HIDE_CANVAS_DIALOG })\r\n        return () => dispatch({ type: HIDE_CANVAS_DIALOG })\r\n    }, [show, dispatch])\r\n\r\n    useEffect(() => {\r\n        if (getSpecificToolApi.data) {\r\n            setToolId(getSpecificToolApi.data.id)\r\n            setToolName(getSpecificToolApi.data.name)\r\n            setToolDesc(getSpecificToolApi.data.description)\r\n            setToolSchema(formatDataGridRows(getSpecificToolApi.data.schema))\r\n            if (getSpecificToolApi.data.func) setToolFunc(getSpecificToolApi.data.func)\r\n            else setToolFunc('')\r\n        }\r\n    }, [getSpecificToolApi.data])\r\n\r\n    useEffect(() => {\r\n        if (dialogProps.type === 'EDIT' && dialogProps.data) {\r\n            // When tool dialog is opened from Tools dashboard\r\n            setToolId(dialogProps.data.id)\r\n            setToolName(dialogProps.data.name)\r\n            setToolDesc(dialogProps.data.description)\r\n            setToolIcon(dialogProps.data.iconSrc)\r\n            setToolSchema(formatDataGridRows(dialogProps.data.schema))\r\n            if (dialogProps.data.func) setToolFunc(dialogProps.data.func)\r\n            else setToolFunc('')\r\n        } else if (dialogProps.type === 'EDIT' && dialogProps.toolId) {\r\n            // When tool dialog is opened from CustomTool node in canvas\r\n            getSpecificToolApi.request(dialogProps.toolId)\r\n        } else if (dialogProps.type === 'IMPORT' && dialogProps.data) {\r\n            // When tool dialog is to import existing tool\r\n            setToolName(dialogProps.data.name)\r\n            setToolDesc(dialogProps.data.description)\r\n            setToolIcon(dialogProps.data.iconSrc)\r\n            setToolSchema(formatDataGridRows(dialogProps.data.schema))\r\n            if (dialogProps.data.func) setToolFunc(dialogProps.data.func)\r\n            else setToolFunc('')\r\n        } else if (dialogProps.type === 'TEMPLATE' && dialogProps.data) {\r\n            // When tool dialog is a template\r\n            setToolName(dialogProps.data.name)\r\n            setToolDesc(dialogProps.data.description)\r\n            setToolIcon(dialogProps.data.iconSrc)\r\n            setToolSchema(formatDataGridRows(dialogProps.data.schema))\r\n            if (dialogProps.data.func) setToolFunc(dialogProps.data.func)\r\n            else setToolFunc('')\r\n        } else if (dialogProps.type === 'ADD') {\r\n            // When tool dialog is to add a new tool\r\n            setToolId('')\r\n            setToolName('')\r\n            setToolDesc('')\r\n            setToolIcon('')\r\n            setToolSchema([])\r\n            setToolFunc('')\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [dialogProps])\r\n\r\n    const useToolTemplate = () => {\r\n        onUseTemplate(dialogProps.data)\r\n    }\r\n\r\n    const exportTool = async () => {\r\n        try {\r\n            const toolResp = await toolsApi.getSpecificTool(toolId)\r\n            if (toolResp.data) {\r\n                const toolData = toolResp.data\r\n                delete toolData.id\r\n                delete toolData.createdDate\r\n                delete toolData.updatedDate\r\n                let dataStr = JSON.stringify(toolData, null, 2)\r\n                let dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr)\r\n\r\n                let exportFileDefaultName = `${toolName}-CustomTool.json`\r\n\r\n                let linkElement = document.createElement('a')\r\n                linkElement.setAttribute('href', dataUri)\r\n                linkElement.setAttribute('download', exportFileDefaultName)\r\n                linkElement.click()\r\n            }\r\n        } catch (error) {\r\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n            enqueueSnackbar({\r\n                message: `Failed to export Tool: ${errorData}`,\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n            onCancel()\r\n        }\r\n    }\r\n\r\n    const addNewTool = async () => {\r\n        try {\r\n            const obj = {\r\n                name: toolName,\r\n                description: toolDesc,\r\n                color: generateRandomGradient(),\r\n                schema: JSON.stringify(toolSchema),\r\n                func: toolFunc,\r\n                iconSrc: toolIcon\r\n            }\r\n            const createResp = await toolsApi.createNewTool(obj)\r\n            if (createResp.data) {\r\n                enqueueSnackbar({\r\n                    message: 'New Tool added',\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'success',\r\n                        action: (key) => (\r\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        )\r\n                    }\r\n                })\r\n                onConfirm(createResp.data.id)\r\n            }\r\n        } catch (error) {\r\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n            enqueueSnackbar({\r\n                message: `Failed to add new Tool: ${errorData}`,\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n            onCancel()\r\n        }\r\n    }\r\n\r\n    const saveTool = async () => {\r\n        try {\r\n            const saveResp = await toolsApi.updateTool(toolId, {\r\n                name: toolName,\r\n                description: toolDesc,\r\n                schema: JSON.stringify(toolSchema),\r\n                func: toolFunc,\r\n                iconSrc: toolIcon\r\n            })\r\n            if (saveResp.data) {\r\n                enqueueSnackbar({\r\n                    message: 'Tool saved',\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'success',\r\n                        action: (key) => (\r\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        )\r\n                    }\r\n                })\r\n                onConfirm(saveResp.data.id)\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n            enqueueSnackbar({\r\n                message: `Failed to save Tool: ${errorData}`,\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n            onCancel()\r\n        }\r\n    }\r\n\r\n    const deleteTool = async () => {\r\n        const confirmPayload = {\r\n            title: `Delete Tool`,\r\n            description: `Delete tool ${toolName}?`,\r\n            confirmButtonName: 'Delete',\r\n            cancelButtonName: 'Cancel'\r\n        }\r\n        const isConfirmed = await confirm(confirmPayload)\r\n\r\n        if (isConfirmed) {\r\n            try {\r\n                const delResp = await toolsApi.deleteTool(toolId)\r\n                if (delResp.data) {\r\n                    enqueueSnackbar({\r\n                        message: 'Tool deleted',\r\n                        options: {\r\n                            key: new Date().getTime() + Math.random(),\r\n                            variant: 'success',\r\n                            action: (key) => (\r\n                                <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                    <IconX />\r\n                                </Button>\r\n                            )\r\n                        }\r\n                    })\r\n                    onConfirm()\r\n                }\r\n            } catch (error) {\r\n                const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n                enqueueSnackbar({\r\n                    message: `Failed to delete Tool: ${errorData}`,\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'error',\r\n                        persist: true,\r\n                        action: (key) => (\r\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        )\r\n                    }\r\n                })\r\n                onCancel()\r\n            }\r\n        }\r\n    }\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            fullWidth\r\n            maxWidth='md'\r\n            open={show}\r\n            onClose={onCancel}\r\n            aria-labelledby='alert-dialog-title'\r\n            aria-describedby='alert-dialog-description'\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\r\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                    {dialogProps.title}\r\n                    <div style={{ flex: 1 }} />\r\n                    {dialogProps.type === 'EDIT' && (\r\n                        <Button variant='outlined' onClick={() => exportTool()} startIcon={<IconFileExport />}>\r\n                            Export\r\n                        </Button>\r\n                    )}\r\n                </div>\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <Box sx={{ p: 2 }}>\r\n                    <Stack sx={{ position: 'relative' }} direction='row'>\r\n                        <Typography variant='overline'>\r\n                            Tool Name\r\n                            <span style={{ color: 'red' }}>&nbsp;*</span>\r\n                            <TooltipWithParser\r\n                                style={{ marginLeft: 10 }}\r\n                                title={'Tool name must be small capital letter with underscore. Ex: my_tool'}\r\n                            />\r\n                        </Typography>\r\n                    </Stack>\r\n                    <OutlinedInput\r\n                        id='toolName'\r\n                        type='string'\r\n                        fullWidth\r\n                        disabled={dialogProps.type === 'TEMPLATE'}\r\n                        placeholder='My New Tool'\r\n                        value={toolName}\r\n                        name='toolName'\r\n                        onChange={(e) => setToolName(e.target.value)}\r\n                    />\r\n                </Box>\r\n                <Box sx={{ p: 2 }}>\r\n                    <Stack sx={{ position: 'relative' }} direction='row'>\r\n                        <Typography variant='overline'>\r\n                            Tool description\r\n                            <span style={{ color: 'red' }}>&nbsp;*</span>\r\n                            <TooltipWithParser\r\n                                style={{ marginLeft: 10 }}\r\n                                title={'Description of what the tool does. This is for ChatGPT to determine when to use this tool.'}\r\n                            />\r\n                        </Typography>\r\n                    </Stack>\r\n                    <OutlinedInput\r\n                        id='toolDesc'\r\n                        type='string'\r\n                        fullWidth\r\n                        disabled={dialogProps.type === 'TEMPLATE'}\r\n                        placeholder='Description of what the tool does. This is for ChatGPT to determine when to use this tool.'\r\n                        multiline={true}\r\n                        rows={3}\r\n                        value={toolDesc}\r\n                        name='toolDesc'\r\n                        onChange={(e) => setToolDesc(e.target.value)}\r\n                    />\r\n                </Box>\r\n                <Box sx={{ p: 2 }}>\r\n                    <Stack sx={{ position: 'relative' }} direction='row'>\r\n                        <Typography variant='overline'>Tool Icon Src</Typography>\r\n                    </Stack>\r\n                    <OutlinedInput\r\n                        id='toolIcon'\r\n                        type='string'\r\n                        fullWidth\r\n                        disabled={dialogProps.type === 'TEMPLATE'}\r\n                        placeholder='https://raw.githubusercontent.com/gilbarbara/logos/main/logos/airtable.svg'\r\n                        value={toolIcon}\r\n                        name='toolIcon'\r\n                        onChange={(e) => setToolIcon(e.target.value)}\r\n                    />\r\n                </Box>\r\n                <Box sx={{ p: 2 }}>\r\n                    <Stack sx={{ position: 'relative' }} direction='row'>\r\n                        <Typography variant='overline'>\r\n                            Output Schema\r\n                            <TooltipWithParser style={{ marginLeft: 10 }} title={'What should be the output response in JSON format?'} />\r\n                        </Typography>\r\n                    </Stack>\r\n                    <Grid\r\n                        columns={columns}\r\n                        rows={toolSchema}\r\n                        disabled={dialogProps.type === 'TEMPLATE'}\r\n                        addNewRow={addNewRow}\r\n                        onRowUpdate={onRowUpdate}\r\n                    />\r\n                </Box>\r\n                <Box sx={{ p: 2 }}>\r\n                    <Stack sx={{ position: 'relative' }} direction='row'>\r\n                        <Typography variant='overline'>\r\n                            Javascript Function\r\n                            <TooltipWithParser\r\n                                style={{ marginLeft: 10 }}\r\n                                title='Function to execute when tool is being used. You can use properties specified in Output Schema as variables. For example, if the property is <code>userid</code>, you can use as <code>$userid</code>. Return value must be a string. You can also override the code from API by following this <a target=\"_blank\" href=\"https://docs.flowiseai.com/tools/custom-tool#override-function-from-api\">guide</a>'\r\n                            />\r\n                        </Typography>\r\n                    </Stack>\r\n                    {dialogProps.type !== 'TEMPLATE' && (\r\n                        <Button style={{ marginBottom: 10 }} variant='outlined' onClick={() => setToolFunc(exampleAPIFunc)}>\r\n                            See Example\r\n                        </Button>\r\n                    )}\r\n                    {customization.isDarkMode ? (\r\n                        <DarkCodeEditor\r\n                            value={toolFunc}\r\n                            disabled={dialogProps.type === 'TEMPLATE'}\r\n                            onValueChange={(code) => setToolFunc(code)}\r\n                            style={{\r\n                                fontSize: '0.875rem',\r\n                                minHeight: 'calc(100vh - 220px)',\r\n                                width: '100%',\r\n                                borderRadius: 5\r\n                            }}\r\n                        />\r\n                    ) : (\r\n                        <LightCodeEditor\r\n                            value={toolFunc}\r\n                            disabled={dialogProps.type === 'TEMPLATE'}\r\n                            onValueChange={(code) => setToolFunc(code)}\r\n                            style={{\r\n                                fontSize: '0.875rem',\r\n                                minHeight: 'calc(100vh - 220px)',\r\n                                width: '100%',\r\n                                border: `1px solid ${theme.palette.grey[300]}`,\r\n                                borderRadius: 5\r\n                            }}\r\n                        />\r\n                    )}\r\n                </Box>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                {dialogProps.type === 'EDIT' && (\r\n                    <StyledButton color='error' variant='contained' onClick={() => deleteTool()}>\r\n                        Delete\r\n                    </StyledButton>\r\n                )}\r\n                {dialogProps.type === 'TEMPLATE' && (\r\n                    <StyledButton color='secondary' variant='contained' onClick={useToolTemplate}>\r\n                        Use Template\r\n                    </StyledButton>\r\n                )}\r\n                {dialogProps.type !== 'TEMPLATE' && (\r\n                    <StyledButton\r\n                        disabled={!(toolName && toolDesc)}\r\n                        variant='contained'\r\n                        onClick={() => (dialogProps.type === 'ADD' || dialogProps.type === 'IMPORT' ? addNewTool() : saveTool())}\r\n                    >\r\n                        {dialogProps.confirmButtonName}\r\n                    </StyledButton>\r\n                )}\r\n            </DialogActions>\r\n            <ConfirmDialog />\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nToolDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onUseTemplate: PropTypes.func,\r\n    onCancel: PropTypes.func,\r\n    onConfirm: PropTypes.func\r\n}\r\n\r\nexport default ToolDialog\r\n","import { useEffect, useState, useRef } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\n// material-ui\r\nimport { Grid, Box, Stack, Button } from '@mui/material'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard'\r\nimport ItemCard from 'ui-component/cards/ItemCard'\r\nimport { gridSpacing } from 'store/constant'\r\nimport ToolEmptySVG from 'assets/images/tools_empty.svg'\r\nimport { StyledButton } from 'ui-component/button/StyledButton'\r\nimport ToolDialog from './ToolDialog'\r\n\r\n// API\r\nimport toolsApi from 'api/tools'\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi'\r\n\r\n// icons\r\nimport { IconPlus, IconFileImport } from '@tabler/icons'\r\n\r\n// ==============================|| CHATFLOWS ||============================== //\r\n\r\nconst Tools = () => {\r\n    const theme = useTheme()\r\n    const customization = useSelector((state) => state.customization)\r\n\r\n    const getAllToolsApi = useApi(toolsApi.getAllTools)\r\n\r\n    const [showDialog, setShowDialog] = useState(false)\r\n    const [dialogProps, setDialogProps] = useState({})\r\n\r\n    const inputRef = useRef(null)\r\n\r\n    const onUploadFile = (file) => {\r\n        try {\r\n            const dialogProp = {\r\n                title: 'Add New Tool',\r\n                type: 'IMPORT',\r\n                cancelButtonName: 'Cancel',\r\n                confirmButtonName: 'Save',\r\n                data: JSON.parse(file)\r\n            }\r\n            setDialogProps(dialogProp)\r\n            setShowDialog(true)\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n    }\r\n\r\n    const handleFileUpload = (e) => {\r\n        if (!e.target.files) return\r\n\r\n        const file = e.target.files[0]\r\n\r\n        const reader = new FileReader()\r\n        reader.onload = (evt) => {\r\n            if (!evt?.target?.result) {\r\n                return\r\n            }\r\n            const { result } = evt.target\r\n            onUploadFile(result)\r\n        }\r\n        reader.readAsText(file)\r\n    }\r\n\r\n    const addNew = () => {\r\n        const dialogProp = {\r\n            title: 'Add New Tool',\r\n            type: 'ADD',\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Add'\r\n        }\r\n        setDialogProps(dialogProp)\r\n        setShowDialog(true)\r\n    }\r\n\r\n    const edit = (selectedTool) => {\r\n        const dialogProp = {\r\n            title: 'Edit Tool',\r\n            type: 'EDIT',\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Save',\r\n            data: selectedTool\r\n        }\r\n        setDialogProps(dialogProp)\r\n        setShowDialog(true)\r\n    }\r\n\r\n    const onConfirm = () => {\r\n        setShowDialog(false)\r\n        getAllToolsApi.request()\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAllToolsApi.request()\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <MainCard sx={{ background: customization.isDarkMode ? theme.palette.common.black : '' }}>\r\n                <Stack flexDirection='row'>\r\n                    <h1>Tools</h1>\r\n                    <Grid sx={{ mb: 1.25 }} container direction='row'>\r\n                        <Box sx={{ flexGrow: 1 }} />\r\n                        <Grid item>\r\n                            <Button\r\n                                variant='outlined'\r\n                                sx={{ mr: 2 }}\r\n                                onClick={() => inputRef.current.click()}\r\n                                startIcon={<IconFileImport />}\r\n                            >\r\n                                Load\r\n                            </Button>\r\n                            <input ref={inputRef} type='file' hidden accept='.json' onChange={(e) => handleFileUpload(e)} />\r\n                            <StyledButton variant='contained' sx={{ color: 'white' }} onClick={addNew} startIcon={<IconPlus />}>\r\n                                Create\r\n                            </StyledButton>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Stack>\r\n                <Grid container spacing={gridSpacing}>\r\n                    {!getAllToolsApi.loading &&\r\n                        getAllToolsApi.data &&\r\n                        getAllToolsApi.data.map((data, index) => (\r\n                            <Grid key={index} item lg={3} md={4} sm={6} xs={12}>\r\n                                <ItemCard data={data} onClick={() => edit(data)} />\r\n                            </Grid>\r\n                        ))}\r\n                </Grid>\r\n                {!getAllToolsApi.loading && (!getAllToolsApi.data || getAllToolsApi.data.length === 0) && (\r\n                    <Stack sx={{ alignItems: 'center', justifyContent: 'center' }} flexDirection='column'>\r\n                        <Box sx={{ p: 2, height: 'auto' }}>\r\n                            <img style={{ objectFit: 'cover', height: '30vh', width: 'auto' }} src={ToolEmptySVG} alt='ToolEmptySVG' />\r\n                        </Box>\r\n                        <div>No Tools Created Yet</div>\r\n                    </Stack>\r\n                )}\r\n            </MainCard>\r\n            <ToolDialog\r\n                show={showDialog}\r\n                dialogProps={dialogProps}\r\n                onCancel={() => setShowDialog(false)}\r\n                onConfirm={onConfirm}\r\n            ></ToolDialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Tools\r\n"],"names":["getAllTools","client","get","getSpecificTool","id","concat","createNewTool","body","post","updateTool","put","deleteTool","delete","apiFunc","data","setData","useState","error","setError","loading","setLoading","request","async","result","arguments","err","resolveCallback","useConfirm","confirmState","dispatch","useContext","ConfirmContext","closeConfirm","type","HIDE_CONFIRM","confirm","confirmPayload","SHOW_CONFIRM","payload","Promise","res","onConfirm","onCancel","StyledButton","styled","Button","_ref","theme","color","backgroundColor","palette","main","backgroundImage","MuiToggleButton","_ref2","ChatflowCard","_jsx","Card","children","CardContent","_jsxs","Grid","container","direction","item","justifyContent","Skeleton","variant","width","height","sx","my","CardWrapper","MainCard","background","card","darkTextPrimary","overflow","position","boxShadow","cursor","hover","maxHeight","maxWidth","overflowWrap","whiteSpace","isLoading","images","onClick","_Fragment","SkeletonChatflowCard","border","content","Box","p","style","display","flexDirection","alignItems","iconSrc","marginRight","borderRadius","backgroundSize","backgroundRepeat","backgroundPosition","Typography","fontSize","fontWeight","templateName","name","description","marginTop","flexWrap","map","img","padding","objectFit","alt","src","ConfirmDialog","portalElement","document","getElementById","component","show","Dialog","fullWidth","open","onClose","DialogTitle","title","DialogContent","DialogActions","cancelButtonName","confirmButtonName","createPortal","DarkCodeEditor","value","placeholder","disabled","onValueChange","onMouseUp","onBlur","useTheme","Editor","highlight","code","languages","json","js","tabSize","codeEditor","textareaClassName","LightCodeEditor","TooltipWithParser","customization","useSelector","state","Tooltip","parser","placement","IconButton","Info","isDarkMode","displayed","useNotifier","useDispatch","notifier","notifications","enqueueSnackbar","closeSnackbar","useSnackbar","React","forEach","key","message","options","dismissed","includes","event","reason","myKey","onExited","removeSnackbar","filter","columns","rows","onRowUpdate","addNewRow","startIcon","IconPlus","DataGrid","processRowUpdate","newRow","isCellEditable","onProcessRowUpdateError","console","dialogProps","onUseTemplate","enqueueSnackbarAction","closeSnackbarAction","getSpecificToolApi","useApi","toolsApi","toolId","setToolId","toolName","setToolName","toolDesc","setToolDesc","toolIcon","setToolIcon","toolSchema","setToolSchema","toolFunc","setToolFunc","deleteItem","useCallback","setTimeout","prevRows","row","useMemo","field","headerName","editable","flex","valueOptions","getActions","params","GridActionsCellItem","icon","DeleteIcon","label","useEffect","SHOW_CANVAS_DIALOG","HIDE_CANVAS_DIALOG","formatDataGridRows","schema","func","toolResp","toolData","createdDate","updatedDate","dataStr","JSON","stringify","dataUri","encodeURIComponent","exportFileDefaultName","linkElement","createElement","setAttribute","click","errorData","response","status","statusText","Date","getTime","Math","random","persist","action","IconX","exportTool","IconFileExport","Stack","marginLeft","OutlinedInput","onChange","e","target","multiline","allRows","cloneDeep","lastRowId","length","push","property","required","indexToUpdate","findIndex","marginBottom","minHeight","grey","useToolTemplate","obj","generateRandomGradient","createResp","addNewTool","saveResp","saveTool","Tools","getAllToolsApi","showDialog","setShowDialog","setDialogProps","inputRef","useRef","handleFileUpload","files","file","reader","FileReader","onload","evt","_evt$target","dialogProp","parse","onUploadFile","readAsText","common","black","mb","flexGrow","mr","current","IconFileImport","ref","hidden","accept","addNew","spacing","gridSpacing","index","lg","md","sm","xs","ItemCard","ToolEmptySVG","ToolDialog"],"sourceRoot":""}