{"version":3,"file":"static/js/2531.ad8c744f.chunk.js","mappings":"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","sources":["api/apikey.js","api/chatflows.js","ui-component/dialog/SaveChatflowDialog.js","utils/usePrompt.js","ui-component/table/Table.js","api/config.js","ui-component/dialog/NodeInfoDialog.js","views/canvas/CanvasNode.js","views/canvas/ButtonEdge.js","menu-items/settings.js","views/settings/index.js","views/chatflows/ShareChatbot.js","ui-component/checkbox/Checkbox.js","views/chatflows/EmbedChat.js","views/chatflows/Configuration.js","assets/images/python.svg","assets/images/javascript.svg","assets/images/cURL.svg","assets/images/embed.svg","assets/images/settings.svg","views/chatflows/APICodeDialog.js","ui-component/dialog/AnalyseFlowDialog.js","assets/images/message_empty.svg","ui-component/markdown/MemoizedReactMarkdown.js","ui-component/markdown/CodeBlock.js","ui-component/dialog/SourceDocDialog.js","api/chatmessage.js","ui-component/dialog/ViewMessagesDialog.js","views/canvas/CanvasHeader.js","ui-component/button/StyledFab.js","views/canvas/AddNodes.js","api/prediction.js","views/chatmessage/ChatMessage.js","views/chatmessage/ChatExpandDialog.js","views/chatmessage/ChatPopUp.js","api/vectorstore.js","views/vectorstore/VectorStoreDialog.js","views/vectorstore/VectorStorePopUp.js","api/nodes.js","views/canvas/index.js"],"sourcesContent":["import client from './client'\r\n\r\nconst getAllAPIKeys = () => client.get('/apikey')\r\n\r\nconst createNewAPI = (body) => client.post(`/apikey`, body)\r\n\r\nconst updateAPI = (id, body) => client.put(`/apikey/${id}`, body)\r\n\r\nconst deleteAPI = (id) => client.delete(`/apikey/${id}`)\r\n\r\nexport default {\r\n    getAllAPIKeys,\r\n    createNewAPI,\r\n    updateAPI,\r\n    deleteAPI\r\n}\r\n","import client from './client'\r\n\r\nconst getAllChatflows = () => client.get('/chatflows')\r\n\r\nconst getSpecificChatflow = (id) => client.get(`/chatflows/${id}`)\r\n\r\nconst getSpecificChatflowFromPublicEndpoint = (id) => client.get(`/public-chatflows/${id}`)\r\n\r\nconst createNewChatflow = (body) => client.post(`/chatflows`, body)\r\n\r\nconst updateChatflow = (id, body) => client.put(`/chatflows/${id}`, body)\r\n\r\nconst deleteChatflow = (id) => client.delete(`/chatflows/${id}`)\r\n\r\nconst getIsChatflowStreaming = (id) => client.get(`/chatflows-streaming/${id}`)\r\n\r\nexport default {\r\n    getAllChatflows,\r\n    getSpecificChatflow,\r\n    getSpecificChatflowFromPublicEndpoint,\r\n    createNewChatflow,\r\n    updateChatflow,\r\n    deleteChatflow,\r\n    getIsChatflowStreaming\r\n}\r\n","import { createPortal } from 'react-dom'\r\nimport { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Button, Dialog, DialogActions, DialogContent, OutlinedInput, DialogTitle } from '@mui/material'\r\nimport { StyledButton } from 'ui-component/button/StyledButton'\r\n\r\nconst SaveChatflowDialog = ({ show, dialogProps, onCancel, onConfirm }) => {\r\n    const portalElement = document.getElementById('portal')\r\n\r\n    const [chatflowName, setChatflowName] = useState('')\r\n    const [isReadyToSave, setIsReadyToSave] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (chatflowName) setIsReadyToSave(true)\r\n        else setIsReadyToSave(false)\r\n    }, [chatflowName])\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            fullWidth\r\n            maxWidth='xs'\r\n            onClose={onCancel}\r\n            aria-labelledby='alert-dialog-title'\r\n            aria-describedby='alert-dialog-description'\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <OutlinedInput\r\n                    sx={{ mt: 1 }}\r\n                    id='chatflow-name'\r\n                    type='text'\r\n                    fullWidth\r\n                    placeholder='My New Chatflow'\r\n                    value={chatflowName}\r\n                    onChange={(e) => setChatflowName(e.target.value)}\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onCancel}>{dialogProps.cancelButtonName}</Button>\r\n                <StyledButton disabled={!isReadyToSave} variant='contained' onClick={() => onConfirm(chatflowName)}>\r\n                    {dialogProps.confirmButtonName}\r\n                </StyledButton>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nSaveChatflowDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onConfirm: PropTypes.func\r\n}\r\n\r\nexport default SaveChatflowDialog\r\n","import { useCallback, useContext, useEffect } from 'react'\r\nimport { UNSAFE_NavigationContext as NavigationContext } from 'react-router-dom'\r\n\r\n// https://stackoverflow.com/questions/71572678/react-router-v-6-useprompt-typescript\r\n\r\nexport function useBlocker(blocker, when = true) {\r\n    const { navigator } = useContext(NavigationContext)\r\n\r\n    useEffect(() => {\r\n        if (!when) return\r\n\r\n        const unblock = navigator.block((tx) => {\r\n            const autoUnblockingTx = {\r\n                ...tx,\r\n                retry() {\r\n                    unblock()\r\n                    tx.retry()\r\n                }\r\n            }\r\n\r\n            blocker(autoUnblockingTx)\r\n        })\r\n\r\n        return unblock\r\n    }, [navigator, blocker, when])\r\n}\r\n\r\nexport function usePrompt(message, when = true) {\r\n    const blocker = useCallback(\r\n        (tx) => {\r\n            if (window.confirm(message)) tx.retry()\r\n        },\r\n        [message]\r\n    )\r\n\r\n    useBlocker(blocker, when)\r\n}\r\n","import PropTypes from 'prop-types'\r\nimport { TableContainer, Table, TableHead, TableCell, TableRow, TableBody, Paper } from '@mui/material'\r\n\r\nexport const TableViewOnly = ({ columns, rows, sx }) => {\r\n    return (\r\n        <>\r\n            <TableContainer component={Paper}>\r\n                <Table sx={{ minWidth: 650, ...sx }} aria-label='simple table'>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {columns.map((col, index) => (\r\n                                <TableCell key={index}>{col.charAt(0).toUpperCase() + col.slice(1)}</TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows.map((row, index) => (\r\n                            <TableRow key={index} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>\r\n                                {Object.keys(row).map((key, index) => (\r\n                                    <TableCell key={index}>{row[key]}</TableCell>\r\n                                ))}\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nTableViewOnly.propTypes = {\r\n    rows: PropTypes.array,\r\n    columns: PropTypes.array,\r\n    sx: PropTypes.object\r\n}\r\n","import client from './client'\r\n\r\nconst getConfig = (id) => client.get(`/flow-config/${id}`)\r\nconst getNodeConfig = (body) => client.post(`/node-config`, body)\r\n\r\nexport default {\r\n    getConfig,\r\n    getNodeConfig\r\n}\r\n","import { createPortal } from 'react-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// Material\r\nimport { Dialog, DialogContent, DialogTitle } from '@mui/material'\r\nimport { TableViewOnly } from 'ui-component/table/Table'\r\n\r\n// Store\r\nimport { HIDE_CANVAS_DIALOG, SHOW_CANVAS_DIALOG } from 'store/actions'\r\nimport { baseURL } from 'store/constant'\r\n\r\n// API\r\nimport configApi from 'api/config'\r\nimport useApi from 'hooks/useApi'\r\n\r\nconst NodeInfoDialog = ({ show, dialogProps, onCancel }) => {\r\n    const portalElement = document.getElementById('portal')\r\n    const dispatch = useDispatch()\r\n\r\n    const getNodeConfigApi = useApi(configApi.getNodeConfig)\r\n\r\n    useEffect(() => {\r\n        if (dialogProps.data) {\r\n            getNodeConfigApi.request(dialogProps.data)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [dialogProps])\r\n\r\n    useEffect(() => {\r\n        if (show) dispatch({ type: SHOW_CANVAS_DIALOG })\r\n        else dispatch({ type: HIDE_CANVAS_DIALOG })\r\n        return () => dispatch({ type: HIDE_CANVAS_DIALOG })\r\n    }, [show, dispatch])\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            onClose={onCancel}\r\n            open={show}\r\n            fullWidth\r\n            maxWidth='md'\r\n            aria-labelledby='alert-dialog-title'\r\n            aria-describedby='alert-dialog-description'\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\r\n                {dialogProps.data && dialogProps.data.name && dialogProps.data.label && (\r\n                    <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                        <div\r\n                            style={{\r\n                                width: 50,\r\n                                height: 50,\r\n                                marginRight: 10,\r\n                                borderRadius: '50%',\r\n                                backgroundColor: 'white'\r\n                            }}\r\n                        >\r\n                            <img\r\n                                style={{\r\n                                    width: '100%',\r\n                                    height: '100%',\r\n                                    padding: 7,\r\n                                    borderRadius: '50%',\r\n                                    objectFit: 'contain'\r\n                                }}\r\n                                alt={dialogProps.data.name}\r\n                                src={`${baseURL}/api/v1/node-icon/${dialogProps.data.name}`}\r\n                            />\r\n                        </div>\r\n                        <div style={{ display: 'flex', flexDirection: 'column', marginLeft: 10 }}>\r\n                            {dialogProps.data.label}\r\n                            <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                                <div\r\n                                    style={{\r\n                                        display: 'flex',\r\n                                        flexDirection: 'row',\r\n                                        width: 'max-content',\r\n                                        borderRadius: 15,\r\n                                        background: 'rgb(254,252,191)',\r\n                                        padding: 5,\r\n                                        paddingLeft: 10,\r\n                                        paddingRight: 10,\r\n                                        marginTop: 5,\r\n                                        marginBottom: 5\r\n                                    }}\r\n                                >\r\n                                    <span style={{ color: 'rgb(116,66,16)', fontSize: '0.825rem' }}>{dialogProps.data.id}</span>\r\n                                </div>\r\n                                {dialogProps.data.version && (\r\n                                    <div\r\n                                        style={{\r\n                                            display: 'flex',\r\n                                            flexDirection: 'row',\r\n                                            width: 'max-content',\r\n                                            borderRadius: 15,\r\n                                            background: '#e9edc9',\r\n                                            padding: 5,\r\n                                            paddingLeft: 10,\r\n                                            paddingRight: 10,\r\n                                            marginTop: 5,\r\n                                            marginLeft: 10,\r\n                                            marginBottom: 5\r\n                                        }}\r\n                                    >\r\n                                        <span style={{ color: '#606c38', fontSize: '0.825rem' }}>version {dialogProps.data.version}</span>\r\n                                    </div>\r\n                                )}\r\n                                {dialogProps.data.badge && (\r\n                                    <div\r\n                                        style={{\r\n                                            display: 'flex',\r\n                                            flexDirection: 'row',\r\n                                            width: 'max-content',\r\n                                            borderRadius: 15,\r\n                                            background: dialogProps.data.badge === 'DEPRECATING' ? '#ffe57f' : '#52b69a',\r\n                                            padding: 5,\r\n                                            paddingLeft: 10,\r\n                                            paddingRight: 10,\r\n                                            marginTop: 5,\r\n                                            marginLeft: 10,\r\n                                            marginBottom: 5\r\n                                        }}\r\n                                    >\r\n                                        <span\r\n                                            style={{\r\n                                                color: dialogProps.data.badge !== 'DEPRECATING' ? 'white' : 'inherit',\r\n                                                fontSize: '0.825rem'\r\n                                            }}\r\n                                        >\r\n                                            {dialogProps.data.badge}\r\n                                        </span>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                {dialogProps.data?.description && (\r\n                    <div\r\n                        style={{\r\n                            padding: 10,\r\n                            marginBottom: 10\r\n                        }}\r\n                    >\r\n                        <span>{dialogProps.data.description}</span>\r\n                    </div>\r\n                )}\r\n                {getNodeConfigApi.data && getNodeConfigApi.data.length > 0 && (\r\n                    <TableViewOnly\r\n                        rows={getNodeConfigApi.data.map((obj) => {\r\n                            // eslint-disable-next-line\r\n                            const { node, nodeId, ...rest } = obj\r\n                            return rest\r\n                        })}\r\n                        columns={Object.keys(getNodeConfigApi.data[0]).slice(-3)}\r\n                    />\r\n                )}\r\n            </DialogContent>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nNodeInfoDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func\r\n}\r\n\r\nexport default NodeInfoDialog\r\n","import PropTypes from 'prop-types'\r\nimport { useContext, useState, useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\n// material-ui\r\nimport { styled, useTheme } from '@mui/material/styles'\r\nimport { IconButton, Box, Typography, Divider, Button } from '@mui/material'\r\nimport Tooltip, { tooltipClasses } from '@mui/material/Tooltip'\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard'\r\nimport NodeInputHandler from './NodeInputHandler'\r\nimport NodeOutputHandler from './NodeOutputHandler'\r\nimport AdditionalParamsDialog from 'ui-component/dialog/AdditionalParamsDialog'\r\nimport NodeInfoDialog from 'ui-component/dialog/NodeInfoDialog'\r\n\r\n// const\r\nimport { baseURL } from 'store/constant'\r\nimport { IconTrash, IconCopy, IconInfoCircle, IconAlertTriangle } from '@tabler/icons'\r\nimport { flowContext } from 'store/context/ReactFlowContext'\r\n\r\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\r\n    background: theme.palette.card.main,\r\n    color: theme.darkTextPrimary,\r\n    border: 'solid 1px',\r\n    borderColor: theme.palette.primary[200] + 75,\r\n    width: '300px',\r\n    height: 'auto',\r\n    padding: '10px',\r\n    boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\r\n    '&:hover': {\r\n        borderColor: theme.palette.primary.main\r\n    }\r\n}))\r\n\r\nconst LightTooltip = styled(({ className, ...props }) => <Tooltip {...props} classes={{ popper: className }} />)(({ theme }) => ({\r\n    [`& .${tooltipClasses.tooltip}`]: {\r\n        backgroundColor: theme.palette.nodeToolTip.background,\r\n        color: theme.palette.nodeToolTip.color,\r\n        boxShadow: theme.shadows[1]\r\n    }\r\n}))\r\n\r\n// ===========================|| CANVAS NODE ||=========================== //\r\n\r\nconst CanvasNode = ({ data }) => {\r\n    const theme = useTheme()\r\n    const canvas = useSelector((state) => state.canvas)\r\n    const { deleteNode, duplicateNode } = useContext(flowContext)\r\n\r\n    const [showDialog, setShowDialog] = useState(false)\r\n    const [dialogProps, setDialogProps] = useState({})\r\n    const [showInfoDialog, setShowInfoDialog] = useState(false)\r\n    const [infoDialogProps, setInfoDialogProps] = useState({})\r\n    const [warningMessage, setWarningMessage] = useState('')\r\n    const [open, setOpen] = useState(false)\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true)\r\n    }\r\n\r\n    const nodeOutdatedMessage = (oldVersion, newVersion) => `Node version ${oldVersion} outdated\\nUpdate to latest version ${newVersion}`\r\n\r\n    const nodeVersionEmptyMessage = (newVersion) => `Node outdated\\nUpdate to latest version ${newVersion}`\r\n\r\n    const onDialogClicked = () => {\r\n        const dialogProps = {\r\n            data,\r\n            inputParams: data.inputParams.filter((param) => param.additionalParams),\r\n            confirmButtonName: 'Save',\r\n            cancelButtonName: 'Cancel'\r\n        }\r\n        setDialogProps(dialogProps)\r\n        setShowDialog(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const componentNode = canvas.componentNodes.find((nd) => nd.name === data.name)\r\n        if (componentNode) {\r\n            if (!data.version) {\r\n                setWarningMessage(nodeVersionEmptyMessage(componentNode.version))\r\n            } else if (data.version && componentNode.version > data.version) {\r\n                setWarningMessage(nodeOutdatedMessage(data.version, componentNode.version))\r\n            } else if (componentNode.badge === 'DEPRECATING') {\r\n                setWarningMessage('This node will be deprecated in the next release. Change to a new node tagged with NEW')\r\n            }\r\n        }\r\n    }, [canvas.componentNodes, data.name, data.version])\r\n\r\n    return (\r\n        <>\r\n            <CardWrapper\r\n                content={false}\r\n                sx={{\r\n                    padding: 0,\r\n                    borderColor: data.selected ? theme.palette.primary.main : theme.palette.text.secondary\r\n                }}\r\n                border={false}\r\n            >\r\n                <LightTooltip\r\n                    open={!canvas.canvasDialogShow && open}\r\n                    onClose={handleClose}\r\n                    onOpen={handleOpen}\r\n                    disableFocusListener={true}\r\n                    title={\r\n                        <div\r\n                            style={{\r\n                                background: 'transparent',\r\n                                display: 'flex',\r\n                                flexDirection: 'column'\r\n                            }}\r\n                        >\r\n                            <IconButton\r\n                                title='Duplicate'\r\n                                onClick={() => {\r\n                                    duplicateNode(data.id)\r\n                                }}\r\n                                sx={{ height: '35px', width: '35px', '&:hover': { color: theme?.palette.primary.main } }}\r\n                                color={theme?.customization?.isDarkMode ? theme.colors?.paper : 'inherit'}\r\n                            >\r\n                                <IconCopy />\r\n                            </IconButton>\r\n                            <IconButton\r\n                                title='Delete'\r\n                                onClick={() => {\r\n                                    deleteNode(data.id)\r\n                                }}\r\n                                sx={{ height: '35px', width: '35px', '&:hover': { color: 'red' } }}\r\n                                color={theme?.customization?.isDarkMode ? theme.colors?.paper : 'inherit'}\r\n                            >\r\n                                <IconTrash />\r\n                            </IconButton>\r\n                            <IconButton\r\n                                title='Info'\r\n                                onClick={() => {\r\n                                    setInfoDialogProps({ data })\r\n                                    setShowInfoDialog(true)\r\n                                }}\r\n                                sx={{ height: '35px', width: '35px', '&:hover': { color: theme?.palette.secondary.main } }}\r\n                                color={theme?.customization?.isDarkMode ? theme.colors?.paper : 'inherit'}\r\n                            >\r\n                                <IconInfoCircle />\r\n                            </IconButton>\r\n                        </div>\r\n                    }\r\n                    placement='right-start'\r\n                >\r\n                    <Box>\r\n                        <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                            <Box style={{ width: 50, marginRight: 10, padding: 5 }}>\r\n                                <div\r\n                                    style={{\r\n                                        ...theme.typography.commonAvatar,\r\n                                        ...theme.typography.largeAvatar,\r\n                                        borderRadius: '50%',\r\n                                        backgroundColor: 'white',\r\n                                        cursor: 'grab'\r\n                                    }}\r\n                                >\r\n                                    <img\r\n                                        style={{ width: '100%', height: '100%', padding: 5, objectFit: 'contain' }}\r\n                                        src={`${baseURL}/api/v1/node-icon/${data.name}`}\r\n                                        alt='Notification'\r\n                                    />\r\n                                </div>\r\n                            </Box>\r\n                            <Box>\r\n                                <Typography\r\n                                    sx={{\r\n                                        fontSize: '1rem',\r\n                                        fontWeight: 500,\r\n                                        mr: 2\r\n                                    }}\r\n                                >\r\n                                    {data.label}\r\n                                </Typography>\r\n                            </Box>\r\n                            {warningMessage && (\r\n                                <>\r\n                                    <div style={{ flexGrow: 1 }}></div>\r\n                                    <Tooltip title={<span style={{ whiteSpace: 'pre-line' }}>{warningMessage}</span>} placement='top'>\r\n                                        <IconButton sx={{ height: 35, width: 35 }}>\r\n                                            <IconAlertTriangle size={35} color='orange' />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                </>\r\n                            )}\r\n                        </div>\r\n                        {(data.inputAnchors.length > 0 || data.inputParams.length > 0) && (\r\n                            <>\r\n                                <Divider />\r\n                                <Box sx={{ background: theme.palette.asyncSelect.main, p: 1 }}>\r\n                                    <Typography\r\n                                        sx={{\r\n                                            fontWeight: 500,\r\n                                            textAlign: 'center'\r\n                                        }}\r\n                                    >\r\n                                        Inputs\r\n                                    </Typography>\r\n                                </Box>\r\n                                <Divider />\r\n                            </>\r\n                        )}\r\n                        {data.inputAnchors.map((inputAnchor, index) => (\r\n                            <NodeInputHandler key={index} inputAnchor={inputAnchor} data={data} />\r\n                        ))}\r\n                        {data.inputParams\r\n                            .filter((inputParam) => !inputParam.hidden)\r\n                            .map((inputParam, index) => (\r\n                                <NodeInputHandler key={index} inputParam={inputParam} data={data} />\r\n                            ))}\r\n                        {data.inputParams.find((param) => param.additionalParams) && (\r\n                            <div\r\n                                style={{\r\n                                    textAlign: 'center',\r\n                                    marginTop:\r\n                                        data.inputParams.filter((param) => param.additionalParams).length ===\r\n                                        data.inputParams.length + data.inputAnchors.length\r\n                                            ? 20\r\n                                            : 0\r\n                                }}\r\n                            >\r\n                                <Button sx={{ borderRadius: 25, width: '90%', mb: 2 }} variant='outlined' onClick={onDialogClicked}>\r\n                                    Additional Parameters\r\n                                </Button>\r\n                            </div>\r\n                        )}\r\n                        <Divider />\r\n                        <Box sx={{ background: theme.palette.asyncSelect.main, p: 1 }}>\r\n                            <Typography\r\n                                sx={{\r\n                                    fontWeight: 500,\r\n                                    textAlign: 'center'\r\n                                }}\r\n                            >\r\n                                Output\r\n                            </Typography>\r\n                        </Box>\r\n                        <Divider />\r\n\r\n                        {data.outputAnchors.map((outputAnchor, index) => (\r\n                            <NodeOutputHandler key={index} outputAnchor={outputAnchor} data={data} />\r\n                        ))}\r\n                    </Box>\r\n                </LightTooltip>\r\n            </CardWrapper>\r\n            <AdditionalParamsDialog\r\n                show={showDialog}\r\n                dialogProps={dialogProps}\r\n                onCancel={() => setShowDialog(false)}\r\n            ></AdditionalParamsDialog>\r\n            <NodeInfoDialog show={showInfoDialog} dialogProps={infoDialogProps} onCancel={() => setShowInfoDialog(false)}></NodeInfoDialog>\r\n        </>\r\n    )\r\n}\r\n\r\nCanvasNode.propTypes = {\r\n    data: PropTypes.object\r\n}\r\n\r\nexport default CanvasNode\r\n","import { getBezierPath, EdgeText } from 'reactflow'\r\nimport PropTypes from 'prop-types'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useContext } from 'react'\r\nimport { SET_DIRTY } from 'store/actions'\r\nimport { flowContext } from 'store/context/ReactFlowContext'\r\n\r\nimport './index.css'\r\n\r\nconst foreignObjectSize = 40\r\n\r\nconst ButtonEdge = ({ id, sourceX, sourceY, targetX, targetY, sourcePosition, targetPosition, style = {}, data, markerEnd }) => {\r\n    const [edgePath, edgeCenterX, edgeCenterY] = getBezierPath({\r\n        sourceX,\r\n        sourceY,\r\n        sourcePosition,\r\n        targetX,\r\n        targetY,\r\n        targetPosition\r\n    })\r\n\r\n    const { deleteEdge } = useContext(flowContext)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onEdgeClick = (evt, id) => {\r\n        evt.stopPropagation()\r\n        deleteEdge(id)\r\n        dispatch({ type: SET_DIRTY })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <path id={id} style={style} className='react-flow__edge-path' d={edgePath} markerEnd={markerEnd} />\r\n            {data && data.label && (\r\n                <EdgeText\r\n                    x={sourceX + 10}\r\n                    y={sourceY + 10}\r\n                    label={data.label}\r\n                    labelStyle={{ fill: 'black' }}\r\n                    labelBgStyle={{ fill: 'transparent' }}\r\n                    labelBgPadding={[2, 4]}\r\n                    labelBgBorderRadius={2}\r\n                />\r\n            )}\r\n            <foreignObject\r\n                width={foreignObjectSize}\r\n                height={foreignObjectSize}\r\n                x={edgeCenterX - foreignObjectSize / 2}\r\n                y={edgeCenterY - foreignObjectSize / 2}\r\n                className='edgebutton-foreignobject'\r\n                requiredExtensions='http://www.w3.org/1999/xhtml'\r\n            >\r\n                <div>\r\n                    <button className='edgebutton' onClick={(event) => onEdgeClick(event, id)}>\r\n                        ×\r\n                    </button>\r\n                </div>\r\n            </foreignObject>\r\n        </>\r\n    )\r\n}\r\n\r\nButtonEdge.propTypes = {\r\n    id: PropTypes.string,\r\n    sourceX: PropTypes.number,\r\n    sourceY: PropTypes.number,\r\n    targetX: PropTypes.number,\r\n    targetY: PropTypes.number,\r\n    sourcePosition: PropTypes.any,\r\n    targetPosition: PropTypes.any,\r\n    style: PropTypes.object,\r\n    data: PropTypes.object,\r\n    markerEnd: PropTypes.any\r\n}\r\n\r\nexport default ButtonEdge\r\n","// assets\r\nimport { IconTrash, IconFileUpload, IconFileExport, IconCopy, IconSearch, IconMessage } from '@tabler/icons'\r\n\r\n// constant\r\nconst icons = { IconTrash, IconFileUpload, IconFileExport, IconCopy, IconSearch, IconMessage }\r\n\r\n// ==============================|| SETTINGS MENU ITEMS ||============================== //\r\n\r\nconst settings = {\r\n    id: 'settings',\r\n    title: '',\r\n    type: 'group',\r\n    children: [\r\n        {\r\n            id: 'viewMessages',\r\n            title: 'View Messages',\r\n            type: 'item',\r\n            url: '',\r\n            icon: icons.IconMessage\r\n        },\r\n        {\r\n            id: 'duplicateChatflow',\r\n            title: 'Duplicate Chatflow',\r\n            type: 'item',\r\n            url: '',\r\n            icon: icons.IconCopy\r\n        },\r\n        {\r\n            id: 'loadChatflow',\r\n            title: 'Load Chatflow',\r\n            type: 'item',\r\n            url: '',\r\n            icon: icons.IconFileUpload\r\n        },\r\n        {\r\n            id: 'exportChatflow',\r\n            title: 'Export Chatflow',\r\n            type: 'item',\r\n            url: '',\r\n            icon: icons.IconFileExport\r\n        },\r\n        {\r\n            id: 'analyseChatflow',\r\n            title: 'Analyse Chatflow',\r\n            type: 'item',\r\n            url: '',\r\n            icon: icons.IconSearch\r\n        },\r\n        {\r\n            id: 'deleteChatflow',\r\n            title: 'Delete Chatflow',\r\n            type: 'item',\r\n            url: '',\r\n            icon: icons.IconTrash\r\n        }\r\n    ]\r\n}\r\n\r\nexport default settings\r\n","import { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles'\r\nimport { Box, List, Paper, Popper, ClickAwayListener } from '@mui/material'\r\n\r\n// third-party\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard'\r\nimport Transitions from 'ui-component/extended/Transitions'\r\nimport NavItem from 'layout/MainLayout/Sidebar/MenuList/NavItem'\r\n\r\nimport settings from 'menu-items/settings'\r\n\r\n// ==============================|| SETTINGS ||============================== //\r\n\r\nconst Settings = ({ chatflow, isSettingsOpen, anchorEl, onSettingsItemClick, onUploadFile, onClose }) => {\r\n    const theme = useTheme()\r\n    const [settingsMenu, setSettingsMenu] = useState([])\r\n\r\n    const [open, setOpen] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (chatflow && !chatflow.id) {\r\n            const settingsMenu = settings.children.filter((menu) => menu.id === 'loadChatflow')\r\n            setSettingsMenu(settingsMenu)\r\n        } else if (chatflow && chatflow.id) {\r\n            const settingsMenu = settings.children\r\n            setSettingsMenu(settingsMenu)\r\n        }\r\n    }, [chatflow])\r\n\r\n    useEffect(() => {\r\n        setOpen(isSettingsOpen)\r\n    }, [isSettingsOpen])\r\n\r\n    // settings list items\r\n    const items = settingsMenu.map((menu) => {\r\n        return (\r\n            <NavItem\r\n                key={menu.id}\r\n                item={menu}\r\n                level={1}\r\n                navType='SETTINGS'\r\n                onClick={(id) => onSettingsItemClick(id)}\r\n                onUploadFile={onUploadFile}\r\n            />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Popper\r\n                placement='bottom-end'\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n                popperOptions={{\r\n                    modifiers: [\r\n                        {\r\n                            name: 'offset',\r\n                            options: {\r\n                                offset: [170, 20]\r\n                            }\r\n                        }\r\n                    ]\r\n                }}\r\n                sx={{ zIndex: 1000 }}\r\n            >\r\n                {({ TransitionProps }) => (\r\n                    <Transitions in={open} {...TransitionProps}>\r\n                        <Paper>\r\n                            <ClickAwayListener onClickAway={onClose}>\r\n                                <MainCard border={false} elevation={16} content={false} boxShadow shadow={theme.shadows[16]}>\r\n                                    <PerfectScrollbar style={{ height: '100%', maxHeight: 'calc(100vh - 250px)', overflowX: 'hidden' }}>\r\n                                        <Box sx={{ p: 2 }}>\r\n                                            <List>{items}</List>\r\n                                        </Box>\r\n                                    </PerfectScrollbar>\r\n                                </MainCard>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Transitions>\r\n                )}\r\n            </Popper>\r\n        </>\r\n    )\r\n}\r\n\r\nSettings.propTypes = {\r\n    chatflow: PropTypes.object,\r\n    isSettingsOpen: PropTypes.bool,\r\n    anchorEl: PropTypes.any,\r\n    onSettingsItemClick: PropTypes.func,\r\n    onUploadFile: PropTypes.func,\r\n    onClose: PropTypes.func\r\n}\r\n\r\nexport default Settings\r\n","import { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction, SET_CHATFLOW } from 'store/actions'\r\nimport { SketchPicker } from 'react-color'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Box, Typography, Button, Switch, OutlinedInput, Popover, Stack, IconButton } from '@mui/material'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\n// Project import\r\nimport { StyledButton } from 'ui-component/button/StyledButton'\r\nimport { TooltipWithParser } from 'ui-component/tooltip/TooltipWithParser'\r\n\r\n// Icons\r\nimport { IconX, IconCopy, IconArrowUpRightCircle } from '@tabler/icons'\r\n\r\n// API\r\nimport chatflowsApi from 'api/chatflows'\r\n\r\n// utils\r\nimport useNotifier from 'utils/useNotifier'\r\n\r\n// Const\r\nimport { baseURL } from 'store/constant'\r\n\r\nconst defaultConfig = {\r\n    backgroundColor: '#ffffff',\r\n    fontSize: 16,\r\n    poweredByTextColor: '#303235',\r\n    botMessage: {\r\n        backgroundColor: '#f7f8ff',\r\n        textColor: '#303235'\r\n    },\r\n    userMessage: {\r\n        backgroundColor: '#3B81F6',\r\n        textColor: '#ffffff'\r\n    },\r\n    textInput: {\r\n        backgroundColor: '#ffffff',\r\n        textColor: '#303235',\r\n        sendButtonColor: '#3B81F6'\r\n    }\r\n}\r\n\r\nconst ShareChatbot = ({ isSessionMemory }) => {\r\n    const dispatch = useDispatch()\r\n    const theme = useTheme()\r\n    const chatflow = useSelector((state) => state.canvas.chatflow)\r\n    const chatflowid = chatflow.id\r\n    const chatbotConfig = chatflow.chatbotConfig ? JSON.parse(chatflow.chatbotConfig) : {}\r\n\r\n    useNotifier()\r\n\r\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\r\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\r\n\r\n    const [isPublicChatflow, setChatflowIsPublic] = useState(chatflow.isPublic ?? false)\r\n    const [generateNewSession, setGenerateNewSession] = useState(chatbotConfig?.generateNewSession ?? false)\r\n\r\n    const [title, setTitle] = useState(chatbotConfig?.title ?? '')\r\n    const [titleAvatarSrc, setTitleAvatarSrc] = useState(chatbotConfig?.titleAvatarSrc ?? '')\r\n\r\n    const [welcomeMessage, setWelcomeMessage] = useState(chatbotConfig?.welcomeMessage ?? '')\r\n    const [backgroundColor, setBackgroundColor] = useState(chatbotConfig?.backgroundColor ?? defaultConfig.backgroundColor)\r\n    const [fontSize, setFontSize] = useState(chatbotConfig?.fontSize ?? defaultConfig.fontSize)\r\n    const [poweredByTextColor, setPoweredByTextColor] = useState(chatbotConfig?.poweredByTextColor ?? defaultConfig.poweredByTextColor)\r\n\r\n    const [botMessageBackgroundColor, setBotMessageBackgroundColor] = useState(\r\n        chatbotConfig?.botMessage?.backgroundColor ?? defaultConfig.botMessage.backgroundColor\r\n    )\r\n    const [botMessageTextColor, setBotMessageTextColor] = useState(\r\n        chatbotConfig?.botMessage?.textColor ?? defaultConfig.botMessage.textColor\r\n    )\r\n    const [botMessageAvatarSrc, setBotMessageAvatarSrc] = useState(chatbotConfig?.botMessage?.avatarSrc ?? '')\r\n    const [botMessageShowAvatar, setBotMessageShowAvatar] = useState(chatbotConfig?.botMessage?.showAvatar ?? false)\r\n\r\n    const [userMessageBackgroundColor, setUserMessageBackgroundColor] = useState(\r\n        chatbotConfig?.userMessage?.backgroundColor ?? defaultConfig.userMessage.backgroundColor\r\n    )\r\n    const [userMessageTextColor, setUserMessageTextColor] = useState(\r\n        chatbotConfig?.userMessage?.textColor ?? defaultConfig.userMessage.textColor\r\n    )\r\n    const [userMessageAvatarSrc, setUserMessageAvatarSrc] = useState(chatbotConfig?.userMessage?.avatarSrc ?? '')\r\n    const [userMessageShowAvatar, setUserMessageShowAvatar] = useState(chatbotConfig?.userMessage?.showAvatar ?? false)\r\n\r\n    const [textInputBackgroundColor, setTextInputBackgroundColor] = useState(\r\n        chatbotConfig?.textInput?.backgroundColor ?? defaultConfig.textInput.backgroundColor\r\n    )\r\n    const [textInputTextColor, setTextInputTextColor] = useState(chatbotConfig?.textInput?.textColor ?? defaultConfig.textInput.textColor)\r\n    const [textInputPlaceholder, setTextInputPlaceholder] = useState(chatbotConfig?.textInput?.placeholder ?? '')\r\n    const [textInputSendButtonColor, setTextInputSendButtonColor] = useState(\r\n        chatbotConfig?.textInput?.sendButtonColor ?? defaultConfig.textInput.sendButtonColor\r\n    )\r\n\r\n    const [colorAnchorEl, setColorAnchorEl] = useState(null)\r\n    const [selectedColorConfig, setSelectedColorConfig] = useState('')\r\n    const [sketchPickerColor, setSketchPickerColor] = useState('')\r\n    const openColorPopOver = Boolean(colorAnchorEl)\r\n\r\n    const [copyAnchorEl, setCopyAnchorEl] = useState(null)\r\n    const openCopyPopOver = Boolean(copyAnchorEl)\r\n\r\n    const formatObj = () => {\r\n        const obj = {\r\n            botMessage: {\r\n                showAvatar: false\r\n            },\r\n            userMessage: {\r\n                showAvatar: false\r\n            },\r\n            textInput: {},\r\n            overrideConfig: {}\r\n        }\r\n        if (title) obj.title = title\r\n        if (titleAvatarSrc) obj.titleAvatarSrc = titleAvatarSrc\r\n        if (welcomeMessage) obj.welcomeMessage = welcomeMessage\r\n        if (backgroundColor) obj.backgroundColor = backgroundColor\r\n        if (fontSize) obj.fontSize = fontSize\r\n        if (poweredByTextColor) obj.poweredByTextColor = poweredByTextColor\r\n\r\n        if (botMessageBackgroundColor) obj.botMessage.backgroundColor = botMessageBackgroundColor\r\n        if (botMessageTextColor) obj.botMessage.textColor = botMessageTextColor\r\n        if (botMessageAvatarSrc) obj.botMessage.avatarSrc = botMessageAvatarSrc\r\n        if (botMessageShowAvatar) obj.botMessage.showAvatar = botMessageShowAvatar\r\n\r\n        if (userMessageBackgroundColor) obj.userMessage.backgroundColor = userMessageBackgroundColor\r\n        if (userMessageTextColor) obj.userMessage.textColor = userMessageTextColor\r\n        if (userMessageAvatarSrc) obj.userMessage.avatarSrc = userMessageAvatarSrc\r\n        if (userMessageShowAvatar) obj.userMessage.showAvatar = userMessageShowAvatar\r\n\r\n        if (textInputBackgroundColor) obj.textInput.backgroundColor = textInputBackgroundColor\r\n        if (textInputTextColor) obj.textInput.textColor = textInputTextColor\r\n        if (textInputPlaceholder) obj.textInput.placeholder = textInputPlaceholder\r\n        if (textInputSendButtonColor) obj.textInput.sendButtonColor = textInputSendButtonColor\r\n\r\n        if (isSessionMemory) obj.overrideConfig.generateNewSession = generateNewSession\r\n\r\n        return obj\r\n    }\r\n\r\n    const onSave = async () => {\r\n        try {\r\n            const saveResp = await chatflowsApi.updateChatflow(chatflowid, {\r\n                chatbotConfig: JSON.stringify(formatObj())\r\n            })\r\n            if (saveResp.data) {\r\n                enqueueSnackbar({\r\n                    message: 'Chatbot Configuration Saved',\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'success',\r\n                        action: (key) => (\r\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        )\r\n                    }\r\n                })\r\n                dispatch({ type: SET_CHATFLOW, chatflow: saveResp.data })\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n            enqueueSnackbar({\r\n                message: `Failed to save Chatbot Configuration: ${errorData}`,\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const onSwitchChange = async (checked) => {\r\n        try {\r\n            const saveResp = await chatflowsApi.updateChatflow(chatflowid, { isPublic: checked })\r\n            if (saveResp.data) {\r\n                enqueueSnackbar({\r\n                    message: 'Chatbot Configuration Saved',\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'success',\r\n                        action: (key) => (\r\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        )\r\n                    }\r\n                })\r\n                dispatch({ type: SET_CHATFLOW, chatflow: saveResp.data })\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n            enqueueSnackbar({\r\n                message: `Failed to save Chatbot Configuration: ${errorData}`,\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleClosePopOver = () => {\r\n        setColorAnchorEl(null)\r\n    }\r\n\r\n    const handleCloseCopyPopOver = () => {\r\n        setCopyAnchorEl(null)\r\n    }\r\n\r\n    const onColorSelected = (hexColor) => {\r\n        switch (selectedColorConfig) {\r\n            case 'backgroundColor':\r\n                setBackgroundColor(hexColor)\r\n                break\r\n            case 'poweredByTextColor':\r\n                setPoweredByTextColor(hexColor)\r\n                break\r\n            case 'botMessageBackgroundColor':\r\n                setBotMessageBackgroundColor(hexColor)\r\n                break\r\n            case 'botMessageTextColor':\r\n                setBotMessageTextColor(hexColor)\r\n                break\r\n            case 'userMessageBackgroundColor':\r\n                setUserMessageBackgroundColor(hexColor)\r\n                break\r\n            case 'userMessageTextColor':\r\n                setUserMessageTextColor(hexColor)\r\n                break\r\n            case 'textInputBackgroundColor':\r\n                setTextInputBackgroundColor(hexColor)\r\n                break\r\n            case 'textInputTextColor':\r\n                setTextInputTextColor(hexColor)\r\n                break\r\n            case 'textInputSendButtonColor':\r\n                setTextInputSendButtonColor(hexColor)\r\n                break\r\n        }\r\n        setSketchPickerColor(hexColor)\r\n    }\r\n\r\n    const onTextChanged = (value, fieldName) => {\r\n        switch (fieldName) {\r\n            case 'title':\r\n                setTitle(value)\r\n                break\r\n            case 'titleAvatarSrc':\r\n                setTitleAvatarSrc(value)\r\n                break\r\n            case 'welcomeMessage':\r\n                setWelcomeMessage(value)\r\n                break\r\n            case 'fontSize':\r\n                setFontSize(value)\r\n                break\r\n            case 'botMessageAvatarSrc':\r\n                setBotMessageAvatarSrc(value)\r\n                break\r\n            case 'userMessageAvatarSrc':\r\n                setUserMessageAvatarSrc(value)\r\n                break\r\n            case 'textInputPlaceholder':\r\n                setTextInputPlaceholder(value)\r\n                break\r\n        }\r\n    }\r\n\r\n    const onBooleanChanged = (value, fieldName) => {\r\n        switch (fieldName) {\r\n            case 'botMessageShowAvatar':\r\n                setBotMessageShowAvatar(value)\r\n                break\r\n            case 'userMessageShowAvatar':\r\n                setUserMessageShowAvatar(value)\r\n                break\r\n            case 'generateNewSession':\r\n                setGenerateNewSession(value)\r\n                break\r\n        }\r\n    }\r\n\r\n    const colorField = (color, fieldName, fieldLabel) => {\r\n        return (\r\n            <Box sx={{ pt: 2, pb: 2 }}>\r\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\r\n                    <Typography sx={{ mb: 1 }}>{fieldLabel}</Typography>\r\n                    <Box\r\n                        sx={{\r\n                            cursor: 'pointer',\r\n                            width: '30px',\r\n                            height: '30px',\r\n                            border: '1px solid #616161',\r\n                            marginRight: '10px',\r\n                            backgroundColor: color ?? '#ffffff',\r\n                            borderRadius: '5px'\r\n                        }}\r\n                        onClick={(event) => {\r\n                            setSelectedColorConfig(fieldName)\r\n                            setSketchPickerColor(color ?? '#ffffff')\r\n                            setColorAnchorEl(event.currentTarget)\r\n                        }}\r\n                    ></Box>\r\n                </div>\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    const booleanField = (value, fieldName, fieldLabel) => {\r\n        return (\r\n            <Box sx={{ pt: 2, pb: 2 }}>\r\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\r\n                    <Typography sx={{ mb: 1 }}>{fieldLabel}</Typography>\r\n                    <Switch\r\n                        id={fieldName}\r\n                        checked={value}\r\n                        onChange={(event) => {\r\n                            onBooleanChanged(event.target.checked, fieldName)\r\n                        }}\r\n                    />\r\n                </div>\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    const textField = (message, fieldName, fieldLabel, fieldType = 'string', placeholder = '') => {\r\n        return (\r\n            <Box sx={{ pt: 2, pb: 2 }}>\r\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\r\n                    <Typography sx={{ mb: 1 }}>{fieldLabel}</Typography>\r\n                    <OutlinedInput\r\n                        id={fieldName}\r\n                        type={fieldType}\r\n                        fullWidth\r\n                        value={message}\r\n                        placeholder={placeholder}\r\n                        name={fieldName}\r\n                        onChange={(e) => {\r\n                            onTextChanged(e.target.value, fieldName)\r\n                        }}\r\n                    />\r\n                </div>\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Stack direction='row'>\r\n                <Typography\r\n                    sx={{\r\n                        p: 1,\r\n                        borderRadius: 10,\r\n                        backgroundColor: theme.palette.primary.light,\r\n                        width: 'max-content',\r\n                        height: 'max-content'\r\n                    }}\r\n                    variant='h5'\r\n                >\r\n                    {`${baseURL}/chatbot/${chatflowid}`}\r\n                </Typography>\r\n                <IconButton\r\n                    title='Copy Link'\r\n                    color='success'\r\n                    onClick={(event) => {\r\n                        navigator.clipboard.writeText(`${baseURL}/chatbot/${chatflowid}`)\r\n                        setCopyAnchorEl(event.currentTarget)\r\n                        setTimeout(() => {\r\n                            handleCloseCopyPopOver()\r\n                        }, 1500)\r\n                    }}\r\n                >\r\n                    <IconCopy />\r\n                </IconButton>\r\n                <IconButton title='Open New Tab' color='primary' onClick={() => window.open(`${baseURL}/chatbot/${chatflowid}`, '_blank')}>\r\n                    <IconArrowUpRightCircle />\r\n                </IconButton>\r\n                <div style={{ flex: 1 }} />\r\n                <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                    <Switch\r\n                        checked={isPublicChatflow}\r\n                        onChange={(event) => {\r\n                            setChatflowIsPublic(event.target.checked)\r\n                            onSwitchChange(event.target.checked)\r\n                        }}\r\n                    />\r\n                    <Typography>Make Public</Typography>\r\n                    <TooltipWithParser\r\n                        style={{ marginLeft: 10 }}\r\n                        title={'Making public will allow anyone to access the chatbot without username & password'}\r\n                    />\r\n                </div>\r\n            </Stack>\r\n            {textField(title, 'title', 'Title', 'string', 'Flowise Assistant')}\r\n            {textField(\r\n                titleAvatarSrc,\r\n                'titleAvatarSrc',\r\n                'Title Avatar Link',\r\n                'string',\r\n                `https://raw.githubusercontent.com/FlowiseAI/Flowise/main/assets/FloWiseAI_dark.png`\r\n            )}\r\n            {textField(welcomeMessage, 'welcomeMessage', 'Welcome Message', 'string', 'Hello! This is custom welcome message')}\r\n            {colorField(backgroundColor, 'backgroundColor', 'Background Color')}\r\n            {textField(fontSize, 'fontSize', 'Font Size', 'number')}\r\n            {colorField(poweredByTextColor, 'poweredByTextColor', 'PoweredBy TextColor')}\r\n\r\n            {/*BOT Message*/}\r\n            <Typography variant='h4' sx={{ mb: 1, mt: 2 }}>\r\n                Bot Message\r\n            </Typography>\r\n            {colorField(botMessageBackgroundColor, 'botMessageBackgroundColor', 'Background Color')}\r\n            {colorField(botMessageTextColor, 'botMessageTextColor', 'Text Color')}\r\n            {textField(\r\n                botMessageAvatarSrc,\r\n                'botMessageAvatarSrc',\r\n                'Avatar Link',\r\n                'string',\r\n                `https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/parroticon.png`\r\n            )}\r\n            {booleanField(botMessageShowAvatar, 'botMessageShowAvatar', 'Show Avatar')}\r\n\r\n            {/*USER Message*/}\r\n            <Typography variant='h4' sx={{ mb: 1, mt: 2 }}>\r\n                User Message\r\n            </Typography>\r\n            {colorField(userMessageBackgroundColor, 'userMessageBackgroundColor', 'Background Color')}\r\n            {colorField(userMessageTextColor, 'userMessageTextColor', 'Text Color')}\r\n            {textField(\r\n                userMessageAvatarSrc,\r\n                'userMessageAvatarSrc',\r\n                'Avatar Link',\r\n                'string',\r\n                `https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/usericon.png`\r\n            )}\r\n            {booleanField(userMessageShowAvatar, 'userMessageShowAvatar', 'Show Avatar')}\r\n\r\n            {/*TEXT Input*/}\r\n            <Typography variant='h4' sx={{ mb: 1, mt: 2 }}>\r\n                Text Input\r\n            </Typography>\r\n            {colorField(textInputBackgroundColor, 'textInputBackgroundColor', 'Background Color')}\r\n            {colorField(textInputTextColor, 'textInputTextColor', 'Text Color')}\r\n            {textField(textInputPlaceholder, 'textInputPlaceholder', 'TextInput Placeholder', 'string', `Type question..`)}\r\n            {colorField(textInputSendButtonColor, 'textInputSendButtonColor', 'TextIntput Send Button Color')}\r\n\r\n            {/*Session Memory Input*/}\r\n            {isSessionMemory && (\r\n                <>\r\n                    <Typography variant='h4' sx={{ mb: 1, mt: 2 }}>\r\n                        Session Memory\r\n                    </Typography>\r\n                    {booleanField(generateNewSession, 'generateNewSession', 'Start new session when chatbot link is opened or refreshed')}\r\n                </>\r\n            )}\r\n\r\n            <StyledButton style={{ marginBottom: 10, marginTop: 10 }} variant='contained' onClick={() => onSave()}>\r\n                Save Changes\r\n            </StyledButton>\r\n            <Popover\r\n                open={openColorPopOver}\r\n                anchorEl={colorAnchorEl}\r\n                onClose={handleClosePopOver}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'right'\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left'\r\n                }}\r\n            >\r\n                <SketchPicker color={sketchPickerColor} onChange={(color) => onColorSelected(color.hex)} />\r\n            </Popover>\r\n            <Popover\r\n                open={openCopyPopOver}\r\n                anchorEl={copyAnchorEl}\r\n                onClose={handleCloseCopyPopOver}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'right'\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left'\r\n                }}\r\n            >\r\n                <Typography variant='h6' sx={{ pl: 1, pr: 1, color: 'white', background: theme.palette.success.dark }}>\r\n                    Copied!\r\n                </Typography>\r\n            </Popover>\r\n        </>\r\n    )\r\n}\r\n\r\nShareChatbot.propTypes = {\r\n    isSessionMemory: PropTypes.bool\r\n}\r\n\r\nexport default ShareChatbot\r\n","import { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { FormControlLabel, Checkbox } from '@mui/material'\r\n\r\nexport const CheckboxInput = ({ value, label, onChange, disabled = false }) => {\r\n    const [myValue, setMyValue] = useState(value)\r\n\r\n    return (\r\n        <>\r\n            <FormControlLabel\r\n                sx={{ mt: 1, width: '100%' }}\r\n                size='small'\r\n                control={\r\n                    <Checkbox\r\n                        disabled={disabled}\r\n                        checked={myValue}\r\n                        onChange={(event) => {\r\n                            setMyValue(event.target.checked)\r\n                            onChange(event.target.checked)\r\n                        }}\r\n                    />\r\n                }\r\n                label={label}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nCheckboxInput.propTypes = {\r\n    value: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    disabled: PropTypes.bool\r\n}\r\n","import { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Tabs, Tab, Box } from '@mui/material'\r\nimport { CopyBlock, atomOneDark } from 'react-code-blocks'\r\n\r\n// Project import\r\nimport { CheckboxInput } from 'ui-component/checkbox/Checkbox'\r\n\r\n// Const\r\nimport { baseURL } from 'store/constant'\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props\r\n    return (\r\n        <div\r\n            role='tabpanel'\r\n            hidden={value !== index}\r\n            id={`attachment-tabpanel-${index}`}\r\n            aria-labelledby={`attachment-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && <Box sx={{ p: 1 }}>{children}</Box>}\r\n        </div>\r\n    )\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.number.isRequired,\r\n    value: PropTypes.number.isRequired\r\n}\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `attachment-tab-${index}`,\r\n        'aria-controls': `attachment-tabpanel-${index}`\r\n    }\r\n}\r\n\r\nconst embedPopupHtmlCode = (chatflowid) => {\r\n    return `<script type=\"module\">\r\n    import Chatbot from \"https://cdn.jsdelivr.net/npm/flowise-embed/dist/web.js\"\r\n    Chatbot.init({\r\n        chatflowid: \"${chatflowid}\",\r\n        apiHost: \"${baseURL}\",\r\n    })\r\n</script>`\r\n}\r\n\r\nconst embedPopupReactCode = (chatflowid) => {\r\n    return `import { BubbleChat } from 'flowise-embed-react'\r\n\r\nconst App = () => {\r\n    return (\r\n        <BubbleChat chatflowid=\"${chatflowid}\" apiHost=\"${baseURL}\" />\r\n    );\r\n};`\r\n}\r\n\r\nconst embedFullpageHtmlCode = (chatflowid) => {\r\n    return `<flowise-fullchatbot></flowise-fullchatbot>\r\n<script type=\"module\">\r\n    import Chatbot from \"https://cdn.jsdelivr.net/npm/flowise-embed/dist/web.js\"\r\n    Chatbot.initFull({\r\n        chatflowid: \"${chatflowid}\",\r\n        apiHost: \"${baseURL}\",\r\n    })\r\n</script>`\r\n}\r\n\r\nconst embedFullpageReactCode = (chatflowid) => {\r\n    return `import { FullPageChat } from \"flowise-embed-react\"\r\n\r\nconst App = () => {\r\n    return (\r\n        <FullPageChat\r\n            chatflowid=\"${chatflowid}\"\r\n            apiHost=\"${baseURL}\"\r\n        />\r\n    );\r\n};`\r\n}\r\n\r\nconst buttonConfig = (isReact = false) => {\r\n    return isReact\r\n        ? `button: {\r\n                    backgroundColor: \"#3B81F6\",\r\n                    right: 20,\r\n                    bottom: 20,\r\n                    size: \"medium\",\r\n                    iconColor: \"white\",\r\n                    customIconSrc: \"https://raw.githubusercontent.com/walkxcode/dashboard-icons/main/svg/google-messages.svg\",\r\n                }`\r\n        : `button: {\r\n                backgroundColor: \"#3B81F6\",\r\n                right: 20,\r\n                bottom: 20,\r\n                size: \"medium\",\r\n                iconColor: \"white\",\r\n                customIconSrc: \"https://raw.githubusercontent.com/walkxcode/dashboard-icons/main/svg/google-messages.svg\",\r\n            }`\r\n}\r\n\r\nconst chatwindowConfig = (isReact = false) => {\r\n    return isReact\r\n        ? `chatWindow: {\r\n                    welcomeMessage: \"Hello! This is custom welcome message\",\r\n                    backgroundColor: \"#ffffff\",\r\n                    height: 700,\r\n                    width: 400,\r\n                    fontSize: 16,\r\n                    poweredByTextColor: \"#303235\",\r\n                    botMessage: {\r\n                        backgroundColor: \"#f7f8ff\",\r\n                        textColor: \"#303235\",\r\n                        showAvatar: true,\r\n                        avatarSrc: \"https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/parroticon.png\",\r\n                    },\r\n                    userMessage: {\r\n                        backgroundColor: \"#3B81F6\",\r\n                        textColor: \"#ffffff\",\r\n                        showAvatar: true,\r\n                        avatarSrc: \"https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/usericon.png\",\r\n                    },\r\n                    textInput: {\r\n                        placeholder: \"Type your question\",\r\n                        backgroundColor: \"#ffffff\",\r\n                        textColor: \"#303235\",\r\n                        sendButtonColor: \"#3B81F6\",\r\n                    }\r\n                }`\r\n        : `chatWindow: {\r\n                welcomeMessage: \"Hello! This is custom welcome message\",\r\n                backgroundColor: \"#ffffff\",\r\n                height: 700,\r\n                width: 400,\r\n                fontSize: 16,\r\n                poweredByTextColor: \"#303235\",\r\n                botMessage: {\r\n                    backgroundColor: \"#f7f8ff\",\r\n                    textColor: \"#303235\",\r\n                    showAvatar: true,\r\n                    avatarSrc: \"https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/parroticon.png\",\r\n                },\r\n                userMessage: {\r\n                    backgroundColor: \"#3B81F6\",\r\n                    textColor: \"#ffffff\",\r\n                    showAvatar: true,\r\n                    avatarSrc: \"https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/usericon.png\",\r\n                },\r\n                textInput: {\r\n                    placeholder: \"Type your question\",\r\n                    backgroundColor: \"#ffffff\",\r\n                    textColor: \"#303235\",\r\n                    sendButtonColor: \"#3B81F6\",\r\n                }\r\n            }`\r\n}\r\n\r\nconst embedPopupHtmlCodeCustomization = (chatflowid) => {\r\n    return `<script type=\"module\">\r\n    import Chatbot from \"https://cdn.jsdelivr.net/npm/flowise-embed/dist/web.js\"\r\n    Chatbot.init({\r\n        chatflowid: \"${chatflowid}\",\r\n        apiHost: \"${baseURL}\",\r\n        chatflowConfig: {\r\n            // topK: 2\r\n        },\r\n        theme: {\r\n            ${buttonConfig()},\r\n            ${chatwindowConfig()}\r\n        }\r\n    })\r\n</script>`\r\n}\r\n\r\nconst embedPopupReactCodeCustomization = (chatflowid) => {\r\n    return `import { BubbleChat } from 'flowise-embed-react'\r\n\r\nconst App = () => {\r\n    return (\r\n        <BubbleChat\r\n            chatflowid=\"${chatflowid}\"\r\n            apiHost=\"${baseURL}\"\r\n            theme={{\r\n                ${buttonConfig(true)},\r\n                ${chatwindowConfig(true)}\r\n            }}\r\n        />\r\n    );\r\n};`\r\n}\r\n\r\nconst embedFullpageHtmlCodeCustomization = (chatflowid) => {\r\n    return `<flowise-fullchatbot></flowise-fullchatbot>\r\n<script type=\"module\">\r\n    import Chatbot from \"https://cdn.jsdelivr.net/npm/flowise-embed/dist/web.js\"\r\n    Chatbot.initFull({\r\n        chatflowid: \"${chatflowid}\",\r\n        apiHost: \"${baseURL}\",\r\n        theme: {\r\n            ${chatwindowConfig()}\r\n        }\r\n    })\r\n</script>`\r\n}\r\n\r\nconst embedFullpageReactCodeCustomization = (chatflowid) => {\r\n    return `import { FullPageChat } from \"flowise-embed-react\"\r\n\r\nconst App = () => {\r\n    return (\r\n        <FullPageChat\r\n            chatflowid=\"${chatflowid}\"\r\n            apiHost=\"${baseURL}\"\r\n            theme={{\r\n                ${chatwindowConfig(true)}\r\n            }}\r\n        />\r\n    );\r\n};`\r\n}\r\n\r\nconst EmbedChat = ({ chatflowid }) => {\r\n    const codes = ['Popup Html', 'Fullpage Html', 'Popup React', 'Fullpage React']\r\n    const [value, setValue] = useState(0)\r\n    const [embedChatCheckboxVal, setEmbedChatCheckbox] = useState(false)\r\n\r\n    const onCheckBoxEmbedChatChanged = (newVal) => {\r\n        setEmbedChatCheckbox(newVal)\r\n    }\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue)\r\n    }\r\n\r\n    const getCode = (codeLang) => {\r\n        switch (codeLang) {\r\n            case 'Popup Html':\r\n                return embedPopupHtmlCode(chatflowid)\r\n            case 'Fullpage Html':\r\n                return embedFullpageHtmlCode(chatflowid)\r\n            case 'Popup React':\r\n                return embedPopupReactCode(chatflowid)\r\n            case 'Fullpage React':\r\n                return embedFullpageReactCode(chatflowid)\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const getCodeCustomization = (codeLang) => {\r\n        switch (codeLang) {\r\n            case 'Popup Html':\r\n                return embedPopupHtmlCodeCustomization(chatflowid)\r\n            case 'Fullpage Html':\r\n                return embedFullpageHtmlCodeCustomization(chatflowid)\r\n            case 'Popup React':\r\n                return embedPopupReactCodeCustomization(chatflowid)\r\n            case 'Fullpage React':\r\n                return embedFullpageReactCodeCustomization(chatflowid)\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                <div style={{ flex: 80 }}>\r\n                    <Tabs value={value} onChange={handleChange} aria-label='tabs'>\r\n                        {codes.map((codeLang, index) => (\r\n                            <Tab key={index} label={codeLang} {...a11yProps(index)}></Tab>\r\n                        ))}\r\n                    </Tabs>\r\n                </div>\r\n            </div>\r\n            <div style={{ marginTop: 10 }}></div>\r\n            {codes.map((codeLang, index) => (\r\n                <TabPanel key={index} value={value} index={index}>\r\n                    {(value === 0 || value === 1) && (\r\n                        <>\r\n                            <span>\r\n                                Paste this anywhere in the <code>{`<body>`}</code> tag of your html file.\r\n                                <p>\r\n                                    You can also specify a&nbsp;\r\n                                    <a\r\n                                        rel='noreferrer'\r\n                                        target='_blank'\r\n                                        href='https://www.npmjs.com/package/flowise-embed?activeTab=versions'\r\n                                    >\r\n                                        version\r\n                                    </a>\r\n                                    :&nbsp;<code>{`https://cdn.jsdelivr.net/npm/flowise-embed@<version>/dist/web.js`}</code>\r\n                                </p>\r\n                            </span>\r\n                            <div style={{ height: 10 }}></div>\r\n                        </>\r\n                    )}\r\n                    <CopyBlock theme={atomOneDark} text={getCode(codeLang)} language='javascript' showLineNumbers={false} wrapLines />\r\n\r\n                    <CheckboxInput label='Show Embed Chat Config' value={embedChatCheckboxVal} onChange={onCheckBoxEmbedChatChanged} />\r\n\r\n                    {embedChatCheckboxVal && (\r\n                        <CopyBlock\r\n                            theme={atomOneDark}\r\n                            text={getCodeCustomization(codeLang)}\r\n                            language='javascript'\r\n                            showLineNumbers={false}\r\n                            wrapLines\r\n                        />\r\n                    )}\r\n                </TabPanel>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n\r\nEmbedChat.propTypes = {\r\n    chatflowid: PropTypes.string\r\n}\r\n\r\nexport default EmbedChat\r\n","import { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction, SET_CHATFLOW } from 'store/actions'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Box, Typography, Button, OutlinedInput } from '@mui/material'\r\n\r\n// Project import\r\nimport { StyledButton } from 'ui-component/button/StyledButton'\r\n\r\n// Icons\r\nimport { IconX } from '@tabler/icons'\r\n\r\n// API\r\nimport chatflowsApi from 'api/chatflows'\r\n\r\n// utils\r\nimport useNotifier from 'utils/useNotifier'\r\nimport { TooltipWithParser } from 'ui-component/tooltip/TooltipWithParser'\r\n\r\nconst Configuration = () => {\r\n    const dispatch = useDispatch()\r\n    const chatflow = useSelector((state) => state.canvas.chatflow)\r\n    const chatflowid = chatflow.id\r\n    const apiConfig = chatflow.apiConfig ? JSON.parse(chatflow.apiConfig) : {}\r\n\r\n    useNotifier()\r\n\r\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\r\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\r\n\r\n    const [limitMax, setLimitMax] = useState(apiConfig?.rateLimit?.limitMax ?? '')\r\n    const [limitDuration, setLimitDuration] = useState(apiConfig?.rateLimit?.limitDuration ?? '')\r\n    const [limitMsg, setLimitMsg] = useState(apiConfig?.rateLimit?.limitMsg ?? '')\r\n\r\n    const formatObj = () => {\r\n        const obj = {\r\n            rateLimit: {}\r\n        }\r\n        const rateLimitValuesBoolean = [!limitMax, !limitDuration, !limitMsg]\r\n        const rateLimitFilledValues = rateLimitValuesBoolean.filter((value) => value === false)\r\n        if (rateLimitFilledValues.length >= 1 && rateLimitFilledValues.length <= 2) {\r\n            throw new Error('Need to fill all rate limit input fields')\r\n        } else if (rateLimitFilledValues.length === 3) {\r\n            obj.rateLimit = {\r\n                limitMax,\r\n                limitDuration,\r\n                limitMsg\r\n            }\r\n        }\r\n\r\n        return obj\r\n    }\r\n\r\n    const onSave = async () => {\r\n        try {\r\n            const saveResp = await chatflowsApi.updateChatflow(chatflowid, {\r\n                apiConfig: JSON.stringify(formatObj())\r\n            })\r\n            if (saveResp.data) {\r\n                enqueueSnackbar({\r\n                    message: 'API Configuration Saved',\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'success',\r\n                        action: (key) => (\r\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        )\r\n                    }\r\n                })\r\n                dispatch({ type: SET_CHATFLOW, chatflow: saveResp.data })\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n            const errorData = error.response\r\n                ? error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n                : error.message\r\n            enqueueSnackbar({\r\n                message: `Failed to save API Configuration: ${errorData}`,\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const onTextChanged = (value, fieldName) => {\r\n        switch (fieldName) {\r\n            case 'limitMax':\r\n                setLimitMax(value)\r\n                break\r\n            case 'limitDuration':\r\n                setLimitDuration(value)\r\n                break\r\n            case 'limitMsg':\r\n                setLimitMsg(value)\r\n                break\r\n        }\r\n    }\r\n\r\n    const textField = (message, fieldName, fieldLabel, fieldType = 'string', placeholder = '') => {\r\n        return (\r\n            <Box sx={{ pt: 2, pb: 2 }}>\r\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\r\n                    <Typography sx={{ mb: 1 }}>{fieldLabel}</Typography>\r\n                    <OutlinedInput\r\n                        id={fieldName}\r\n                        type={fieldType}\r\n                        fullWidth\r\n                        value={message}\r\n                        placeholder={placeholder}\r\n                        name={fieldName}\r\n                        onChange={(e) => {\r\n                            onTextChanged(e.target.value, fieldName)\r\n                        }}\r\n                    />\r\n                </div>\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/*Rate Limit*/}\r\n            <Typography variant='h4' sx={{ mb: 1, mt: 2 }}>\r\n                Rate Limit{' '}\r\n                <TooltipWithParser\r\n                    style={{ mb: 1, mt: 2, marginLeft: 10 }}\r\n                    title={\r\n                        'Visit <a target=\"_blank\" href=\"https://docs.flowiseai.com/rate-limit\">Rate Limit Setup Guide</a> to set up Rate Limit correctly in your hosting environment.'\r\n                    }\r\n                />\r\n            </Typography>\r\n            {textField(limitMax, 'limitMax', 'Message Limit per Duration', 'number')}\r\n            {textField(limitDuration, 'limitDuration', 'Duration in Second', 'number')}\r\n            {textField(limitMsg, 'limitMsg', 'Limit Message', 'string')}\r\n\r\n            <StyledButton style={{ marginBottom: 10, marginTop: 10 }} variant='contained' onClick={() => onSave()}>\r\n                Save Changes\r\n            </StyledButton>\r\n        </>\r\n    )\r\n}\r\n\r\nConfiguration.propTypes = {\r\n    isSessionMemory: PropTypes.bool\r\n}\r\n\r\nexport default Configuration\r\n","var _path, _path2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgPython(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    className: \"mr-1.5\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    role: \"img\",\n    width: \"1em\",\n    height: \"1em\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    viewBox: \"0 0 32 32\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M15.84.5a16.4,16.4,0,0,0-3.57.32C9.1,1.39,8.53,2.53,8.53,4.64V7.48H16v1H5.77a4.73,4.73,0,0,0-4.7,3.74,14.82,14.82,0,0,0,0,7.54c.57,2.28,1.86,3.82,4,3.82h2.6V20.14a4.73,4.73,0,0,1,4.63-4.63h7.38a3.72,3.72,0,0,0,3.73-3.73V4.64A4.16,4.16,0,0,0,19.65.82,20.49,20.49,0,0,0,15.84.5ZM11.78,2.77a1.39,1.39,0,0,1,1.38,1.46,1.37,1.37,0,0,1-1.38,1.38A1.42,1.42,0,0,1,10.4,4.23,1.44,1.44,0,0,1,11.78,2.77Z\",\n    fill: \"#5a9fd4\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16.16,31.5a16.4,16.4,0,0,0,3.57-.32c3.17-.57,3.74-1.71,3.74-3.82V24.52H16v-1H26.23a4.73,4.73,0,0,0,4.7-3.74,14.82,14.82,0,0,0,0-7.54c-.57-2.28-1.86-3.82-4-3.82h-2.6v3.41a4.73,4.73,0,0,1-4.63,4.63H12.35a3.72,3.72,0,0,0-3.73,3.73v7.14a4.16,4.16,0,0,0,3.73,3.82A20.49,20.49,0,0,0,16.16,31.5Zm4.06-2.27a1.39,1.39,0,0,1-1.38-1.46,1.37,1.37,0,0,1,1.38-1.38,1.42,1.42,0,0,1,1.38,1.38A1.44,1.44,0,0,1,20.22,29.23Z\",\n    fill: \"#ffd43b\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgPython);\nexport default __webpack_public_path__ + \"static/media/python.b0fd2326ee21d9c5524d0d243379c879.svg\";\nexport { ForwardRef as ReactComponent };","var _rect, _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgJavascript(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    className: \"mr-1.5\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    role: \"img\",\n    width: \"1em\",\n    height: \"1em\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    viewBox: \"0 0 32 32\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    width: 32,\n    height: 32,\n    fill: \"#f7df1e\"\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M21.5,25a3.27,3.27,0,0,0,3,1.83c1.25,0,2-.63,2-1.49,0-1-.81-1.39-2.19-2L23.56,23C21.39,22.1,20,20.94,20,18.49c0-2.25,1.72-4,4.41-4a4.44,4.44,0,0,1,4.27,2.41l-2.34,1.5a2,2,0,0,0-1.93-1.29,1.31,1.31,0,0,0-1.44,1.29c0,.9.56,1.27,1.85,1.83l.75.32c2.55,1.1,4,2.21,4,4.72,0,2.71-2.12,4.19-5,4.19a5.78,5.78,0,0,1-5.48-3.07Zm-10.63.26c.48.84.91,1.55,1.94,1.55s1.61-.39,1.61-1.89V14.69h3V25c0,3.11-1.83,4.53-4.49,4.53a4.66,4.66,0,0,1-4.51-2.75Z\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgJavascript);\nexport default __webpack_public_path__ + \"static/media/javascript.0baf38b3d3f5b2d24e87fb5cc2fcfea0.svg\";\nexport { ForwardRef as ReactComponent };","var _rect, _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgCUrl(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    className: \"mr-1.5\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    role: \"img\",\n    width: \"1em\",\n    height: \"1em\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    viewBox: \"0 0 32 32\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    width: 32,\n    height: 32,\n    rx: 4,\n    fill: \"#1683a5\"\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M6.71,14A5,5,0,0,1,8.82,9.29l2.64-2.2c1.67-1.37,2.52-1.41,4.6-1.41H21.7c1.19,0,2.45.27,2.45,1.79s-1.4,1.78-2.45,1.78H15.44a3.31,3.31,0,0,0-2,.89L11.24,12c-.55.44-1,.81-1,1.52v4.41c0,.7.41,1.07,1,1.52l2.16,1.82a3.34,3.34,0,0,0,2,.89H21.7c1.05,0,2.45.23,2.45,1.78s-1.26,1.78-2.45,1.78H16.06c-2.08,0-2.94,0-4.6-1.4L8.82,22.09A5.05,5.05,0,0,1,6.71,17.4Z\",\n    fill: \"#fff\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgCUrl);\nexport default __webpack_public_path__ + \"static/media/cURL.37eb8ccceafb9e8630a53aa0eb756128.svg\";\nexport { ForwardRef as ReactComponent };","var _g;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgEmbed(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 512 512\",\n    focusable: \"false\",\n    className: \"chakra-icon css-lbf1w4\",\n    id: \"Capa_1\",\n    enableBackground: \"new 0 0 512 512\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m512 141.17v229.66c0 39.96-32.51 72.47-72.46 72.47h-367.08c-39.95 0-72.46-32.51-72.46-72.47v-229.66c0-39.96 32.51-72.47 72.46-72.47h367.08c39.95 0 72.46 32.51 72.46 72.47z\",\n    fill: \"#6aa9ff\"\n  })), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m512 141.17v229.66c0 39.96-32.51 72.47-72.46 72.47h-183.54v-374.6h183.54c39.95 0 72.46 32.51 72.46 72.47z\",\n    fill: \"#4987ea\"\n  }), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m146.16 349.223-78.4-78.4c-5.858-5.858-5.858-15.355 0-21.213l86.833-86.833c5.857-5.858 15.355-5.858 21.213 0s5.858 15.355 0 21.213l-76.226 76.226 67.793 67.794c5.858 5.858 5.858 15.355 0 21.213-5.857 5.858-15.355 5.859-21.213 0z\",\n    fill: \"#f0f7ff\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m336.194 349.223c-5.858-5.858-5.858-15.355 0-21.213l76.226-76.227-67.793-67.794c-5.858-5.858-5.858-15.355 0-21.213 5.857-5.858 15.355-5.858 21.213 0l78.4 78.4c5.858 5.858 5.858 15.355 0 21.213l-86.833 86.833c-5.856 5.859-15.355 5.86-21.213.001z\",\n    fill: \"#dfe7f4\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m309.54 148.7-53.54 151.6-25.78 72.99c-2.792 7.888-11.443 11.903-19.14 9.15-7.81-2.76-11.91-11.33-9.15-19.14l54.07-153.1 25.25-71.49c2.76-7.81 11.33-11.91 19.14-9.15s11.91 11.33 9.15 19.14z\",\n    fill: \"#f0f7ff\"\n  })), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m309.54 148.7-53.54 151.6v-90.1l25.25-71.49c2.76-7.81 11.33-11.91 19.14-9.15s11.91 11.33 9.15 19.14z\",\n    fill: \"#dfe7f4\"\n  }))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgEmbed);\nexport default __webpack_public_path__ + \"static/media/embed.289f71beedf481a4fab870e9fed16fec.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _path2, _path3;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgSettings(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    className: \"icon icon-tabler icon-tabler-settings\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 2,\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    stroke: \"none\",\n    d: \"M0 0h24v24H0z\",\n    fill: \"none\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10.325 4.317c.426 -1.756 2.924 -1.756 3.35 0a1.724 1.724 0 0 0 2.573 1.066c1.543 -.94 3.31 .826 2.37 2.37a1.724 1.724 0 0 0 1.065 2.572c1.756 .426 1.756 2.924 0 3.35a1.724 1.724 0 0 0 -1.066 2.573c.94 1.543 -.826 3.31 -2.37 2.37a1.724 1.724 0 0 0 -2.572 1.065c-.426 1.756 -2.924 1.756 -3.35 0a1.724 1.724 0 0 0 -2.573 -1.066c-1.543 .94 -3.31 -.826 -2.37 -2.37a1.724 1.724 0 0 0 -1.065 -2.572c-1.756 -.426 -1.756 -2.924 0 -3.35a1.724 1.724 0 0 0 1.066 -2.573c-.94 -1.543 .826 -3.31 2.37 -2.37c1 .608 2.296 .07 2.572 -1.065z\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9 12a3 3 0 1 0 6 0a3 3 0 0 0 -6 0\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSettings);\nexport default __webpack_public_path__ + \"static/media/settings.09181fb470b6437d7de0fa70595c182a.svg\";\nexport { ForwardRef as ReactComponent };","import { createPortal } from 'react-dom'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useState, useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {\r\n    Tabs,\r\n    Tab,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Box,\r\n    Accordion,\r\n    AccordionSummary,\r\n    AccordionDetails,\r\n    Typography\r\n} from '@mui/material'\r\nimport { CopyBlock, atomOneDark } from 'react-code-blocks'\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\r\n\r\n// Project import\r\nimport { Dropdown } from 'ui-component/dropdown/Dropdown'\r\nimport ShareChatbot from './ShareChatbot'\r\nimport EmbedChat from './EmbedChat'\r\nimport Configuration from './Configuration'\r\n\r\n// Const\r\nimport { baseURL } from 'store/constant'\r\nimport { SET_CHATFLOW } from 'store/actions'\r\n\r\n// Images\r\nimport pythonSVG from 'assets/images/python.svg'\r\nimport javascriptSVG from 'assets/images/javascript.svg'\r\nimport cURLSVG from 'assets/images/cURL.svg'\r\nimport EmbedSVG from 'assets/images/embed.svg'\r\nimport ShareChatbotSVG from 'assets/images/sharing.png'\r\nimport settingsSVG from 'assets/images/settings.svg'\r\nimport { IconBulb } from '@tabler/icons'\r\n\r\n// API\r\nimport apiKeyApi from 'api/apikey'\r\nimport chatflowsApi from 'api/chatflows'\r\nimport configApi from 'api/config'\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi'\r\nimport { CheckboxInput } from 'ui-component/checkbox/Checkbox'\r\nimport { TableViewOnly } from 'ui-component/table/Table'\r\n\r\n// Helpers\r\nimport { unshiftFiles, getConfigExamplesForJS, getConfigExamplesForPython, getConfigExamplesForCurl } from 'utils/genericHelper'\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props\r\n    return (\r\n        <div\r\n            role='tabpanel'\r\n            hidden={value !== index}\r\n            id={`attachment-tabpanel-${index}`}\r\n            aria-labelledby={`attachment-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && <Box sx={{ p: 1 }}>{children}</Box>}\r\n        </div>\r\n    )\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.number.isRequired,\r\n    value: PropTypes.number.isRequired\r\n}\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `attachment-tab-${index}`,\r\n        'aria-controls': `attachment-tabpanel-${index}`\r\n    }\r\n}\r\n\r\nconst APICodeDialog = ({ show, dialogProps, onCancel }) => {\r\n    const portalElement = document.getElementById('portal')\r\n    const navigate = useNavigate()\r\n    const dispatch = useDispatch()\r\n\r\n    const codes = ['Embed', 'Python', 'JavaScript', 'cURL', 'Share Chatbot', 'Configuration']\r\n    const [value, setValue] = useState(0)\r\n    const [keyOptions, setKeyOptions] = useState([])\r\n    const [apiKeys, setAPIKeys] = useState([])\r\n    const [chatflowApiKeyId, setChatflowApiKeyId] = useState('')\r\n    const [selectedApiKey, setSelectedApiKey] = useState({})\r\n    const [checkboxVal, setCheckbox] = useState(false)\r\n    const [nodeConfig, setNodeConfig] = useState({})\r\n    const [nodeConfigExpanded, setNodeConfigExpanded] = useState({})\r\n\r\n    const getAllAPIKeysApi = useApi(apiKeyApi.getAllAPIKeys)\r\n    const updateChatflowApi = useApi(chatflowsApi.updateChatflow)\r\n    const getIsChatflowStreamingApi = useApi(chatflowsApi.getIsChatflowStreaming)\r\n    const getConfigApi = useApi(configApi.getConfig)\r\n\r\n    const onCheckBoxChanged = (newVal) => {\r\n        setCheckbox(newVal)\r\n        if (newVal) {\r\n            getConfigApi.request(dialogProps.chatflowid)\r\n        }\r\n    }\r\n\r\n    const onApiKeySelected = (keyValue) => {\r\n        if (keyValue === 'addnewkey') {\r\n            navigate('/apikey')\r\n            return\r\n        }\r\n        setChatflowApiKeyId(keyValue)\r\n        setSelectedApiKey(apiKeys.find((key) => key.id === keyValue))\r\n        const updateBody = {\r\n            apikeyid: keyValue\r\n        }\r\n        updateChatflowApi.request(dialogProps.chatflowid, updateBody)\r\n    }\r\n\r\n    const groupByNodeLabel = (nodes, isFilter = false) => {\r\n        const accordianNodes = {}\r\n        const result = nodes.reduce(function (r, a) {\r\n            r[a.node] = r[a.node] || []\r\n            r[a.node].push(a)\r\n            accordianNodes[a.node] = isFilter ? true : false\r\n            return r\r\n        }, Object.create(null))\r\n        setNodeConfig(result)\r\n        setNodeConfigExpanded(accordianNodes)\r\n    }\r\n\r\n    const handleAccordionChange = (nodeLabel) => (event, isExpanded) => {\r\n        const accordianNodes = { ...nodeConfigExpanded }\r\n        accordianNodes[nodeLabel] = isExpanded\r\n        setNodeConfigExpanded(accordianNodes)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (updateChatflowApi.data) {\r\n            dispatch({ type: SET_CHATFLOW, chatflow: updateChatflowApi.data })\r\n        }\r\n    }, [updateChatflowApi.data, dispatch])\r\n\r\n    useEffect(() => {\r\n        if (getConfigApi.data) {\r\n            groupByNodeLabel(getConfigApi.data)\r\n        }\r\n    }, [getConfigApi.data])\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue)\r\n    }\r\n\r\n    const getCode = (codeLang) => {\r\n        if (codeLang === 'Python') {\r\n            return `import requests\r\n\r\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\r\n\r\ndef query(payload):\r\n    response = requests.post(API_URL, json=payload)\r\n    return response.json()\r\n    \r\noutput = query({\r\n    \"question\": \"Hey, how are you?\",\r\n})\r\n`\r\n        } else if (codeLang === 'JavaScript') {\r\n            return `async function query(data) {\r\n    const response = await fetch(\r\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\r\n        {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(data)\r\n        }\r\n    );\r\n    const result = await response.json();\r\n    return result;\r\n}\r\n\r\nquery({\"question\": \"Hey, how are you?\"}).then((response) => {\r\n    console.log(response);\r\n});\r\n`\r\n        } else if (codeLang === 'cURL') {\r\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\r\n     -X POST \\\\\r\n     -d '{\"question\": \"Hey, how are you?\"}' \\\\\r\n     -H \"Content-Type: application/json\"`\r\n        }\r\n        return ''\r\n    }\r\n\r\n    const getCodeWithAuthorization = (codeLang) => {\r\n        if (codeLang === 'Python') {\r\n            return `import requests\r\n\r\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\r\nheaders = {\"Authorization\": \"Bearer ${selectedApiKey?.apiKey}\"}\r\n\r\ndef query(payload):\r\n    response = requests.post(API_URL, headers=headers, json=payload)\r\n    return response.json()\r\n    \r\noutput = query({\r\n    \"question\": \"Hey, how are you?\",\r\n})\r\n`\r\n        } else if (codeLang === 'JavaScript') {\r\n            return `async function query(data) {\r\n    const response = await fetch(\r\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\r\n        {\r\n            headers: {\r\n                Authorization: \"Bearer ${selectedApiKey?.apiKey}\",\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            method: \"POST\",\r\n            body: JSON.stringify(data)\r\n        }\r\n    );\r\n    const result = await response.json();\r\n    return result;\r\n}\r\n\r\nquery({\"question\": \"Hey, how are you?\"}).then((response) => {\r\n    console.log(response);\r\n});\r\n`\r\n        } else if (codeLang === 'cURL') {\r\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\r\n     -X POST \\\\\r\n     -d '{\"question\": \"Hey, how are you?\"}' \\\\\r\n     -H \"Content-Type: application/json\" \\\\\r\n     -H \"Authorization: Bearer ${selectedApiKey?.apiKey}\"`\r\n        }\r\n        return ''\r\n    }\r\n\r\n    const getLang = (codeLang) => {\r\n        if (codeLang === 'Python') {\r\n            return 'python'\r\n        } else if (codeLang === 'JavaScript') {\r\n            return 'javascript'\r\n        } else if (codeLang === 'cURL') {\r\n            return 'bash'\r\n        }\r\n        return 'python'\r\n    }\r\n\r\n    const getSVG = (codeLang) => {\r\n        if (codeLang === 'Python') {\r\n            return pythonSVG\r\n        } else if (codeLang === 'JavaScript') {\r\n            return javascriptSVG\r\n        } else if (codeLang === 'Embed') {\r\n            return EmbedSVG\r\n        } else if (codeLang === 'cURL') {\r\n            return cURLSVG\r\n        } else if (codeLang === 'Share Chatbot') {\r\n            return ShareChatbotSVG\r\n        } else if (codeLang === 'Configuration') {\r\n            return settingsSVG\r\n        }\r\n        return pythonSVG\r\n    }\r\n\r\n    // ----------------------------CONFIG FORM DATA --------------------------//\r\n\r\n    const getConfigCodeWithFormData = (codeLang, configData) => {\r\n        if (codeLang === 'Python') {\r\n            configData = unshiftFiles(configData)\r\n            let fileType = configData[0].type\r\n            if (fileType.includes(',')) fileType = fileType.split(',')[0]\r\n            return `import requests\r\n\r\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\r\n\r\n# use form data to upload files\r\nform_data = {\r\n    \"files\": ${`('example${fileType}', open('example${fileType}', 'rb'))`}\r\n}\r\nbody_data = {${getConfigExamplesForPython(configData, 'formData')}}\r\n\r\ndef query(form_data):\r\n    response = requests.post(API_URL, files=form_data, data=body_data)\r\n    return response.json()\r\n\r\noutput = query(form_data)\r\n`\r\n        } else if (codeLang === 'JavaScript') {\r\n            return `// use FormData to upload files\r\nlet formData = new FormData();\r\n${getConfigExamplesForJS(configData, 'formData')}\r\nasync function query(formData) {\r\n    const response = await fetch(\r\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\r\n        {\r\n            method: \"POST\",\r\n            body: formData\r\n        }\r\n    );\r\n    const result = await response.json();\r\n    return result;\r\n}\r\n\r\nquery(formData).then((response) => {\r\n    console.log(response);\r\n});\r\n`\r\n        } else if (codeLang === 'cURL') {\r\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\r\n     -X POST \\\\${getConfigExamplesForCurl(configData, 'formData')} \\\\\r\n     -H \"Content-Type: multipart/form-data\"`\r\n        }\r\n        return ''\r\n    }\r\n\r\n    // ----------------------------CONFIG FORM DATA with AUTH--------------------------//\r\n\r\n    const getConfigCodeWithFormDataWithAuth = (codeLang, configData) => {\r\n        if (codeLang === 'Python') {\r\n            configData = unshiftFiles(configData)\r\n            let fileType = configData[0].type\r\n            if (fileType.includes(',')) fileType = fileType.split(',')[0]\r\n            return `import requests\r\n\r\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\r\nheaders = {\"Authorization\": \"Bearer ${selectedApiKey?.apiKey}\"}\r\n\r\n# use form data to upload files\r\nform_data = {\r\n    \"files\": ${`('example${fileType}', open('example${fileType}', 'rb'))`}\r\n}\r\nbody_data = {${getConfigExamplesForPython(configData, 'formData')}}\r\n\r\ndef query(form_data):\r\n    response = requests.post(API_URL, headers=headers, files=form_data, data=body_data)\r\n    return response.json()\r\n\r\noutput = query(form_data)\r\n`\r\n        } else if (codeLang === 'JavaScript') {\r\n            return `// use FormData to upload files\r\nlet formData = new FormData();\r\n${getConfigExamplesForJS(configData, 'formData')}\r\nasync function query(formData) {\r\n    const response = await fetch(\r\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\r\n        {\r\n            headers: { Authorization: \"Bearer ${selectedApiKey?.apiKey}\" },\r\n            method: \"POST\",\r\n            body: formData\r\n        }\r\n    );\r\n    const result = await response.json();\r\n    return result;\r\n}\r\n\r\nquery(formData).then((response) => {\r\n    console.log(response);\r\n});\r\n`\r\n        } else if (codeLang === 'cURL') {\r\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\r\n     -X POST \\\\${getConfigExamplesForCurl(configData, 'formData')} \\\\\r\n     -H \"Content-Type: multipart/form-data\" \\\\\r\n     -H \"Authorization: Bearer ${selectedApiKey?.apiKey}\"`\r\n        }\r\n        return ''\r\n    }\r\n\r\n    // ----------------------------CONFIG JSON--------------------------//\r\n\r\n    const getConfigCode = (codeLang, configData) => {\r\n        if (codeLang === 'Python') {\r\n            return `import requests\r\n\r\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\r\n\r\ndef query(payload):\r\n    response = requests.post(API_URL, json=payload)\r\n    return response.json()\r\n\r\noutput = query({\r\n    \"question\": \"Hey, how are you?\",\r\n    \"overrideConfig\": {${getConfigExamplesForPython(configData, 'json')}\r\n    }\r\n})\r\n`\r\n        } else if (codeLang === 'JavaScript') {\r\n            return `async function query(data) {\r\n    const response = await fetch(\r\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\r\n        {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(data)\r\n        }\r\n    );\r\n    const result = await response.json();\r\n    return result;\r\n}\r\n\r\nquery({\r\n  \"question\": \"Hey, how are you?\",\r\n  \"overrideConfig\": {${getConfigExamplesForJS(configData, 'json')}\r\n  }\r\n}).then((response) => {\r\n    console.log(response);\r\n});\r\n`\r\n        } else if (codeLang === 'cURL') {\r\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\r\n     -X POST \\\\\r\n     -d '{\"question\": \"Hey, how are you?\", \"overrideConfig\": {${getConfigExamplesForCurl(configData, 'json')}}' \\\\\r\n     -H \"Content-Type: application/json\"`\r\n        }\r\n        return ''\r\n    }\r\n\r\n    // ----------------------------CONFIG JSON with AUTH--------------------------//\r\n\r\n    const getConfigCodeWithAuthorization = (codeLang, configData) => {\r\n        if (codeLang === 'Python') {\r\n            return `import requests\r\n\r\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\r\nheaders = {\"Authorization\": \"Bearer ${selectedApiKey?.apiKey}\"}\r\n\r\ndef query(payload):\r\n    response = requests.post(API_URL, headers=headers, json=payload)\r\n    return response.json()\r\n\r\noutput = query({\r\n    \"question\": \"Hey, how are you?\",\r\n    \"overrideConfig\": {${getConfigExamplesForPython(configData, 'json')}\r\n    }\r\n})\r\n`\r\n        } else if (codeLang === 'JavaScript') {\r\n            return `async function query(data) {\r\n    const response = await fetch(\r\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\r\n        {\r\n            headers: {\r\n                Authorization: \"Bearer ${selectedApiKey?.apiKey}\",\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            method: \"POST\",\r\n            body: JSON.stringify(data)\r\n        }\r\n    );\r\n    const result = await response.json();\r\n    return result;\r\n}\r\n\r\nquery({\r\n  \"question\": \"Hey, how are you?\",\r\n  \"overrideConfig\": {${getConfigExamplesForJS(configData, 'json')}\r\n  }\r\n}).then((response) => {\r\n    console.log(response);\r\n});\r\n`\r\n        } else if (codeLang === 'cURL') {\r\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\r\n     -X POST \\\\\r\n     -d '{\"question\": \"Hey, how are you?\", \"overrideConfig\": {${getConfigExamplesForCurl(configData, 'json')}}' \\\\\r\n     -H \"Content-Type: application/json\" \\\\\r\n     -H \"Authorization: Bearer ${selectedApiKey?.apiKey}\"`\r\n        }\r\n        return ''\r\n    }\r\n\r\n    const getMultiConfigCodeWithFormData = (codeLang) => {\r\n        if (codeLang === 'Python') {\r\n            return `body_data = {\r\n    \"openAIApiKey[chatOpenAI_0]\": \"sk-my-openai-1st-key\",\r\n    \"openAIApiKey[openAIEmbeddings_0]\": \"sk-my-openai-2nd-key\"\r\n}`\r\n        } else if (codeLang === 'JavaScript') {\r\n            return `formData.append(\"openAIApiKey[chatOpenAI_0]\", \"sk-my-openai-1st-key\")\r\nformData.append(\"openAIApiKey[openAIEmbeddings_0]\", \"sk-my-openai-2nd-key\")`\r\n        } else if (codeLang === 'cURL') {\r\n            return `-F \"openAIApiKey[chatOpenAI_0]=sk-my-openai-1st-key\" \\\\\r\n-F \"openAIApiKey[openAIEmbeddings_0]=sk-my-openai-2nd-key\" \\\\`\r\n        }\r\n    }\r\n\r\n    const getMultiConfigCode = () => {\r\n        return `{\r\n    \"overrideConfig\": {\r\n        \"openAIApiKey\": {\r\n            \"chatOpenAI_0\": \"sk-my-openai-1st-key\",\r\n            \"openAIEmbeddings_0\": \"sk-my-openai-2nd-key\"\r\n        }\r\n    }\r\n}`\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (getAllAPIKeysApi.data) {\r\n            const options = [\r\n                {\r\n                    label: 'No Authorization',\r\n                    name: ''\r\n                }\r\n            ]\r\n            for (const key of getAllAPIKeysApi.data) {\r\n                options.push({\r\n                    label: key.keyName,\r\n                    name: key.id\r\n                })\r\n            }\r\n            options.push({\r\n                label: '- Add New Key -',\r\n                name: 'addnewkey'\r\n            })\r\n            setKeyOptions(options)\r\n            setAPIKeys(getAllAPIKeysApi.data)\r\n\r\n            if (dialogProps.chatflowApiKeyId) {\r\n                setChatflowApiKeyId(dialogProps.chatflowApiKeyId)\r\n                setSelectedApiKey(getAllAPIKeysApi.data.find((key) => key.id === dialogProps.chatflowApiKeyId))\r\n            }\r\n        }\r\n    }, [dialogProps, getAllAPIKeysApi.data])\r\n\r\n    useEffect(() => {\r\n        if (show) {\r\n            getAllAPIKeysApi.request()\r\n            getIsChatflowStreamingApi.request(dialogProps.chatflowid)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [show])\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            fullWidth\r\n            maxWidth='md'\r\n            onClose={onCancel}\r\n            aria-labelledby='alert-dialog-title'\r\n            aria-describedby='alert-dialog-description'\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                    <div style={{ flex: 80 }}>\r\n                        <Tabs value={value} onChange={handleChange} aria-label='tabs'>\r\n                            {codes.map((codeLang, index) => (\r\n                                <Tab\r\n                                    icon={\r\n                                        <img style={{ objectFit: 'cover', height: 15, width: 'auto' }} src={getSVG(codeLang)} alt='code' />\r\n                                    }\r\n                                    iconPosition='start'\r\n                                    key={index}\r\n                                    label={codeLang}\r\n                                    {...a11yProps(index)}\r\n                                ></Tab>\r\n                            ))}\r\n                        </Tabs>\r\n                    </div>\r\n                    <div style={{ flex: 20 }}>\r\n                        <Dropdown\r\n                            name='SelectKey'\r\n                            disableClearable={true}\r\n                            options={keyOptions}\r\n                            onSelect={(newValue) => onApiKeySelected(newValue)}\r\n                            value={dialogProps.chatflowApiKeyId ?? chatflowApiKeyId ?? 'Choose an API key'}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div style={{ marginTop: 10 }}></div>\r\n                {codes.map((codeLang, index) => (\r\n                    <TabPanel key={index} value={value} index={index}>\r\n                        {(codeLang === 'Embed' || codeLang === 'Share Chatbot') && chatflowApiKeyId && (\r\n                            <>\r\n                                <p>You cannot use API key while embedding/sharing chatbot.</p>\r\n                                <p>\r\n                                    Please select <b>&quot;No Authorization&quot;</b> from the dropdown at the top right corner.\r\n                                </p>\r\n                            </>\r\n                        )}\r\n                        {codeLang === 'Embed' && !chatflowApiKeyId && <EmbedChat chatflowid={dialogProps.chatflowid} />}\r\n                        {codeLang !== 'Embed' && codeLang !== 'Share Chatbot' && codeLang !== 'Configuration' && (\r\n                            <>\r\n                                <CopyBlock\r\n                                    theme={atomOneDark}\r\n                                    text={chatflowApiKeyId ? getCodeWithAuthorization(codeLang) : getCode(codeLang)}\r\n                                    language={getLang(codeLang)}\r\n                                    showLineNumbers={false}\r\n                                    wrapLines\r\n                                />\r\n                                <CheckboxInput label='Show Input Config' value={checkboxVal} onChange={onCheckBoxChanged} />\r\n                                {checkboxVal && getConfigApi.data && getConfigApi.data.length > 0 && (\r\n                                    <>\r\n                                        {Object.keys(nodeConfig)\r\n                                            .sort()\r\n                                            .map((nodeLabel) => (\r\n                                                <Accordion\r\n                                                    expanded={nodeConfigExpanded[nodeLabel] || false}\r\n                                                    onChange={handleAccordionChange(nodeLabel)}\r\n                                                    key={nodeLabel}\r\n                                                    disableGutters\r\n                                                >\r\n                                                    <AccordionSummary\r\n                                                        expandIcon={<ExpandMoreIcon />}\r\n                                                        aria-controls={`nodes-accordian-${nodeLabel}`}\r\n                                                        id={`nodes-accordian-header-${nodeLabel}`}\r\n                                                    >\r\n                                                        <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                                                            <Typography variant='h5'>{nodeLabel}</Typography>\r\n                                                            <div\r\n                                                                style={{\r\n                                                                    display: 'flex',\r\n                                                                    flexDirection: 'row',\r\n                                                                    width: 'max-content',\r\n                                                                    borderRadius: 15,\r\n                                                                    background: 'rgb(254,252,191)',\r\n                                                                    padding: 5,\r\n                                                                    paddingLeft: 10,\r\n                                                                    paddingRight: 10,\r\n                                                                    marginLeft: 10\r\n                                                                }}\r\n                                                            >\r\n                                                                <span style={{ color: 'rgb(116,66,16)', fontSize: '0.825rem' }}>\r\n                                                                    {nodeConfig[nodeLabel][0].nodeId}\r\n                                                                </span>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </AccordionSummary>\r\n                                                    <AccordionDetails>\r\n                                                        <TableViewOnly\r\n                                                            rows={nodeConfig[nodeLabel].map((obj) => {\r\n                                                                // eslint-disable-next-line\r\n                                                                const { node, nodeId, ...rest } = obj\r\n                                                                return rest\r\n                                                            })}\r\n                                                            columns={Object.keys(nodeConfig[nodeLabel][0]).slice(-3)}\r\n                                                        />\r\n                                                    </AccordionDetails>\r\n                                                </Accordion>\r\n                                            ))}\r\n                                        <CopyBlock\r\n                                            theme={atomOneDark}\r\n                                            text={\r\n                                                chatflowApiKeyId\r\n                                                    ? dialogProps.isFormDataRequired\r\n                                                        ? getConfigCodeWithFormDataWithAuth(codeLang, getConfigApi.data)\r\n                                                        : getConfigCodeWithAuthorization(codeLang, getConfigApi.data)\r\n                                                    : dialogProps.isFormDataRequired\r\n                                                    ? getConfigCodeWithFormData(codeLang, getConfigApi.data)\r\n                                                    : getConfigCode(codeLang, getConfigApi.data)\r\n                                            }\r\n                                            language={getLang(codeLang)}\r\n                                            showLineNumbers={false}\r\n                                            wrapLines\r\n                                        />\r\n                                        <div\r\n                                            style={{\r\n                                                display: 'flex',\r\n                                                flexDirection: 'column',\r\n                                                borderRadius: 10,\r\n                                                background: '#d8f3dc',\r\n                                                padding: 10,\r\n                                                marginTop: 10,\r\n                                                marginBottom: 10\r\n                                            }}\r\n                                        >\r\n                                            <div\r\n                                                style={{\r\n                                                    display: 'flex',\r\n                                                    flexDirection: 'row',\r\n                                                    alignItems: 'center'\r\n                                                }}\r\n                                            >\r\n                                                <IconBulb size={30} color='#2d6a4f' />\r\n                                                <span style={{ color: '#2d6a4f', marginLeft: 10, fontWeight: 500 }}>\r\n                                                    You can also specify multiple values for a config parameter by specifying the node id\r\n                                                </span>\r\n                                            </div>\r\n                                            <div style={{ padding: 10 }}>\r\n                                                <CopyBlock\r\n                                                    theme={atomOneDark}\r\n                                                    text={\r\n                                                        dialogProps.isFormDataRequired\r\n                                                            ? getMultiConfigCodeWithFormData(codeLang)\r\n                                                            : getMultiConfigCode()\r\n                                                    }\r\n                                                    language={getLang(codeLang)}\r\n                                                    showLineNumbers={false}\r\n                                                    wrapLines\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                    </>\r\n                                )}\r\n                                {getIsChatflowStreamingApi.data?.isStreaming && (\r\n                                    <p>\r\n                                        Read&nbsp;\r\n                                        <a rel='noreferrer' target='_blank' href='https://docs.flowiseai.com/how-to-use#streaming'>\r\n                                            here\r\n                                        </a>\r\n                                        &nbsp;on how to stream response back to application\r\n                                    </p>\r\n                                )}\r\n                            </>\r\n                        )}\r\n                        {codeLang === 'Share Chatbot' && !chatflowApiKeyId && (\r\n                            <ShareChatbot isSessionMemory={dialogProps.isSessionMemory} />\r\n                        )}\r\n                        {codeLang === 'Configuration' && <Configuration />}\r\n                    </TabPanel>\r\n                ))}\r\n            </DialogContent>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nAPICodeDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func\r\n}\r\n\r\nexport default APICodeDialog\r\n","import { createPortal } from 'react-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction, SET_CHATFLOW } from 'store/actions'\r\n\r\n// material-ui\r\nimport {\r\n    Typography,\r\n    Box,\r\n    Button,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogTitle,\r\n    DialogActions,\r\n    Accordion,\r\n    AccordionSummary,\r\n    AccordionDetails,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText\r\n} from '@mui/material'\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\r\nimport { IconX } from '@tabler/icons'\r\n\r\n// Project import\r\nimport CredentialInputHandler from 'views/canvas/CredentialInputHandler'\r\nimport { TooltipWithParser } from 'ui-component/tooltip/TooltipWithParser'\r\nimport { SwitchInput } from 'ui-component/switch/Switch'\r\nimport { Input } from 'ui-component/input/Input'\r\nimport { StyledButton } from 'ui-component/button/StyledButton'\r\nimport langsmithPNG from 'assets/images/langchain.png'\r\nimport langfusePNG from 'assets/images/langfuse.png'\r\nimport llmonitorPNG from 'assets/images/llmonitor.png'\r\n\r\n// store\r\nimport { HIDE_CANVAS_DIALOG, SHOW_CANVAS_DIALOG } from 'store/actions'\r\nimport useNotifier from 'utils/useNotifier'\r\n\r\n// API\r\nimport chatflowsApi from 'api/chatflows'\r\n\r\nconst analyticProviders = [\r\n    {\r\n        label: 'LangSmith',\r\n        name: 'langSmith',\r\n        icon: langsmithPNG,\r\n        url: 'https://smith.langchain.com',\r\n        inputs: [\r\n            {\r\n                label: 'Connect Credential',\r\n                name: 'credential',\r\n                type: 'credential',\r\n                credentialNames: ['langsmithApi']\r\n            },\r\n            {\r\n                label: 'Project Name',\r\n                name: 'projectName',\r\n                type: 'string',\r\n                optional: true,\r\n                description: 'If not provided, default will be used',\r\n                placeholder: 'default'\r\n            },\r\n            {\r\n                label: 'On/Off',\r\n                name: 'status',\r\n                type: 'boolean',\r\n                optional: true\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        label: 'LangFuse',\r\n        name: 'langFuse',\r\n        icon: langfusePNG,\r\n        url: 'https://langfuse.com',\r\n        inputs: [\r\n            {\r\n                label: 'Connect Credential',\r\n                name: 'credential',\r\n                type: 'credential',\r\n                credentialNames: ['langfuseApi']\r\n            },\r\n            {\r\n                label: 'Release',\r\n                name: 'release',\r\n                type: 'string',\r\n                optional: true,\r\n                description: 'The release number/hash of the application to provide analytics grouped by release'\r\n            },\r\n            {\r\n                label: 'On/Off',\r\n                name: 'status',\r\n                type: 'boolean',\r\n                optional: true\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        label: 'LLMonitor',\r\n        name: 'llmonitor',\r\n        icon: llmonitorPNG,\r\n        url: 'https://llmonitor.com',\r\n        inputs: [\r\n            {\r\n                label: 'Connect Credential',\r\n                name: 'credential',\r\n                type: 'credential',\r\n                credentialNames: ['llmonitorApi']\r\n            },\r\n            {\r\n                label: 'On/Off',\r\n                name: 'status',\r\n                type: 'boolean',\r\n                optional: true\r\n            }\r\n        ]\r\n    }\r\n]\r\n\r\nconst AnalyseFlowDialog = ({ show, dialogProps, onCancel }) => {\r\n    const portalElement = document.getElementById('portal')\r\n    const dispatch = useDispatch()\r\n\r\n    useNotifier()\r\n\r\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\r\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\r\n\r\n    const [analytic, setAnalytic] = useState({})\r\n    const [providerExpanded, setProviderExpanded] = useState({})\r\n\r\n    const onSave = async () => {\r\n        try {\r\n            const saveResp = await chatflowsApi.updateChatflow(dialogProps.chatflow.id, {\r\n                analytic: JSON.stringify(analytic)\r\n            })\r\n            if (saveResp.data) {\r\n                enqueueSnackbar({\r\n                    message: 'Analytic Configuration Saved',\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'success',\r\n                        action: (key) => (\r\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        )\r\n                    }\r\n                })\r\n                dispatch({ type: SET_CHATFLOW, chatflow: saveResp.data })\r\n            }\r\n            onCancel()\r\n        } catch (error) {\r\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n            enqueueSnackbar({\r\n                message: `Failed to save Analytic Configuration: ${errorData}`,\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const setValue = (value, providerName, inputParamName) => {\r\n        let newVal = {}\r\n        if (!Object.prototype.hasOwnProperty.call(analytic, providerName)) {\r\n            newVal = { ...analytic, [providerName]: {} }\r\n        } else {\r\n            newVal = { ...analytic }\r\n        }\r\n\r\n        newVal[providerName][inputParamName] = value\r\n        setAnalytic(newVal)\r\n    }\r\n\r\n    const handleAccordionChange = (providerName) => (event, isExpanded) => {\r\n        const accordianProviders = { ...providerExpanded }\r\n        accordianProviders[providerName] = isExpanded\r\n        setProviderExpanded(accordianProviders)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (dialogProps.chatflow && dialogProps.chatflow.analytic) {\r\n            try {\r\n                setAnalytic(JSON.parse(dialogProps.chatflow.analytic))\r\n            } catch (e) {\r\n                setAnalytic({})\r\n                console.error(e)\r\n            }\r\n        }\r\n\r\n        return () => {\r\n            setAnalytic({})\r\n            setProviderExpanded({})\r\n        }\r\n    }, [dialogProps])\r\n\r\n    useEffect(() => {\r\n        if (show) dispatch({ type: SHOW_CANVAS_DIALOG })\r\n        else dispatch({ type: HIDE_CANVAS_DIALOG })\r\n        return () => dispatch({ type: HIDE_CANVAS_DIALOG })\r\n    }, [show, dispatch])\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            onClose={onCancel}\r\n            open={show}\r\n            fullWidth\r\n            maxWidth='sm'\r\n            aria-labelledby='alert-dialog-title'\r\n            aria-describedby='alert-dialog-description'\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\r\n                Analyse Chatflow\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                {analyticProviders.map((provider, index) => (\r\n                    <Accordion\r\n                        expanded={providerExpanded[provider.name] || false}\r\n                        onChange={handleAccordionChange(provider.name)}\r\n                        disableGutters\r\n                        key={index}\r\n                    >\r\n                        <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls={provider.name} id={provider.name}>\r\n                            <ListItem style={{ padding: 0, margin: 0 }} alignItems='center'>\r\n                                <ListItemAvatar>\r\n                                    <div\r\n                                        style={{\r\n                                            width: 50,\r\n                                            height: 50,\r\n                                            borderRadius: '50%',\r\n                                            backgroundColor: 'white'\r\n                                        }}\r\n                                    >\r\n                                        <img\r\n                                            style={{\r\n                                                width: '100%',\r\n                                                height: '100%',\r\n                                                padding: 10,\r\n                                                objectFit: 'contain'\r\n                                            }}\r\n                                            alt='AI'\r\n                                            src={provider.icon}\r\n                                        />\r\n                                    </div>\r\n                                </ListItemAvatar>\r\n                                <ListItemText\r\n                                    sx={{ ml: 1 }}\r\n                                    primary={provider.label}\r\n                                    secondary={\r\n                                        <a target='_blank' rel='noreferrer' href={provider.url}>\r\n                                            {provider.url}\r\n                                        </a>\r\n                                    }\r\n                                />\r\n                                {analytic[provider.name] && analytic[provider.name].status && (\r\n                                    <div\r\n                                        style={{\r\n                                            display: 'flex',\r\n                                            flexDirection: 'row',\r\n                                            alignContent: 'center',\r\n                                            alignItems: 'center',\r\n                                            background: '#d8f3dc',\r\n                                            borderRadius: 15,\r\n                                            padding: 5,\r\n                                            paddingLeft: 7,\r\n                                            paddingRight: 7,\r\n                                            marginRight: 10\r\n                                        }}\r\n                                    >\r\n                                        <div\r\n                                            style={{\r\n                                                width: 15,\r\n                                                height: 15,\r\n                                                borderRadius: '50%',\r\n                                                backgroundColor: '#70e000'\r\n                                            }}\r\n                                        />\r\n                                        <span style={{ color: '#006400', marginLeft: 10 }}>ON</span>\r\n                                    </div>\r\n                                )}\r\n                            </ListItem>\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            {provider.inputs.map((inputParam, index) => (\r\n                                <Box key={index} sx={{ p: 2 }}>\r\n                                    <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                                        <Typography>\r\n                                            {inputParam.label}\r\n                                            {!inputParam.optional && <span style={{ color: 'red' }}>&nbsp;*</span>}\r\n                                            {inputParam.description && (\r\n                                                <TooltipWithParser style={{ marginLeft: 10 }} title={inputParam.description} />\r\n                                            )}\r\n                                        </Typography>\r\n                                    </div>\r\n                                    {providerExpanded[provider.name] && inputParam.type === 'credential' && (\r\n                                        <CredentialInputHandler\r\n                                            data={analytic[provider.name] ? { credential: analytic[provider.name].credentialId } : {}}\r\n                                            inputParam={inputParam}\r\n                                            onSelect={(newValue) => setValue(newValue, provider.name, 'credentialId')}\r\n                                        />\r\n                                    )}\r\n                                    {providerExpanded[provider.name] && inputParam.type === 'boolean' && (\r\n                                        <SwitchInput\r\n                                            onChange={(newValue) => setValue(newValue, provider.name, inputParam.name)}\r\n                                            value={\r\n                                                analytic[provider.name]\r\n                                                    ? analytic[provider.name][inputParam.name]\r\n                                                    : inputParam.default ?? false\r\n                                            }\r\n                                        />\r\n                                    )}\r\n                                    {providerExpanded[provider.name] &&\r\n                                        (inputParam.type === 'string' ||\r\n                                            inputParam.type === 'password' ||\r\n                                            inputParam.type === 'number') && (\r\n                                            <Input\r\n                                                inputParam={inputParam}\r\n                                                onChange={(newValue) => setValue(newValue, provider.name, inputParam.name)}\r\n                                                value={\r\n                                                    analytic[provider.name]\r\n                                                        ? analytic[provider.name][inputParam.name]\r\n                                                        : inputParam.default ?? ''\r\n                                                }\r\n                                            />\r\n                                        )}\r\n                                </Box>\r\n                            ))}\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                ))}\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <StyledButton variant='contained' onClick={onSave}>\r\n                    Save\r\n                </StyledButton>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nAnalyseFlowDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func\r\n}\r\n\r\nexport default AnalyseFlowDialog\r\n","var _path, _path2, _path3, _path4, _circle, _path5, _path6, _path7, _path8, _path9, _path10, _path11, _path12, _path13, _path14, _path15, _path16, _path17, _path18, _path19, _path20, _path21, _path22, _path23, _path24, _circle2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgMessageEmpty(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"data-name\": \"Layer 1\",\n    width: 576.49928,\n    height: 493.5,\n    viewBox: \"0 0 576.49928 493.5\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M481.17233,691.60038c9.25458-7.82,14.87595-20.17341,13.40175-32.19951s-10.605-23.08177-22.44888-25.63556-25.34517,4.51552-28.94256,16.08527c-1.97981-22.306-4.26119-45.54663-16.12049-64.54228-10.73831-17.2001-29.33726-29.50744-49.49431-31.70921s-41.37985,6.11408-53.95107,22.0238-15.64923,39.03914-6.84467,57.3048c6.486,13.45569,18.43551,23.46957,30.95562,31.61638a199.78578,199.78578,0,0,0,136.64075,29.89252\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#f2f2f2\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M343.54974,560.17414A326.87926,326.87926,0,0,1,389.10355,605.409a327.83254,327.83254,0,0,1,51.30832,85.74145c.92389,2.264-2.75246,3.24952-3.66608,1.0107a324.46215,324.46215,0,0,0-29.64717-56.09367,325.69973,325.69973,0,0,0-66.23723-73.20495c-1.898-1.54556.806-4.22115,2.68835-2.68834Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#fff\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M487.56461,691.60038c-9.25458-7.82-14.87595-20.17341-13.40175-32.19951s10.605-23.08177,22.44888-25.63556,25.34518,4.51552,28.94256,16.08527c1.97982-22.306,4.26119-45.54663,16.1205-64.54228,10.7383-17.2001,29.33725-29.50744,49.49431-31.70921s41.37984,6.11408,53.95106,22.0238,15.64923,39.03914,6.84468,57.3048c-6.486,13.45569-18.43552,23.46957-30.95563,31.61638a199.78578,199.78578,0,0,1-136.64075,29.89252\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#f2f2f2\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M625.18721,560.17414A326.87878,326.87878,0,0,0,579.63339,605.409a327.83254,327.83254,0,0,0-51.30832,85.74145c-.92389,2.264,2.75246,3.24952,3.66608,1.0107a325.98749,325.98749,0,0,1,95.8844-129.29862c1.898-1.54556-.806-4.22115-2.68834-2.68834Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#fff\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 203.27678,\n    cy: 191,\n    r: 31,\n    fill: \"#f2f2f2\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M419.4457,287.3877H633.02714V299.073H446.71128a83.41834,83.41834,0,0,0-83.41857,83.41839V515.25H339.92222a3.89516,3.89516,0,0,1-3.89508-3.89508V370.80609A83.41833,83.41833,0,0,1,419.4457,287.3877Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#f2f2f2\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M460.52714,692.25V514.75h52v177.5a4.50508,4.50508,0,0,1-4.5,4.5h-43A4.50508,4.50508,0,0,1,460.52714,692.25Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#3f3d56\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M325.02714,511.25V366.91553A86.76355,86.76355,0,0,1,411.69242,280.25H632.02714v236h-302A5.00573,5.00573,0,0,1,325.02714,511.25Zm305-229H411.69242a84.76141,84.76141,0,0,0-84.66528,84.66553V511.25a3.00328,3.00328,0,0,0,3,3h300Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#3f3d56\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M515.02714,410.25a18.02031,18.02031,0,0,1-18-18v-129a3.00328,3.00328,0,0,0-3-3h-70a5.0058,5.0058,0,0,1-5-5v-47a5.0058,5.0058,0,0,1,5-5h104a5.00573,5.00573,0,0,1,5,5v184A18.02031,18.02031,0,0,1,515.02714,410.25Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#673ab7\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M640.02714,278.25h0a56.88093,56.88093,0,0,1,57,56.76144V499.32108h112a16.96465,16.96465,0,0,1,17,16.92887h-243V335.01143A56.88093,56.88093,0,0,1,640.02714,278.25Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#3f3d56\"\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M626.34909,371.81749l11.80284,48.75606L869.03313,364.682l-11.80284-48.75606a3.6384,3.6384,0,0,0-2.35767-2.59508,3.59409,3.59409,0,0,0-1.33406-.20075L720.07937,244.02819a3.682,3.682,0,0,0-4.65628,1.11925l-64.31987,89.69375L626.85528,368.664a.51379.51379,0,0,0-.089.41825A3.64176,3.64176,0,0,0,626.34909,371.81749Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#fff\"\n  })), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M626.7663,369.08226a.48973.48973,0,0,0,.20314.31583.55943.55943,0,0,0,.43331.08552.53586.53586,0,0,0,.29889-.20727l.08326-.11537,1.26254-1.76554,22.92889-31.96427,64.30082-89.6732a2.6198,2.6198,0,0,1,3.32194-.79624l132.42537,68.56666,1.18838.6168a1.29216,1.29216,0,0,0,.14733.05165,1.61549,1.61549,0,0,1,.27147-.026.51364.51364,0,0,0,.28983-.24474.524.524,0,0,0-.21883-.7087l-.16408-.08726L720.07937,244.02819a3.682,3.682,0,0,0-4.65628,1.11925l-64.31987,89.69375L626.85528,368.664A.51379.51379,0,0,0,626.7663,369.08226Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#3f3d56\"\n  })), _path12 || (_path12 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M696.10724,374.05386l5.13934.57012,38.14252,4.22535,25.28583,2.79936,1.49358.166,31.55217-24.64477,1.20883-.944,7.45235-5.82019,26.5135-20.70629.15919-1.45441,9.43044-85.11413a4.4539,4.4539,0,0,0-3.92912-4.91152L712.7,224.27763a4.456,4.456,0,0,0-4.91157,3.9292L701.138,288.24439l-3.689,33.28581L694.149,351.30867l-1.52976,13.82919-.44637,4.00573A4.45691,4.45691,0,0,0,696.10724,374.05386Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#e6e6e6\"\n  })), _path13 || (_path13 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M730.69234,299.44776l54.51668,6.03806,19.33354,2.14069a6.53968,6.53968,0,1,0,1.43979-12.99988l-24.04683-2.66322-49.79941-5.52188a6.54306,6.54306,0,0,0-1.44377,13.00623Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#fff\"\n  })), _path14 || (_path14 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M727.58833,323.56377c.14068.02515.28136.05031.42455.06411l63.28515,7.0109,10.5663,1.17291a6.54214,6.54214,0,0,0,1.43855-13.005l-15.27834-1.69033-50.13045-5.5548-8.43621-.93485a6.53913,6.53913,0,0,0-1.86955,12.937Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#fff\"\n  })), _path15 || (_path15 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M720.42587,344.94759a6.53866,6.53866,0,0,0,4.88047,3.12537l25.9387,2.87281,46.19708,5.118.01018-.00247,1.47721.16462,7.45235-5.82019a6.47057,6.47057,0,0,0,.0011-1.33,6.5548,6.5548,0,0,0-5.78686-5.82386l-6.41729-.713-25.457-2.81712-18.31689-2.0315-23.66022-2.62223a6.54,6.54,0,0,0-6.31878,9.87953Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#fff\"\n  })), _path16 || (_path16 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M756.8588,269.96954l13.5644,1.50232,5.99124.66537,9.05013,1.00159a6.54214,6.54214,0,0,0,1.43855-13.005l-28.59932-3.16545a6.54059,6.54059,0,1,0-1.445,13.00113Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#fff\"\n  })), _path17 || (_path17 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M645.9437,306.1818l16.53736,68.3138,27.60123,5.24823,25.532,4.86089,27.39356,5.21238,8.753,1.6657a3.6733,3.6733,0,0,0,2.93957-.71161l7.02206-5.48451,4.44605-3.472,31.55217-24.64477-20.062-82.87362a4.40272,4.40272,0,0,0-1.24424-2.15908,4.44864,4.44864,0,0,0-4.12489-1.11718L649.22,300.81267A4.45037,4.45037,0,0,0,645.9437,306.1818Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#673ab7\"\n  })), _path18 || (_path18 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M683.86407,360.52788a6.54613,6.54613,0,0,0,7.89577,4.818l72.2144-17.48162a6.54974,6.54974,0,0,0,4.818-7.89578,2.09959,2.09959,0,0,0-.0705-.24672,6.53879,6.53879,0,0,0-7.82527-4.5713l-72.2144,17.48161A6.54613,6.54613,0,0,0,683.86407,360.52788Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#fff\"\n  })), _path19 || (_path19 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M690.08229,379.74383l25.532,4.86089L769.69885,371.512a6.54051,6.54051,0,1,0-3.07775-12.7138l-72.21439,17.48162a6.49388,6.49388,0,0,0-3.74749,2.51147A6.5835,6.5835,0,0,0,690.08229,379.74383Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#fff\"\n  })), _path20 || (_path20 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M743.00785,389.8171l8.753,1.6657a3.6733,3.6733,0,0,0,2.93957-.71161l7.02206-5.48451Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#fff\"\n  })), _path21 || (_path21 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M698.41482,323.89664a6.54611,6.54611,0,0,0,7.89577,4.818l27.97037-6.77105a6.54973,6.54973,0,0,0,4.818-7.89577,6.46594,6.46594,0,0,0-1.20489-2.48625,6.5454,6.5454,0,0,0-6.69088-2.33178l-27.97037,6.77105a6.54142,6.54142,0,0,0-4.818,7.89577Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#fff\"\n  })), _path22 || (_path22 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M715.61222,384.60434l27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357Zm81.83767-28.539.26672,1.10181,1.21521-.9448Zm-81.83767,28.539,27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357Zm0,0,27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357Zm-89.26313-12.78685,30.916,127.71019a3.66655,3.66655,0,0,0,4.42206,2.69835l223.76079-54.16788a3.6663,3.6663,0,0,0,2.69835-4.42206l-30.916-127.71018a3.6384,3.6384,0,0,0-2.35767-2.59508,3.59409,3.59409,0,0,0-1.33406-.20075,3.45812,3.45812,0,0,0-1.5141.3983,3.17906,3.17906,0,0,0-.60724.37708l-18.36413,14.33976-26.67024,20.83345-8.93478,6.97911.00182.00751-.00769.00186-32.7657,25.578-5.41664,4.23905-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357L690.656,378.79172,630.59485,367.362a3.59025,3.59025,0,0,0-1.54741.03342,3.66988,3.66988,0,0,0-1.78823,1.03592,4.11057,4.11057,0,0,0-.49291.65091A3.64176,3.64176,0,0,0,626.34909,371.81749Zm89.26313,12.78685,27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357Zm0,0,27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357Zm0,0,27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#fff\"\n  })), _path23 || (_path23 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M715.61222,384.60434l27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357Zm81.83767-28.539.26672,1.10181,1.21521-.9448Zm-81.83767,28.539,27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357Zm0,0,27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357ZM627.7849,369.161l.13589.102c.02275-.03727.06233-.07063.09239-.10968a2.64256,2.64256,0,0,1,2.38507-.76779l59.68567,11.354,25.5283,4.86479,27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357L690.656,378.79172,630.59485,367.362a3.59025,3.59025,0,0,0-1.54741.03342Zm-1.43581,2.65652,30.916,127.71019a3.66655,3.66655,0,0,0,4.42206,2.69835l223.76079-54.16788a3.6663,3.6663,0,0,0,2.69835-4.42206l-30.916-127.71018a3.6384,3.6384,0,0,0-2.35767-2.59508,3.59409,3.59409,0,0,0-1.33406-.20075,3.45812,3.45812,0,0,0-1.5141.3983,3.17906,3.17906,0,0,0-.60724.37708l-18.36413,14.33976-26.67024,20.83345-8.93478,6.97911.00182.00751-.00769.00186-32.7657,25.578-5.41664,4.23905-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357L690.656,378.79172,630.59485,367.362a3.59025,3.59025,0,0,0-1.54741.03342,3.66988,3.66988,0,0,0-1.78823,1.03592,4.11057,4.11057,0,0,0-.49291.65091A3.64176,3.64176,0,0,0,626.34909,371.81749Zm1.0196-.24682a2.59762,2.59762,0,0,1,.46152-2.19054.34094.34094,0,0,1,.09058-.11714c.02275-.03727.06233-.07063.09239-.10968a2.64256,2.64256,0,0,1,2.38507-.76779l59.68567,11.354,25.5283,4.86479,27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585,4.44395-3.47195,31.54686-24.64821,1.21521-.9448,7.44662-5.81748,26.5182-20.70938,19.17121-14.97157a2.60368,2.60368,0,0,1,.98714-.477,1.99722,1.99722,0,0,1,.30518-.05006,1.61549,1.61549,0,0,1,.27147-.026,2.67893,2.67893,0,0,1,.90068.14691,2.625,2.625,0,0,1,1.68605,1.85318l30.916,127.71019a2.61952,2.61952,0,0,1-1.93138,3.16522L661.4422,501.21416a2.61809,2.61809,0,0,1-3.1575-1.93331Zm88.24353,13.03367,27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357Zm0,0,27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357Zm0,0,27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#3f3d56\"\n  })), _path24 || (_path24 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M827.1291,422.96742a8.12818,8.12818,0,0,1,5.98077-9.80128l28.24156-6.8367a8.119,8.119,0,0,1,3.82051,15.78205l-28.24156,6.8367A8.12818,8.12818,0,0,1,827.1291,422.96742Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#673ab7\"\n  })), _circle2 || (_circle2 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 203.27678,\n    cy: 189,\n    r: 7,\n    fill: \"#fff\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgMessageEmpty);\nexport default __webpack_public_path__ + \"static/media/message_empty.e64ce71827642b3667c24731d5cfaaa0.svg\";\nexport { ForwardRef as ReactComponent };","import { memo } from 'react'\r\nimport ReactMarkdown from 'react-markdown'\r\n\r\nexport const MemoizedReactMarkdown = memo(ReactMarkdown, (prevProps, nextProps) => prevProps.children === nextProps.children)\r\n","import { IconClipboard, IconDownload } from '@tabler/icons'\r\nimport { memo, useState } from 'react'\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\r\nimport { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism'\r\nimport PropTypes from 'prop-types'\r\nimport { Box, IconButton, Popover, Typography } from '@mui/material'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\nconst programmingLanguages = {\r\n    javascript: '.js',\r\n    python: '.py',\r\n    java: '.java',\r\n    c: '.c',\r\n    cpp: '.cpp',\r\n    'c++': '.cpp',\r\n    'c#': '.cs',\r\n    ruby: '.rb',\r\n    php: '.php',\r\n    swift: '.swift',\r\n    'objective-c': '.m',\r\n    kotlin: '.kt',\r\n    typescript: '.ts',\r\n    go: '.go',\r\n    perl: '.pl',\r\n    rust: '.rs',\r\n    scala: '.scala',\r\n    haskell: '.hs',\r\n    lua: '.lua',\r\n    shell: '.sh',\r\n    sql: '.sql',\r\n    html: '.html',\r\n    css: '.css'\r\n}\r\n\r\nexport const CodeBlock = memo(({ language, chatflowid, isDialog, value }) => {\r\n    const theme = useTheme()\r\n    const [anchorEl, setAnchorEl] = useState(null)\r\n    const openPopOver = Boolean(anchorEl)\r\n\r\n    const handleClosePopOver = () => {\r\n        setAnchorEl(null)\r\n    }\r\n\r\n    const copyToClipboard = (event) => {\r\n        if (!navigator.clipboard || !navigator.clipboard.writeText) {\r\n            return\r\n        }\r\n\r\n        navigator.clipboard.writeText(value)\r\n        setAnchorEl(event.currentTarget)\r\n        setTimeout(() => {\r\n            handleClosePopOver()\r\n        }, 1500)\r\n    }\r\n\r\n    const downloadAsFile = () => {\r\n        const fileExtension = programmingLanguages[language] || '.file'\r\n        const suggestedFileName = `file-${chatflowid}${fileExtension}`\r\n        const fileName = suggestedFileName\r\n\r\n        if (!fileName) {\r\n            // user pressed cancel on prompt\r\n            return\r\n        }\r\n\r\n        const blob = new Blob([value], { type: 'text/plain' })\r\n        const url = URL.createObjectURL(blob)\r\n        const link = document.createElement('a')\r\n        link.download = fileName\r\n        link.href = url\r\n        link.style.display = 'none'\r\n        document.body.appendChild(link)\r\n        link.click()\r\n        document.body.removeChild(link)\r\n        URL.revokeObjectURL(url)\r\n    }\r\n\r\n    return (\r\n        <div style={{ width: isDialog ? '' : 300 }}>\r\n            <Box sx={{ color: 'white', background: theme.palette?.common.dark, p: 1, borderTopLeftRadius: 10, borderTopRightRadius: 10 }}>\r\n                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                    {language}\r\n                    <div style={{ flex: 1 }}></div>\r\n                    <IconButton size='small' title='Copy' color='success' onClick={copyToClipboard}>\r\n                        <IconClipboard />\r\n                    </IconButton>\r\n                    <Popover\r\n                        open={openPopOver}\r\n                        anchorEl={anchorEl}\r\n                        onClose={handleClosePopOver}\r\n                        anchorOrigin={{\r\n                            vertical: 'top',\r\n                            horizontal: 'right'\r\n                        }}\r\n                        transformOrigin={{\r\n                            vertical: 'top',\r\n                            horizontal: 'left'\r\n                        }}\r\n                    >\r\n                        <Typography variant='h6' sx={{ pl: 1, pr: 1, color: 'white', background: theme.palette.success.dark }}>\r\n                            Copied!\r\n                        </Typography>\r\n                    </Popover>\r\n                    <IconButton size='small' title='Download' color='primary' onClick={downloadAsFile}>\r\n                        <IconDownload />\r\n                    </IconButton>\r\n                </div>\r\n            </Box>\r\n\r\n            <SyntaxHighlighter language={language} style={oneDark} customStyle={{ margin: 0 }}>\r\n                {value}\r\n            </SyntaxHighlighter>\r\n        </div>\r\n    )\r\n})\r\nCodeBlock.displayName = 'CodeBlock'\r\n\r\nCodeBlock.propTypes = {\r\n    language: PropTypes.string,\r\n    chatflowid: PropTypes.string,\r\n    isDialog: PropTypes.bool,\r\n    value: PropTypes.string\r\n}\r\n","import { createPortal } from 'react-dom'\r\nimport { useState, useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { Dialog, DialogContent, DialogTitle } from '@mui/material'\r\nimport ReactJson from 'flowise-react-json-view'\r\n\r\nconst SourceDocDialog = ({ show, dialogProps, onCancel }) => {\r\n    const portalElement = document.getElementById('portal')\r\n    const customization = useSelector((state) => state.customization)\r\n\r\n    const [data, setData] = useState({})\r\n\r\n    useEffect(() => {\r\n        if (dialogProps.data) setData(dialogProps.data)\r\n\r\n        return () => {\r\n            setData({})\r\n        }\r\n    }, [dialogProps])\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            onClose={onCancel}\r\n            open={show}\r\n            fullWidth\r\n            maxWidth='sm'\r\n            aria-labelledby='alert-dialog-title'\r\n            aria-describedby='alert-dialog-description'\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\r\n                {dialogProps.title ?? 'Source Documents'}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <ReactJson\r\n                    theme={customization.isDarkMode ? 'ocean' : 'rjv-default'}\r\n                    style={{ padding: 10, borderRadius: 10 }}\r\n                    src={data}\r\n                    name={null}\r\n                    quotesOnKeys={false}\r\n                    enableClipboard={false}\r\n                    displayDataTypes={false}\r\n                />\r\n            </DialogContent>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nSourceDocDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func\r\n}\r\n\r\nexport default SourceDocDialog\r\n","import client from './client'\r\n\r\nconst getInternalChatmessageFromChatflow = (id) => client.get(`/internal-chatmessage/${id}`)\r\nconst getAllChatmessageFromChatflow = (id, params = {}) => client.get(`/chatmessage/${id}`, { params: { order: 'DESC', ...params } })\r\nconst getChatmessageFromPK = (id, params = {}) => client.get(`/chatmessage/${id}`, { params: { order: 'ASC', ...params } })\r\nconst deleteChatmessage = (id, params = {}) => client.delete(`/chatmessage/${id}`, { params: { ...params } })\r\n\r\nexport default {\r\n    getInternalChatmessageFromChatflow,\r\n    getAllChatmessageFromChatflow,\r\n    getChatmessageFromPK,\r\n    deleteChatmessage\r\n}\r\n","import { createPortal } from 'react-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useState, useEffect, forwardRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport moment from 'moment'\r\nimport rehypeMathjax from 'rehype-mathjax'\r\nimport rehypeRaw from 'rehype-raw'\r\nimport remarkGfm from 'remark-gfm'\r\nimport remarkMath from 'remark-math'\r\nimport axios from 'axios'\r\n\r\n// material-ui\r\nimport {\r\n    Button,\r\n    Tooltip,\r\n    ListItemButton,\r\n    Box,\r\n    Stack,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogTitle,\r\n    ListItem,\r\n    ListItemText,\r\n    Chip\r\n} from '@mui/material'\r\nimport { useTheme } from '@mui/material/styles'\r\nimport DatePicker from 'react-datepicker'\r\n\r\nimport robotPNG from 'assets/images/robot.png'\r\nimport userPNG from 'assets/images/account.png'\r\nimport msgEmptySVG from 'assets/images/message_empty.svg'\r\nimport { IconFileExport, IconEraser, IconX, IconDownload } from '@tabler/icons'\r\n\r\n// Project import\r\nimport { MemoizedReactMarkdown } from 'ui-component/markdown/MemoizedReactMarkdown'\r\nimport { CodeBlock } from 'ui-component/markdown/CodeBlock'\r\nimport SourceDocDialog from 'ui-component/dialog/SourceDocDialog'\r\nimport { MultiDropdown } from 'ui-component/dropdown/MultiDropdown'\r\nimport { StyledButton } from 'ui-component/button/StyledButton'\r\n\r\n// store\r\nimport { HIDE_CANVAS_DIALOG, SHOW_CANVAS_DIALOG } from 'store/actions'\r\n\r\n// API\r\nimport chatmessageApi from 'api/chatmessage'\r\nimport useApi from 'hooks/useApi'\r\nimport useConfirm from 'hooks/useConfirm'\r\n\r\n// Utils\r\nimport { isValidURL, removeDuplicateURL } from 'utils/genericHelper'\r\nimport useNotifier from 'utils/useNotifier'\r\nimport { baseURL } from 'store/constant'\r\n\r\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction } from 'store/actions'\r\n\r\nimport 'views/chatmessage/ChatMessage.css'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\n\r\nconst DatePickerCustomInput = forwardRef(function DatePickerCustomInput({ value, onClick }, ref) {\r\n    return (\r\n        <ListItemButton style={{ borderRadius: 15, border: '1px solid #e0e0e0' }} onClick={onClick} ref={ref}>\r\n            {value}\r\n        </ListItemButton>\r\n    )\r\n})\r\n\r\nDatePickerCustomInput.propTypes = {\r\n    value: PropTypes.string,\r\n    onClick: PropTypes.func\r\n}\r\n\r\nconst ViewMessagesDialog = ({ show, dialogProps, onCancel }) => {\r\n    const portalElement = document.getElementById('portal')\r\n    const dispatch = useDispatch()\r\n    const theme = useTheme()\r\n    const customization = useSelector((state) => state.customization)\r\n    const { confirm } = useConfirm()\r\n\r\n    useNotifier()\r\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\r\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\r\n\r\n    const [chatlogs, setChatLogs] = useState([])\r\n    const [allChatlogs, setAllChatLogs] = useState([])\r\n    const [chatMessages, setChatMessages] = useState([])\r\n    const [selectedMessageIndex, setSelectedMessageIndex] = useState(0)\r\n    const [sourceDialogOpen, setSourceDialogOpen] = useState(false)\r\n    const [sourceDialogProps, setSourceDialogProps] = useState({})\r\n    const [chatTypeFilter, setChatTypeFilter] = useState([])\r\n    const [startDate, setStartDate] = useState(new Date().setMonth(new Date().getMonth() - 1))\r\n    const [endDate, setEndDate] = useState(new Date())\r\n\r\n    const getChatmessageApi = useApi(chatmessageApi.getAllChatmessageFromChatflow)\r\n    const getChatmessageFromPKApi = useApi(chatmessageApi.getChatmessageFromPK)\r\n\r\n    const onStartDateSelected = (date) => {\r\n        setStartDate(date)\r\n        getChatmessageApi.request(dialogProps.chatflow.id, {\r\n            startDate: date,\r\n            endDate: endDate,\r\n            chatType: chatTypeFilter.length ? chatTypeFilter : undefined\r\n        })\r\n    }\r\n\r\n    const onEndDateSelected = (date) => {\r\n        setEndDate(date)\r\n        getChatmessageApi.request(dialogProps.chatflow.id, {\r\n            endDate: date,\r\n            startDate: startDate,\r\n            chatType: chatTypeFilter.length ? chatTypeFilter : undefined\r\n        })\r\n    }\r\n\r\n    const onChatTypeSelected = (chatTypes) => {\r\n        setChatTypeFilter(chatTypes)\r\n        getChatmessageApi.request(dialogProps.chatflow.id, {\r\n            chatType: chatTypes.length ? chatTypes : undefined,\r\n            startDate: startDate,\r\n            endDate: endDate\r\n        })\r\n    }\r\n\r\n    const exportMessages = () => {\r\n        const obj = {}\r\n        for (let i = 0; i < allChatlogs.length; i += 1) {\r\n            const chatmsg = allChatlogs[i]\r\n            const chatPK = getChatPK(chatmsg)\r\n            const msg = {\r\n                content: chatmsg.content,\r\n                role: chatmsg.role === 'apiMessage' ? 'bot' : 'user',\r\n                time: chatmsg.createdDate\r\n            }\r\n            if (chatmsg.sourceDocuments) msg.sourceDocuments = JSON.parse(chatmsg.sourceDocuments)\r\n            if (chatmsg.usedTools) msg.usedTools = JSON.parse(chatmsg.usedTools)\r\n            if (chatmsg.fileAnnotations) msg.fileAnnotations = JSON.parse(chatmsg.fileAnnotations)\r\n\r\n            if (!Object.prototype.hasOwnProperty.call(obj, chatPK)) {\r\n                obj[chatPK] = {\r\n                    id: chatmsg.chatId,\r\n                    source: chatmsg.chatType === 'INTERNAL' ? 'UI' : 'API/Embed',\r\n                    sessionId: chatmsg.sessionId ?? null,\r\n                    memoryType: chatmsg.memoryType ?? null,\r\n                    messages: [msg]\r\n                }\r\n            } else if (Object.prototype.hasOwnProperty.call(obj, chatPK)) {\r\n                obj[chatPK].messages = [...obj[chatPK].messages, msg]\r\n            }\r\n        }\r\n\r\n        const exportMessages = []\r\n        for (const key in obj) {\r\n            exportMessages.push({\r\n                ...obj[key]\r\n            })\r\n        }\r\n\r\n        for (let i = 0; i < exportMessages.length; i += 1) {\r\n            exportMessages[i].messages = exportMessages[i].messages.reverse()\r\n        }\r\n\r\n        const dataStr = JSON.stringify(exportMessages, null, 2)\r\n        const dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr)\r\n\r\n        const exportFileDefaultName = `${dialogProps.chatflow.id}-Message.json`\r\n\r\n        let linkElement = document.createElement('a')\r\n        linkElement.setAttribute('href', dataUri)\r\n        linkElement.setAttribute('download', exportFileDefaultName)\r\n        linkElement.click()\r\n    }\r\n\r\n    const clearChat = async (chatmsg) => {\r\n        const description =\r\n            chatmsg.sessionId && chatmsg.memoryType\r\n                ? `Are you sure you want to clear session id: ${chatmsg.sessionId} from ${chatmsg.memoryType}?`\r\n                : `Are you sure you want to clear messages?`\r\n        const confirmPayload = {\r\n            title: `Clear Session`,\r\n            description,\r\n            confirmButtonName: 'Clear',\r\n            cancelButtonName: 'Cancel'\r\n        }\r\n        const isConfirmed = await confirm(confirmPayload)\r\n\r\n        const chatflowid = dialogProps.chatflow.id\r\n        if (isConfirmed) {\r\n            try {\r\n                const obj = { chatflowid, isClearFromViewMessageDialog: true }\r\n                if (chatmsg.chatId) obj.chatId = chatmsg.chatId\r\n                if (chatmsg.chatType) obj.chatType = chatmsg.chatType\r\n                if (chatmsg.memoryType) obj.memoryType = chatmsg.memoryType\r\n                if (chatmsg.sessionId) obj.sessionId = chatmsg.sessionId\r\n\r\n                await chatmessageApi.deleteChatmessage(chatflowid, obj)\r\n                const description =\r\n                    chatmsg.sessionId && chatmsg.memoryType\r\n                        ? `Succesfully cleared session id: ${chatmsg.sessionId} from ${chatmsg.memoryType}`\r\n                        : `Succesfully cleared messages`\r\n                enqueueSnackbar({\r\n                    message: description,\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'success',\r\n                        action: (key) => (\r\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        )\r\n                    }\r\n                })\r\n                getChatmessageApi.request(chatflowid)\r\n            } catch (error) {\r\n                const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n                enqueueSnackbar({\r\n                    message: errorData,\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'error',\r\n                        persist: true,\r\n                        action: (key) => (\r\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    const getChatMessages = (chatmessages) => {\r\n        let prevDate = ''\r\n        const loadedMessages = []\r\n        for (let i = 0; i < chatmessages.length; i += 1) {\r\n            const chatmsg = chatmessages[i]\r\n            if (!prevDate) {\r\n                prevDate = chatmsg.createdDate.split('T')[0]\r\n                loadedMessages.push({\r\n                    message: chatmsg.createdDate,\r\n                    type: 'timeMessage'\r\n                })\r\n            } else {\r\n                const currentDate = chatmsg.createdDate.split('T')[0]\r\n                if (currentDate !== prevDate) {\r\n                    prevDate = currentDate\r\n                    loadedMessages.push({\r\n                        message: chatmsg.createdDate,\r\n                        type: 'timeMessage'\r\n                    })\r\n                }\r\n            }\r\n            const obj = {\r\n                ...chatmsg,\r\n                message: chatmsg.content,\r\n                type: chatmsg.role\r\n            }\r\n            if (chatmsg.sourceDocuments) obj.sourceDocuments = JSON.parse(chatmsg.sourceDocuments)\r\n            if (chatmsg.usedTools) obj.usedTools = JSON.parse(chatmsg.usedTools)\r\n            if (chatmsg.fileAnnotations) obj.fileAnnotations = JSON.parse(chatmsg.fileAnnotations)\r\n\r\n            loadedMessages.push(obj)\r\n        }\r\n        setChatMessages(loadedMessages)\r\n    }\r\n\r\n    const getChatPK = (chatmsg) => {\r\n        const chatId = chatmsg.chatId\r\n        const memoryType = chatmsg.memoryType ?? 'null'\r\n        const sessionId = chatmsg.sessionId ?? 'null'\r\n        return `${chatId}_${memoryType}_${sessionId}`\r\n    }\r\n\r\n    const transformChatPKToParams = (chatPK) => {\r\n        let [c1, c2, ...rest] = chatPK.split('_')\r\n        const chatId = c1\r\n        const memoryType = c2\r\n        const sessionId = rest.join('_')\r\n\r\n        const params = { chatId }\r\n        if (memoryType !== 'null') params.memoryType = memoryType\r\n        if (sessionId !== 'null') params.sessionId = sessionId\r\n\r\n        return params\r\n    }\r\n\r\n    const processChatLogs = (allChatMessages) => {\r\n        const seen = {}\r\n        const filteredChatLogs = []\r\n        for (let i = 0; i < allChatMessages.length; i += 1) {\r\n            const PK = getChatPK(allChatMessages[i])\r\n\r\n            const item = allChatMessages[i]\r\n            if (!Object.prototype.hasOwnProperty.call(seen, PK)) {\r\n                seen[PK] = {\r\n                    counter: 1,\r\n                    item: allChatMessages[i]\r\n                }\r\n            } else if (Object.prototype.hasOwnProperty.call(seen, PK) && seen[PK].counter === 1) {\r\n                seen[PK] = {\r\n                    counter: 2,\r\n                    item: {\r\n                        ...seen[PK].item,\r\n                        apiContent:\r\n                            seen[PK].item.role === 'apiMessage' ? `Bot: ${seen[PK].item.content}` : `User: ${seen[PK].item.content}`,\r\n                        userContent: item.role === 'apiMessage' ? `Bot: ${item.content}` : `User: ${item.content}`\r\n                    }\r\n                }\r\n                filteredChatLogs.push(seen[PK].item)\r\n            }\r\n        }\r\n        setChatLogs(filteredChatLogs)\r\n        if (filteredChatLogs.length) return getChatPK(filteredChatLogs[0])\r\n        return undefined\r\n    }\r\n\r\n    const handleItemClick = (idx, chatmsg) => {\r\n        setSelectedMessageIndex(idx)\r\n        getChatmessageFromPKApi.request(dialogProps.chatflow.id, transformChatPKToParams(getChatPK(chatmsg)))\r\n    }\r\n\r\n    const onURLClick = (data) => {\r\n        window.open(data, '_blank')\r\n    }\r\n\r\n    const downloadFile = async (fileAnnotation) => {\r\n        try {\r\n            const response = await axios.post(\r\n                `${baseURL}/api/v1/openai-assistants-file`,\r\n                { fileName: fileAnnotation.fileName },\r\n                { responseType: 'blob' }\r\n            )\r\n            const blob = new Blob([response.data], { type: response.headers['content-type'] })\r\n            const downloadUrl = window.URL.createObjectURL(blob)\r\n            const link = document.createElement('a')\r\n            link.href = downloadUrl\r\n            link.download = fileAnnotation.fileName\r\n            document.body.appendChild(link)\r\n            link.click()\r\n            link.remove()\r\n        } catch (error) {\r\n            console.error('Download failed:', error)\r\n        }\r\n    }\r\n\r\n    const onSourceDialogClick = (data, title) => {\r\n        setSourceDialogProps({ data, title })\r\n        setSourceDialogOpen(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (getChatmessageFromPKApi.data) {\r\n            getChatMessages(getChatmessageFromPKApi.data)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getChatmessageFromPKApi.data])\r\n\r\n    useEffect(() => {\r\n        if (getChatmessageApi.data) {\r\n            setAllChatLogs(getChatmessageApi.data)\r\n            const chatPK = processChatLogs(getChatmessageApi.data)\r\n            setSelectedMessageIndex(0)\r\n            if (chatPK) getChatmessageFromPKApi.request(dialogProps.chatflow.id, transformChatPKToParams(chatPK))\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getChatmessageApi.data])\r\n\r\n    useEffect(() => {\r\n        if (dialogProps.chatflow) {\r\n            getChatmessageApi.request(dialogProps.chatflow.id)\r\n        }\r\n\r\n        return () => {\r\n            setChatLogs([])\r\n            setAllChatLogs([])\r\n            setChatMessages([])\r\n            setChatTypeFilter([])\r\n            setSelectedMessageIndex(0)\r\n            setStartDate(new Date().setMonth(new Date().getMonth() - 1))\r\n            setEndDate(new Date())\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [dialogProps])\r\n\r\n    useEffect(() => {\r\n        if (show) dispatch({ type: SHOW_CANVAS_DIALOG })\r\n        else dispatch({ type: HIDE_CANVAS_DIALOG })\r\n        return () => dispatch({ type: HIDE_CANVAS_DIALOG })\r\n    }, [show, dispatch])\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            onClose={onCancel}\r\n            open={show}\r\n            fullWidth\r\n            maxWidth={chatlogs && chatlogs.length == 0 ? 'md' : 'lg'}\r\n            aria-labelledby='alert-dialog-title'\r\n            aria-describedby='alert-dialog-description'\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\r\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                    {dialogProps.title}\r\n                    <div style={{ flex: 1 }} />\r\n                    <Button variant='outlined' onClick={() => exportMessages()} startIcon={<IconFileExport />}>\r\n                        Export\r\n                    </Button>\r\n                </div>\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <>\r\n                    <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', width: '100%', marginBottom: 10 }}>\r\n                        <div style={{ marginRight: 10 }}>\r\n                            <b style={{ marginRight: 10 }}>From Date</b>\r\n                            <DatePicker\r\n                                selected={startDate}\r\n                                onChange={(date) => onStartDateSelected(date)}\r\n                                selectsStart\r\n                                startDate={startDate}\r\n                                endDate={endDate}\r\n                                customInput={<DatePickerCustomInput />}\r\n                            />\r\n                        </div>\r\n                        <div style={{ marginRight: 10 }}>\r\n                            <b style={{ marginRight: 10 }}>To Date</b>\r\n                            <DatePicker\r\n                                selected={endDate}\r\n                                onChange={(date) => onEndDateSelected(date)}\r\n                                selectsEnd\r\n                                startDate={startDate}\r\n                                endDate={endDate}\r\n                                minDate={startDate}\r\n                                maxDate={new Date()}\r\n                                customInput={<DatePickerCustomInput />}\r\n                            />\r\n                        </div>\r\n                        <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', minWidth: '200px', marginRight: 10 }}>\r\n                            <b style={{ marginRight: 10 }}>Source</b>\r\n                            <MultiDropdown\r\n                                key={JSON.stringify(chatTypeFilter)}\r\n                                name='chatType'\r\n                                options={[\r\n                                    {\r\n                                        label: 'UI',\r\n                                        name: 'INTERNAL'\r\n                                    },\r\n                                    {\r\n                                        label: 'API/Embed',\r\n                                        name: 'EXTERNAL'\r\n                                    }\r\n                                ]}\r\n                                onSelect={(newValue) => onChatTypeSelected(newValue)}\r\n                                value={chatTypeFilter}\r\n                                formControlSx={{ mt: 0 }}\r\n                            />\r\n                        </div>\r\n                        <div style={{ flex: 1 }}></div>\r\n                    </div>\r\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                        {chatlogs && chatlogs.length == 0 && (\r\n                            <Stack sx={{ alignItems: 'center', justifyContent: 'center', width: '100%' }} flexDirection='column'>\r\n                                <Box sx={{ p: 5, height: 'auto' }}>\r\n                                    <img\r\n                                        style={{ objectFit: 'cover', height: '20vh', width: 'auto' }}\r\n                                        src={msgEmptySVG}\r\n                                        alt='msgEmptySVG'\r\n                                    />\r\n                                </Box>\r\n                                <div>No Messages</div>\r\n                            </Stack>\r\n                        )}\r\n                        {chatlogs && chatlogs.length > 0 && (\r\n                            <div style={{ flexBasis: '40%' }}>\r\n                                <Box\r\n                                    sx={{\r\n                                        overflowY: 'auto',\r\n                                        display: 'flex',\r\n                                        flexGrow: 1,\r\n                                        flexDirection: 'column',\r\n                                        maxHeight: 'calc(100vh - 260px)'\r\n                                    }}\r\n                                >\r\n                                    {chatlogs.map((chatmsg, index) => (\r\n                                        <ListItemButton\r\n                                            key={index}\r\n                                            sx={{\r\n                                                p: 0,\r\n                                                borderRadius: `${customization.borderRadius}px`,\r\n                                                boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\r\n                                                mt: 1,\r\n                                                ml: 1,\r\n                                                mr: 1,\r\n                                                mb: index === chatlogs.length - 1 ? 1 : 0\r\n                                            }}\r\n                                            selected={selectedMessageIndex === index}\r\n                                            onClick={() => handleItemClick(index, chatmsg)}\r\n                                        >\r\n                                            <ListItem alignItems='center'>\r\n                                                <ListItemText\r\n                                                    primary={\r\n                                                        <div style={{ display: 'flex', flexDirection: 'column', marginBottom: 10 }}>\r\n                                                            <span>{chatmsg?.userContent}</span>\r\n                                                            <div\r\n                                                                style={{\r\n                                                                    maxHeight: '100px',\r\n                                                                    maxWidth: '400px',\r\n                                                                    whiteSpace: 'nowrap',\r\n                                                                    overflow: 'hidden',\r\n                                                                    textOverflow: 'ellipsis'\r\n                                                                }}\r\n                                                            >\r\n                                                                {chatmsg?.apiContent}\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    }\r\n                                                    secondary={moment(chatmsg.createdDate).format('MMMM Do YYYY, h:mm:ss a')}\r\n                                                />\r\n                                            </ListItem>\r\n                                        </ListItemButton>\r\n                                    ))}\r\n                                </Box>\r\n                            </div>\r\n                        )}\r\n                        {chatlogs && chatlogs.length > 0 && (\r\n                            <div style={{ flexBasis: '60%', paddingRight: '30px' }}>\r\n                                {chatMessages && chatMessages.length > 1 && (\r\n                                    <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                                        <div style={{ flex: 1, marginLeft: '20px', marginBottom: '15px', marginTop: '10px' }}>\r\n                                            {chatMessages[1].sessionId && (\r\n                                                <div>\r\n                                                    Session Id:&nbsp;<b>{chatMessages[1].sessionId}</b>\r\n                                                </div>\r\n                                            )}\r\n                                            {chatMessages[1].chatType && (\r\n                                                <div>\r\n                                                    Source:&nbsp;<b>{chatMessages[1].chatType === 'INTERNAL' ? 'UI' : 'API/Embed'}</b>\r\n                                                </div>\r\n                                            )}\r\n                                            {chatMessages[1].memoryType && (\r\n                                                <div>\r\n                                                    Memory:&nbsp;<b>{chatMessages[1].memoryType}</b>\r\n                                                </div>\r\n                                            )}\r\n                                        </div>\r\n                                        <div\r\n                                            style={{\r\n                                                display: 'flex',\r\n                                                flexDirection: 'column',\r\n                                                alignContent: 'center',\r\n                                                alignItems: 'end'\r\n                                            }}\r\n                                        >\r\n                                            <StyledButton\r\n                                                sx={{ height: 'max-content', width: 'max-content' }}\r\n                                                variant='outlined'\r\n                                                color='error'\r\n                                                title='Clear Message'\r\n                                                onClick={() => clearChat(chatMessages[1])}\r\n                                                startIcon={<IconEraser />}\r\n                                            >\r\n                                                Clear\r\n                                            </StyledButton>\r\n                                            {chatMessages[1].sessionId && (\r\n                                                <Tooltip\r\n                                                    title={\r\n                                                        'At your left 👈 you will see the Memory node that was used in this conversation. You need to have the matching Memory node with same parameters in the canvas, in order to delete the session conversations stored on the Memory node'\r\n                                                    }\r\n                                                    placement='bottom'\r\n                                                >\r\n                                                    <h5 style={{ cursor: 'pointer', color: theme.palette.primary.main }}>\r\n                                                        Why my session is not deleted?\r\n                                                    </h5>\r\n                                                </Tooltip>\r\n                                            )}\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                                <div\r\n                                    style={{\r\n                                        marginLeft: '20px',\r\n                                        border: '1px solid #e0e0e0',\r\n                                        borderRadius: `${customization.borderRadius}px`\r\n                                    }}\r\n                                    className='cloud-message'\r\n                                >\r\n                                    <div style={{ width: '100%', height: '100%' }}>\r\n                                        {chatMessages &&\r\n                                            chatMessages.map((message, index) => {\r\n                                                if (message.type === 'apiMessage' || message.type === 'userMessage') {\r\n                                                    return (\r\n                                                        <Box\r\n                                                            sx={{\r\n                                                                background:\r\n                                                                    message.type === 'apiMessage' ? theme.palette.asyncSelect.main : '',\r\n                                                                pl: 1,\r\n                                                                pr: 1\r\n                                                            }}\r\n                                                            key={index}\r\n                                                            style={{ display: 'flex', justifyContent: 'center', alignContent: 'center' }}\r\n                                                        >\r\n                                                            {/* Display the correct icon depending on the message type */}\r\n                                                            {message.type === 'apiMessage' ? (\r\n                                                                <img\r\n                                                                    style={{ marginLeft: '10px' }}\r\n                                                                    src={robotPNG}\r\n                                                                    alt='AI'\r\n                                                                    width='25'\r\n                                                                    height='25'\r\n                                                                    className='boticon'\r\n                                                                />\r\n                                                            ) : (\r\n                                                                <img\r\n                                                                    style={{ marginLeft: '10px' }}\r\n                                                                    src={userPNG}\r\n                                                                    alt='Me'\r\n                                                                    width='25'\r\n                                                                    height='25'\r\n                                                                    className='usericon'\r\n                                                                />\r\n                                                            )}\r\n                                                            <div\r\n                                                                style={{\r\n                                                                    display: 'flex',\r\n                                                                    flexDirection: 'column',\r\n                                                                    width: '100%'\r\n                                                                }}\r\n                                                            >\r\n                                                                {message.usedTools && (\r\n                                                                    <div style={{ display: 'block', flexDirection: 'row', width: '100%' }}>\r\n                                                                        {message.usedTools.map((tool, index) => {\r\n                                                                            return (\r\n                                                                                <Chip\r\n                                                                                    size='small'\r\n                                                                                    key={index}\r\n                                                                                    label={tool.tool}\r\n                                                                                    component='a'\r\n                                                                                    sx={{ mr: 1, mt: 1 }}\r\n                                                                                    variant='outlined'\r\n                                                                                    clickable\r\n                                                                                    onClick={() => onSourceDialogClick(tool, 'Used Tools')}\r\n                                                                                />\r\n                                                                            )\r\n                                                                        })}\r\n                                                                    </div>\r\n                                                                )}\r\n                                                                <div className='markdownanswer'>\r\n                                                                    {/* Messages are being rendered in Markdown format */}\r\n                                                                    <MemoizedReactMarkdown\r\n                                                                        remarkPlugins={[remarkGfm, remarkMath]}\r\n                                                                        rehypePlugins={[rehypeMathjax, rehypeRaw]}\r\n                                                                        components={{\r\n                                                                            code({ inline, className, children, ...props }) {\r\n                                                                                const match = /language-(\\w+)/.exec(className || '')\r\n                                                                                return !inline ? (\r\n                                                                                    <CodeBlock\r\n                                                                                        key={Math.random()}\r\n                                                                                        chatflowid={dialogProps.chatflow.id}\r\n                                                                                        isDialog={true}\r\n                                                                                        language={(match && match[1]) || ''}\r\n                                                                                        value={String(children).replace(/\\n$/, '')}\r\n                                                                                        {...props}\r\n                                                                                    />\r\n                                                                                ) : (\r\n                                                                                    <code className={className} {...props}>\r\n                                                                                        {children}\r\n                                                                                    </code>\r\n                                                                                )\r\n                                                                            }\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        {message.message}\r\n                                                                    </MemoizedReactMarkdown>\r\n                                                                </div>\r\n                                                                {message.fileAnnotations && (\r\n                                                                    <div style={{ display: 'block', flexDirection: 'row', width: '100%' }}>\r\n                                                                        {message.fileAnnotations.map((fileAnnotation, index) => {\r\n                                                                            return (\r\n                                                                                <Button\r\n                                                                                    sx={{\r\n                                                                                        fontSize: '0.85rem',\r\n                                                                                        textTransform: 'none',\r\n                                                                                        mb: 1,\r\n                                                                                        mr: 1\r\n                                                                                    }}\r\n                                                                                    key={index}\r\n                                                                                    variant='outlined'\r\n                                                                                    onClick={() => downloadFile(fileAnnotation)}\r\n                                                                                    endIcon={\r\n                                                                                        <IconDownload color={theme.palette.primary.main} />\r\n                                                                                    }\r\n                                                                                >\r\n                                                                                    {fileAnnotation.fileName}\r\n                                                                                </Button>\r\n                                                                            )\r\n                                                                        })}\r\n                                                                    </div>\r\n                                                                )}\r\n                                                                {message.sourceDocuments && (\r\n                                                                    <div style={{ display: 'block', flexDirection: 'row', width: '100%' }}>\r\n                                                                        {removeDuplicateURL(message).map((source, index) => {\r\n                                                                            const URL =\r\n                                                                                source.metadata && source.metadata.source\r\n                                                                                    ? isValidURL(source.metadata.source)\r\n                                                                                    : undefined\r\n                                                                            return (\r\n                                                                                <Chip\r\n                                                                                    size='small'\r\n                                                                                    key={index}\r\n                                                                                    label={\r\n                                                                                        URL\r\n                                                                                            ? URL.pathname.substring(0, 15) === '/'\r\n                                                                                                ? URL.host\r\n                                                                                                : `${URL.pathname.substring(0, 15)}...`\r\n                                                                                            : `${source.pageContent.substring(0, 15)}...`\r\n                                                                                    }\r\n                                                                                    component='a'\r\n                                                                                    sx={{ mr: 1, mb: 1 }}\r\n                                                                                    variant='outlined'\r\n                                                                                    clickable\r\n                                                                                    onClick={() =>\r\n                                                                                        URL\r\n                                                                                            ? onURLClick(source.metadata.source)\r\n                                                                                            : onSourceDialogClick(source)\r\n                                                                                    }\r\n                                                                                />\r\n                                                                            )\r\n                                                                        })}\r\n                                                                    </div>\r\n                                                                )}\r\n                                                            </div>\r\n                                                        </Box>\r\n                                                    )\r\n                                                } else {\r\n                                                    return (\r\n                                                        <Box\r\n                                                            sx={{\r\n                                                                background: theme.palette.timeMessage.main,\r\n                                                                p: 2\r\n                                                            }}\r\n                                                            key={index}\r\n                                                            style={{ display: 'flex', justifyContent: 'center', alignContent: 'center' }}\r\n                                                        >\r\n                                                            {moment(message.message).format('MMMM Do YYYY, h:mm:ss a')}\r\n                                                        </Box>\r\n                                                    )\r\n                                                }\r\n                                            })}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                    <SourceDocDialog show={sourceDialogOpen} dialogProps={sourceDialogProps} onCancel={() => setSourceDialogOpen(false)} />\r\n                </>\r\n            </DialogContent>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nViewMessagesDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func\r\n}\r\n\r\nexport default ViewMessagesDialog\r\n","import PropTypes from 'prop-types'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useEffect, useRef, useState } from 'react'\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles'\r\nimport { Avatar, Box, ButtonBase, Typography, Stack, TextField } from '@mui/material'\r\n\r\n// icons\r\nimport { IconSettings, IconChevronLeft, IconDeviceFloppy, IconPencil, IconCheck, IconX, IconCode } from '@tabler/icons'\r\n\r\n// project imports\r\nimport Settings from 'views/settings'\r\nimport SaveChatflowDialog from 'ui-component/dialog/SaveChatflowDialog'\r\nimport APICodeDialog from 'views/chatflows/APICodeDialog'\r\nimport AnalyseFlowDialog from 'ui-component/dialog/AnalyseFlowDialog'\r\nimport ViewMessagesDialog from 'ui-component/dialog/ViewMessagesDialog'\r\n\r\n// API\r\nimport chatflowsApi from 'api/chatflows'\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi'\r\n\r\n// utils\r\nimport { generateExportFlowData } from 'utils/genericHelper'\r\nimport { uiBaseURL } from 'store/constant'\r\nimport { SET_CHATFLOW } from 'store/actions'\r\n\r\n// ==============================|| CANVAS HEADER ||============================== //\r\n\r\nconst CanvasHeader = ({ chatflow, handleSaveFlow, handleDeleteFlow, handleLoadFlow }) => {\r\n    const theme = useTheme()\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n    const flowNameRef = useRef()\r\n    const settingsRef = useRef()\r\n\r\n    const [isEditingFlowName, setEditingFlowName] = useState(null)\r\n    const [flowName, setFlowName] = useState('')\r\n    const [isSettingsOpen, setSettingsOpen] = useState(false)\r\n    const [flowDialogOpen, setFlowDialogOpen] = useState(false)\r\n    const [apiDialogOpen, setAPIDialogOpen] = useState(false)\r\n    const [apiDialogProps, setAPIDialogProps] = useState({})\r\n    const [analyseDialogOpen, setAnalyseDialogOpen] = useState(false)\r\n    const [analyseDialogProps, setAnalyseDialogProps] = useState({})\r\n    const [viewMessagesDialogOpen, setViewMessagesDialogOpen] = useState(false)\r\n    const [viewMessagesDialogProps, setViewMessagesDialogProps] = useState({})\r\n\r\n    const updateChatflowApi = useApi(chatflowsApi.updateChatflow)\r\n    const canvas = useSelector((state) => state.canvas)\r\n\r\n    const onSettingsItemClick = (setting) => {\r\n        setSettingsOpen(false)\r\n\r\n        if (setting === 'deleteChatflow') {\r\n            handleDeleteFlow()\r\n        } else if (setting === 'analyseChatflow') {\r\n            setAnalyseDialogProps({\r\n                title: 'Analyse Chatflow',\r\n                chatflow: chatflow\r\n            })\r\n            setAnalyseDialogOpen(true)\r\n        } else if (setting === 'viewMessages') {\r\n            setViewMessagesDialogProps({\r\n                title: 'View Messages',\r\n                chatflow: chatflow\r\n            })\r\n            setViewMessagesDialogOpen(true)\r\n        } else if (setting === 'duplicateChatflow') {\r\n            try {\r\n                localStorage.setItem('duplicatedFlowData', chatflow.flowData)\r\n                window.open(`${uiBaseURL}/canvas`, '_blank')\r\n            } catch (e) {\r\n                console.error(e)\r\n            }\r\n        } else if (setting === 'exportChatflow') {\r\n            try {\r\n                const flowData = JSON.parse(chatflow.flowData)\r\n                let dataStr = JSON.stringify(generateExportFlowData(flowData), null, 2)\r\n                let dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr)\r\n\r\n                let exportFileDefaultName = `${chatflow.name} Chatflow.json`\r\n\r\n                let linkElement = document.createElement('a')\r\n                linkElement.setAttribute('href', dataUri)\r\n                linkElement.setAttribute('download', exportFileDefaultName)\r\n                linkElement.click()\r\n            } catch (e) {\r\n                console.error(e)\r\n            }\r\n        }\r\n    }\r\n\r\n    const onUploadFile = (file) => {\r\n        setSettingsOpen(false)\r\n        handleLoadFlow(file)\r\n    }\r\n\r\n    const submitFlowName = () => {\r\n        if (chatflow.id) {\r\n            const updateBody = {\r\n                name: flowNameRef.current.value\r\n            }\r\n            updateChatflowApi.request(chatflow.id, updateBody)\r\n        }\r\n    }\r\n\r\n    const onAPIDialogClick = () => {\r\n        // If file type is file, isFormDataRequired = true\r\n        let isFormDataRequired = false\r\n        try {\r\n            const flowData = JSON.parse(chatflow.flowData)\r\n            const nodes = flowData.nodes\r\n            for (const node of nodes) {\r\n                if (node.data.inputParams.find((param) => param.type === 'file')) {\r\n                    isFormDataRequired = true\r\n                    break\r\n                }\r\n            }\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n\r\n        // If sessionId memory, isSessionMemory = true\r\n        let isSessionMemory = false\r\n        try {\r\n            const flowData = JSON.parse(chatflow.flowData)\r\n            const nodes = flowData.nodes\r\n            for (const node of nodes) {\r\n                if (node.data.inputParams.find((param) => param.name === 'sessionId')) {\r\n                    isSessionMemory = true\r\n                    break\r\n                }\r\n            }\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n\r\n        setAPIDialogProps({\r\n            title: 'Embed in website or use as API',\r\n            chatflowid: chatflow.id,\r\n            chatflowApiKeyId: chatflow.apikeyid,\r\n            isFormDataRequired,\r\n            isSessionMemory\r\n        })\r\n        setAPIDialogOpen(true)\r\n    }\r\n\r\n    const onSaveChatflowClick = () => {\r\n        if (chatflow.id) handleSaveFlow(flowName)\r\n        else setFlowDialogOpen(true)\r\n    }\r\n\r\n    const onConfirmSaveName = (flowName) => {\r\n        setFlowDialogOpen(false)\r\n        handleSaveFlow(flowName)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (updateChatflowApi.data) {\r\n            setFlowName(updateChatflowApi.data.name)\r\n            dispatch({ type: SET_CHATFLOW, chatflow: updateChatflowApi.data })\r\n        }\r\n        setEditingFlowName(false)\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [updateChatflowApi.data])\r\n\r\n    useEffect(() => {\r\n        if (chatflow) {\r\n            setFlowName(chatflow.name)\r\n        }\r\n    }, [chatflow])\r\n\r\n    return (\r\n        <>\r\n            <Box>\r\n                <ButtonBase title='Back' sx={{ borderRadius: '50%' }}>\r\n                    <Avatar\r\n                        variant='rounded'\r\n                        sx={{\r\n                            ...theme.typography.commonAvatar,\r\n                            ...theme.typography.mediumAvatar,\r\n                            transition: 'all .2s ease-in-out',\r\n                            background: theme.palette.secondary.light,\r\n                            color: theme.palette.secondary.dark,\r\n                            '&:hover': {\r\n                                background: theme.palette.secondary.dark,\r\n                                color: theme.palette.secondary.light\r\n                            }\r\n                        }}\r\n                        color='inherit'\r\n                        onClick={() =>\r\n                            window.history.state && window.history.state.idx > 0 ? navigate(-1) : navigate('/', { replace: true })\r\n                        }\r\n                    >\r\n                        <IconChevronLeft stroke={1.5} size='1.3rem' />\r\n                    </Avatar>\r\n                </ButtonBase>\r\n            </Box>\r\n            <Box sx={{ flexGrow: 1 }}>\r\n                {!isEditingFlowName && (\r\n                    <Stack flexDirection='row'>\r\n                        <Typography\r\n                            sx={{\r\n                                fontSize: '1.5rem',\r\n                                fontWeight: 600,\r\n                                ml: 2\r\n                            }}\r\n                        >\r\n                            {canvas.isDirty && <strong style={{ color: theme.palette.orange.main }}>*</strong>} {flowName}\r\n                        </Typography>\r\n                        {chatflow?.id && (\r\n                            <ButtonBase title='Edit Name' sx={{ borderRadius: '50%' }}>\r\n                                <Avatar\r\n                                    variant='rounded'\r\n                                    sx={{\r\n                                        ...theme.typography.commonAvatar,\r\n                                        ...theme.typography.mediumAvatar,\r\n                                        transition: 'all .2s ease-in-out',\r\n                                        ml: 1,\r\n                                        background: theme.palette.secondary.light,\r\n                                        color: theme.palette.secondary.dark,\r\n                                        '&:hover': {\r\n                                            background: theme.palette.secondary.dark,\r\n                                            color: theme.palette.secondary.light\r\n                                        }\r\n                                    }}\r\n                                    color='inherit'\r\n                                    onClick={() => setEditingFlowName(true)}\r\n                                >\r\n                                    <IconPencil stroke={1.5} size='1.3rem' />\r\n                                </Avatar>\r\n                            </ButtonBase>\r\n                        )}\r\n                    </Stack>\r\n                )}\r\n                {isEditingFlowName && (\r\n                    <Stack flexDirection='row'>\r\n                        <TextField\r\n                            size='small'\r\n                            inputRef={flowNameRef}\r\n                            sx={{\r\n                                width: '50%',\r\n                                ml: 2\r\n                            }}\r\n                            defaultValue={flowName}\r\n                        />\r\n                        <ButtonBase title='Save Name' sx={{ borderRadius: '50%' }}>\r\n                            <Avatar\r\n                                variant='rounded'\r\n                                sx={{\r\n                                    ...theme.typography.commonAvatar,\r\n                                    ...theme.typography.mediumAvatar,\r\n                                    transition: 'all .2s ease-in-out',\r\n                                    background: theme.palette.success.light,\r\n                                    color: theme.palette.success.dark,\r\n                                    ml: 1,\r\n                                    '&:hover': {\r\n                                        background: theme.palette.success.dark,\r\n                                        color: theme.palette.success.light\r\n                                    }\r\n                                }}\r\n                                color='inherit'\r\n                                onClick={submitFlowName}\r\n                            >\r\n                                <IconCheck stroke={1.5} size='1.3rem' />\r\n                            </Avatar>\r\n                        </ButtonBase>\r\n                        <ButtonBase title='Cancel' sx={{ borderRadius: '50%' }}>\r\n                            <Avatar\r\n                                variant='rounded'\r\n                                sx={{\r\n                                    ...theme.typography.commonAvatar,\r\n                                    ...theme.typography.mediumAvatar,\r\n                                    transition: 'all .2s ease-in-out',\r\n                                    background: theme.palette.error.light,\r\n                                    color: theme.palette.error.dark,\r\n                                    ml: 1,\r\n                                    '&:hover': {\r\n                                        background: theme.palette.error.dark,\r\n                                        color: theme.palette.error.light\r\n                                    }\r\n                                }}\r\n                                color='inherit'\r\n                                onClick={() => setEditingFlowName(false)}\r\n                            >\r\n                                <IconX stroke={1.5} size='1.3rem' />\r\n                            </Avatar>\r\n                        </ButtonBase>\r\n                    </Stack>\r\n                )}\r\n            </Box>\r\n            <Box>\r\n                {chatflow?.id && (\r\n                    <ButtonBase title='API Endpoint' sx={{ borderRadius: '50%', mr: 2 }}>\r\n                        <Avatar\r\n                            variant='rounded'\r\n                            sx={{\r\n                                ...theme.typography.commonAvatar,\r\n                                ...theme.typography.mediumAvatar,\r\n                                transition: 'all .2s ease-in-out',\r\n                                background: theme.palette.canvasHeader.deployLight,\r\n                                color: theme.palette.canvasHeader.deployDark,\r\n                                '&:hover': {\r\n                                    background: theme.palette.canvasHeader.deployDark,\r\n                                    color: theme.palette.canvasHeader.deployLight\r\n                                }\r\n                            }}\r\n                            color='inherit'\r\n                            onClick={onAPIDialogClick}\r\n                        >\r\n                            <IconCode stroke={1.5} size='1.3rem' />\r\n                        </Avatar>\r\n                    </ButtonBase>\r\n                )}\r\n                <ButtonBase title='Save Chatflow' sx={{ borderRadius: '50%', mr: 2 }}>\r\n                    <Avatar\r\n                        variant='rounded'\r\n                        sx={{\r\n                            ...theme.typography.commonAvatar,\r\n                            ...theme.typography.mediumAvatar,\r\n                            transition: 'all .2s ease-in-out',\r\n                            background: theme.palette.canvasHeader.saveLight,\r\n                            color: theme.palette.canvasHeader.saveDark,\r\n                            '&:hover': {\r\n                                background: theme.palette.canvasHeader.saveDark,\r\n                                color: theme.palette.canvasHeader.saveLight\r\n                            }\r\n                        }}\r\n                        color='inherit'\r\n                        onClick={onSaveChatflowClick}\r\n                    >\r\n                        <IconDeviceFloppy stroke={1.5} size='1.3rem' />\r\n                    </Avatar>\r\n                </ButtonBase>\r\n                <ButtonBase ref={settingsRef} title='Settings' sx={{ borderRadius: '50%' }}>\r\n                    <Avatar\r\n                        variant='rounded'\r\n                        sx={{\r\n                            ...theme.typography.commonAvatar,\r\n                            ...theme.typography.mediumAvatar,\r\n                            transition: 'all .2s ease-in-out',\r\n                            background: theme.palette.canvasHeader.settingsLight,\r\n                            color: theme.palette.canvasHeader.settingsDark,\r\n                            '&:hover': {\r\n                                background: theme.palette.canvasHeader.settingsDark,\r\n                                color: theme.palette.canvasHeader.settingsLight\r\n                            }\r\n                        }}\r\n                        onClick={() => setSettingsOpen(!isSettingsOpen)}\r\n                    >\r\n                        <IconSettings stroke={1.5} size='1.3rem' />\r\n                    </Avatar>\r\n                </ButtonBase>\r\n            </Box>\r\n            <Settings\r\n                chatflow={chatflow}\r\n                isSettingsOpen={isSettingsOpen}\r\n                anchorEl={settingsRef.current}\r\n                onClose={() => setSettingsOpen(false)}\r\n                onSettingsItemClick={onSettingsItemClick}\r\n                onUploadFile={onUploadFile}\r\n            />\r\n            <SaveChatflowDialog\r\n                show={flowDialogOpen}\r\n                dialogProps={{\r\n                    title: `Save New Chatflow`,\r\n                    confirmButtonName: 'Save',\r\n                    cancelButtonName: 'Cancel'\r\n                }}\r\n                onCancel={() => setFlowDialogOpen(false)}\r\n                onConfirm={onConfirmSaveName}\r\n            />\r\n            <APICodeDialog show={apiDialogOpen} dialogProps={apiDialogProps} onCancel={() => setAPIDialogOpen(false)} />\r\n            <AnalyseFlowDialog show={analyseDialogOpen} dialogProps={analyseDialogProps} onCancel={() => setAnalyseDialogOpen(false)} />\r\n            <ViewMessagesDialog\r\n                show={viewMessagesDialogOpen}\r\n                dialogProps={viewMessagesDialogProps}\r\n                onCancel={() => setViewMessagesDialogOpen(false)}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nCanvasHeader.propTypes = {\r\n    chatflow: PropTypes.object,\r\n    handleSaveFlow: PropTypes.func,\r\n    handleDeleteFlow: PropTypes.func,\r\n    handleLoadFlow: PropTypes.func\r\n}\r\n\r\nexport default CanvasHeader\r\n","import { styled } from '@mui/material/styles'\r\nimport { Fab } from '@mui/material'\r\n\r\nexport const StyledFab = styled(Fab)(({ theme, color = 'primary' }) => ({\r\n    color: 'white',\r\n    backgroundColor: theme.palette[color].main,\r\n    '&:hover': {\r\n        backgroundColor: theme.palette[color].main,\r\n        backgroundImage: `linear-gradient(rgb(0 0 0/10%) 0 0)`\r\n    }\r\n}))\r\n","import { useState, useRef, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles'\r\nimport {\r\n    Accordion,\r\n    AccordionSummary,\r\n    AccordionDetails,\r\n    Box,\r\n    ClickAwayListener,\r\n    Divider,\r\n    InputAdornment,\r\n    List,\r\n    ListItemButton,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    OutlinedInput,\r\n    Paper,\r\n    Popper,\r\n    Stack,\r\n    Typography,\r\n    Chip\r\n} from '@mui/material'\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\r\n\r\n// third-party\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard'\r\nimport Transitions from 'ui-component/extended/Transitions'\r\nimport { StyledFab } from 'ui-component/button/StyledFab'\r\n\r\n// icons\r\nimport { IconPlus, IconSearch, IconMinus, IconX } from '@tabler/icons'\r\n\r\n// const\r\nimport { baseURL } from 'store/constant'\r\nimport { SET_COMPONENT_NODES } from 'store/actions'\r\n\r\n// ==============================|| ADD NODES||============================== //\r\n\r\nconst AddNodes = ({ nodesData, node }) => {\r\n    const theme = useTheme()\r\n    const customization = useSelector((state) => state.customization)\r\n    const dispatch = useDispatch()\r\n\r\n    const [searchValue, setSearchValue] = useState('')\r\n    const [nodes, setNodes] = useState({})\r\n    const [open, setOpen] = useState(false)\r\n    const [categoryExpanded, setCategoryExpanded] = useState({})\r\n\r\n    const anchorRef = useRef(null)\r\n    const prevOpen = useRef(open)\r\n    const ps = useRef()\r\n\r\n    // Temporary method to handle Deprecating Vector Store and New ones\r\n    const categorizeVectorStores = (nodes, accordianCategories, isFilter) => {\r\n        const obj = { ...nodes }\r\n        const vsNodes = obj['Vector Stores'] ?? []\r\n        const deprecatingNodes = []\r\n        const newNodes = []\r\n        for (const vsNode of vsNodes) {\r\n            if (vsNode.badge === 'DEPRECATING') deprecatingNodes.push(vsNode)\r\n            else newNodes.push(vsNode)\r\n        }\r\n        delete obj['Vector Stores']\r\n        if (deprecatingNodes.length) {\r\n            obj['Vector Stores;DEPRECATING'] = deprecatingNodes\r\n            accordianCategories['Vector Stores;DEPRECATING'] = isFilter ? true : false\r\n        }\r\n        if (newNodes.length) {\r\n            obj['Vector Stores;NEW'] = newNodes\r\n            accordianCategories['Vector Stores;NEW'] = isFilter ? true : false\r\n        }\r\n        setNodes(obj)\r\n    }\r\n\r\n    const scrollTop = () => {\r\n        const curr = ps.current\r\n        if (curr) {\r\n            curr.scrollTop = 0\r\n        }\r\n    }\r\n\r\n    const getSearchedNodes = (value) => {\r\n        const passed = nodesData.filter((nd) => {\r\n            const passesQuery = nd.name.toLowerCase().includes(value.toLowerCase())\r\n            const passesCategory = nd.category.toLowerCase().includes(value.toLowerCase())\r\n            return passesQuery || passesCategory\r\n        })\r\n        return passed\r\n    }\r\n\r\n    const filterSearch = (value) => {\r\n        setSearchValue(value)\r\n        setTimeout(() => {\r\n            if (value) {\r\n                const returnData = getSearchedNodes(value)\r\n                groupByCategory(returnData, true)\r\n                scrollTop()\r\n            } else if (value === '') {\r\n                groupByCategory(nodesData)\r\n                scrollTop()\r\n            }\r\n        }, 500)\r\n    }\r\n\r\n    const groupByCategory = (nodes, isFilter) => {\r\n        const accordianCategories = {}\r\n        const result = nodes.reduce(function (r, a) {\r\n            r[a.category] = r[a.category] || []\r\n            r[a.category].push(a)\r\n            accordianCategories[a.category] = isFilter ? true : false\r\n            return r\r\n        }, Object.create(null))\r\n        setNodes(result)\r\n        categorizeVectorStores(result, accordianCategories, isFilter)\r\n        setCategoryExpanded(accordianCategories)\r\n    }\r\n\r\n    const handleAccordionChange = (category) => (event, isExpanded) => {\r\n        const accordianCategories = { ...categoryExpanded }\r\n        accordianCategories[category] = isExpanded\r\n        setCategoryExpanded(accordianCategories)\r\n    }\r\n\r\n    const handleClose = (event) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n            return\r\n        }\r\n        setOpen(false)\r\n    }\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen)\r\n    }\r\n\r\n    const onDragStart = (event, node) => {\r\n        event.dataTransfer.setData('application/reactflow', JSON.stringify(node))\r\n        event.dataTransfer.effectAllowed = 'move'\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current.focus()\r\n        }\r\n\r\n        prevOpen.current = open\r\n    }, [open])\r\n\r\n    useEffect(() => {\r\n        if (node) setOpen(false)\r\n    }, [node])\r\n\r\n    useEffect(() => {\r\n        if (nodesData) {\r\n            groupByCategory(nodesData)\r\n            dispatch({ type: SET_COMPONENT_NODES, componentNodes: nodesData })\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [nodesData, dispatch])\r\n\r\n    return (\r\n        <>\r\n            <StyledFab\r\n                sx={{ left: 20, top: 20 }}\r\n                ref={anchorRef}\r\n                size='small'\r\n                color='primary'\r\n                aria-label='add'\r\n                title='Add Node'\r\n                onClick={handleToggle}\r\n            >\r\n                {open ? <IconMinus /> : <IconPlus />}\r\n            </StyledFab>\r\n            <Popper\r\n                placement='bottom-end'\r\n                open={open}\r\n                anchorEl={anchorRef.current}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n                popperOptions={{\r\n                    modifiers: [\r\n                        {\r\n                            name: 'offset',\r\n                            options: {\r\n                                offset: [-40, 14]\r\n                            }\r\n                        }\r\n                    ]\r\n                }}\r\n                sx={{ zIndex: 1000 }}\r\n            >\r\n                {({ TransitionProps }) => (\r\n                    <Transitions in={open} {...TransitionProps}>\r\n                        <Paper>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MainCard border={false} elevation={16} content={false} boxShadow shadow={theme.shadows[16]}>\r\n                                    <Box sx={{ p: 2 }}>\r\n                                        <Stack>\r\n                                            <Typography variant='h4'>Add Nodes</Typography>\r\n                                        </Stack>\r\n                                        <OutlinedInput\r\n                                            sx={{ width: '100%', pr: 2, pl: 2, my: 2 }}\r\n                                            id='input-search-node'\r\n                                            value={searchValue}\r\n                                            onChange={(e) => filterSearch(e.target.value)}\r\n                                            placeholder='Search nodes'\r\n                                            startAdornment={\r\n                                                <InputAdornment position='start'>\r\n                                                    <IconSearch stroke={1.5} size='1rem' color={theme.palette.grey[500]} />\r\n                                                </InputAdornment>\r\n                                            }\r\n                                            endAdornment={\r\n                                                <InputAdornment\r\n                                                    position='end'\r\n                                                    sx={{\r\n                                                        cursor: 'pointer',\r\n                                                        color: theme.palette.grey[500],\r\n                                                        '&:hover': {\r\n                                                            color: theme.palette.grey[900]\r\n                                                        }\r\n                                                    }}\r\n                                                    title='Clear Search'\r\n                                                >\r\n                                                    <IconX\r\n                                                        stroke={1.5}\r\n                                                        size='1rem'\r\n                                                        onClick={() => filterSearch('')}\r\n                                                        style={{\r\n                                                            cursor: 'pointer'\r\n                                                        }}\r\n                                                    />\r\n                                                </InputAdornment>\r\n                                            }\r\n                                            aria-describedby='search-helper-text'\r\n                                            inputProps={{\r\n                                                'aria-label': 'weight'\r\n                                            }}\r\n                                        />\r\n                                        <Divider />\r\n                                    </Box>\r\n                                    <PerfectScrollbar\r\n                                        containerRef={(el) => {\r\n                                            ps.current = el\r\n                                        }}\r\n                                        style={{ height: '100%', maxHeight: 'calc(100vh - 320px)', overflowX: 'hidden' }}\r\n                                    >\r\n                                        <Box sx={{ p: 2 }}>\r\n                                            <List\r\n                                                sx={{\r\n                                                    width: '100%',\r\n                                                    maxWidth: 370,\r\n                                                    py: 0,\r\n                                                    borderRadius: '10px',\r\n                                                    [theme.breakpoints.down('md')]: {\r\n                                                        maxWidth: 370\r\n                                                    },\r\n                                                    '& .MuiListItemSecondaryAction-root': {\r\n                                                        top: 22\r\n                                                    },\r\n                                                    '& .MuiDivider-root': {\r\n                                                        my: 0\r\n                                                    },\r\n                                                    '& .list-container': {\r\n                                                        pl: 7\r\n                                                    }\r\n                                                }}\r\n                                            >\r\n                                                {Object.keys(nodes)\r\n                                                    .sort()\r\n                                                    .map((category) =>\r\n                                                        category === 'Vector Stores' ? (\r\n                                                            <></>\r\n                                                        ) : (\r\n                                                            <Accordion\r\n                                                                expanded={categoryExpanded[category] || false}\r\n                                                                onChange={handleAccordionChange(category)}\r\n                                                                key={category}\r\n                                                                disableGutters\r\n                                                            >\r\n                                                                <AccordionSummary\r\n                                                                    expandIcon={<ExpandMoreIcon />}\r\n                                                                    aria-controls={`nodes-accordian-${category}`}\r\n                                                                    id={`nodes-accordian-header-${category}`}\r\n                                                                >\r\n                                                                    {category.split(';').length > 1 ? (\r\n                                                                        <div\r\n                                                                            style={{\r\n                                                                                display: 'flex',\r\n                                                                                flexDirection: 'row',\r\n                                                                                alignItems: 'center'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            <Typography variant='h5'>{category.split(';')[0]}</Typography>\r\n                                                                            &nbsp;\r\n                                                                            <Chip\r\n                                                                                sx={{\r\n                                                                                    width: 'max-content',\r\n                                                                                    fontWeight: 700,\r\n                                                                                    fontSize: '0.65rem',\r\n                                                                                    background:\r\n                                                                                        category.split(';')[1] === 'DEPRECATING'\r\n                                                                                            ? theme.palette.warning.main\r\n                                                                                            : theme.palette.teal.main,\r\n                                                                                    color:\r\n                                                                                        category.split(';')[1] !== 'DEPRECATING'\r\n                                                                                            ? 'white'\r\n                                                                                            : 'inherit'\r\n                                                                                }}\r\n                                                                                size='small'\r\n                                                                                label={category.split(';')[1]}\r\n                                                                            />\r\n                                                                        </div>\r\n                                                                    ) : (\r\n                                                                        <Typography variant='h5'>{category}</Typography>\r\n                                                                    )}\r\n                                                                </AccordionSummary>\r\n                                                                <AccordionDetails>\r\n                                                                    {nodes[category].map((node, index) => (\r\n                                                                        <div\r\n                                                                            key={node.name}\r\n                                                                            onDragStart={(event) => onDragStart(event, node)}\r\n                                                                            draggable\r\n                                                                        >\r\n                                                                            <ListItemButton\r\n                                                                                sx={{\r\n                                                                                    p: 0,\r\n                                                                                    borderRadius: `${customization.borderRadius}px`,\r\n                                                                                    cursor: 'move'\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                <ListItem alignItems='center'>\r\n                                                                                    <ListItemAvatar>\r\n                                                                                        <div\r\n                                                                                            style={{\r\n                                                                                                width: 50,\r\n                                                                                                height: 50,\r\n                                                                                                borderRadius: '50%',\r\n                                                                                                backgroundColor: 'white'\r\n                                                                                            }}\r\n                                                                                        >\r\n                                                                                            <img\r\n                                                                                                style={{\r\n                                                                                                    width: '100%',\r\n                                                                                                    height: '100%',\r\n                                                                                                    padding: 10,\r\n                                                                                                    objectFit: 'contain'\r\n                                                                                                }}\r\n                                                                                                alt={node.name}\r\n                                                                                                src={`${baseURL}/api/v1/node-icon/${node.name}`}\r\n                                                                                            />\r\n                                                                                        </div>\r\n                                                                                    </ListItemAvatar>\r\n                                                                                    <ListItemText\r\n                                                                                        sx={{ ml: 1 }}\r\n                                                                                        primary={\r\n                                                                                            <div\r\n                                                                                                style={{\r\n                                                                                                    display: 'flex',\r\n                                                                                                    flexDirection: 'row',\r\n                                                                                                    alignItems: 'center'\r\n                                                                                                }}\r\n                                                                                            >\r\n                                                                                                <span>{node.label}</span>\r\n                                                                                                &nbsp;\r\n                                                                                                {node.badge && (\r\n                                                                                                    <Chip\r\n                                                                                                        sx={{\r\n                                                                                                            width: 'max-content',\r\n                                                                                                            fontWeight: 700,\r\n                                                                                                            fontSize: '0.65rem',\r\n                                                                                                            background:\r\n                                                                                                                node.badge === 'DEPRECATING'\r\n                                                                                                                    ? theme.palette.warning\r\n                                                                                                                          .main\r\n                                                                                                                    : theme.palette.teal\r\n                                                                                                                          .main,\r\n                                                                                                            color:\r\n                                                                                                                node.badge !== 'DEPRECATING'\r\n                                                                                                                    ? 'white'\r\n                                                                                                                    : 'inherit'\r\n                                                                                                        }}\r\n                                                                                                        size='small'\r\n                                                                                                        label={node.badge}\r\n                                                                                                    />\r\n                                                                                                )}\r\n                                                                                            </div>\r\n                                                                                        }\r\n                                                                                        secondary={node.description}\r\n                                                                                    />\r\n                                                                                </ListItem>\r\n                                                                            </ListItemButton>\r\n                                                                            {index === nodes[category].length - 1 ? null : <Divider />}\r\n                                                                        </div>\r\n                                                                    ))}\r\n                                                                </AccordionDetails>\r\n                                                            </Accordion>\r\n                                                        )\r\n                                                    )}\r\n                                            </List>\r\n                                        </Box>\r\n                                    </PerfectScrollbar>\r\n                                </MainCard>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Transitions>\r\n                )}\r\n            </Popper>\r\n        </>\r\n    )\r\n}\r\n\r\nAddNodes.propTypes = {\r\n    nodesData: PropTypes.array,\r\n    node: PropTypes.object\r\n}\r\n\r\nexport default AddNodes\r\n","import client from './client'\r\n\r\nconst sendMessageAndGetPrediction = (id, input) => client.post(`/internal-prediction/${id}`, input)\r\n\r\nexport default {\r\n    sendMessageAndGetPrediction\r\n}\r\n","import { useState, useRef, useEffect, useCallback } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport socketIOClient from 'socket.io-client'\r\nimport { cloneDeep } from 'lodash'\r\nimport rehypeMathjax from 'rehype-mathjax'\r\nimport rehypeRaw from 'rehype-raw'\r\nimport remarkGfm from 'remark-gfm'\r\nimport remarkMath from 'remark-math'\r\nimport axios from 'axios'\r\n\r\nimport { CircularProgress, OutlinedInput, Divider, InputAdornment, IconButton, Box, Chip, Button } from '@mui/material'\r\nimport { useTheme } from '@mui/material/styles'\r\nimport { IconSend, IconDownload } from '@tabler/icons'\r\n\r\n// project import\r\nimport { CodeBlock } from 'ui-component/markdown/CodeBlock'\r\nimport { MemoizedReactMarkdown } from 'ui-component/markdown/MemoizedReactMarkdown'\r\nimport SourceDocDialog from 'ui-component/dialog/SourceDocDialog'\r\nimport './ChatMessage.css'\r\n\r\n// api\r\nimport chatmessageApi from 'api/chatmessage'\r\nimport chatflowsApi from 'api/chatflows'\r\nimport predictionApi from 'api/prediction'\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi'\r\n\r\n// Const\r\nimport { baseURL, maxScroll } from 'store/constant'\r\n\r\nimport robotPNG from 'assets/images/robot.png'\r\nimport userPNG from 'assets/images/account.png'\r\nimport { isValidURL, removeDuplicateURL, setLocalStorageChatflow } from 'utils/genericHelper'\r\n\r\nexport const ChatMessage = ({ open, chatflowid, isDialog }) => {\r\n    const theme = useTheme()\r\n    const customization = useSelector((state) => state.customization)\r\n\r\n    const ps = useRef()\r\n\r\n    const [userInput, setUserInput] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [messages, setMessages] = useState([\r\n        {\r\n            message: 'Hi there! How can I help?',\r\n            type: 'apiMessage'\r\n        }\r\n    ])\r\n    const [socketIOClientId, setSocketIOClientId] = useState('')\r\n    const [isChatFlowAvailableToStream, setIsChatFlowAvailableToStream] = useState(false)\r\n    const [sourceDialogOpen, setSourceDialogOpen] = useState(false)\r\n    const [sourceDialogProps, setSourceDialogProps] = useState({})\r\n    const [chatId, setChatId] = useState(undefined)\r\n\r\n    const inputRef = useRef(null)\r\n    const getChatmessageApi = useApi(chatmessageApi.getInternalChatmessageFromChatflow)\r\n    const getIsChatflowStreamingApi = useApi(chatflowsApi.getIsChatflowStreaming)\r\n\r\n    const onSourceDialogClick = (data, title) => {\r\n        setSourceDialogProps({ data, title })\r\n        setSourceDialogOpen(true)\r\n    }\r\n\r\n    const onURLClick = (data) => {\r\n        window.open(data, '_blank')\r\n    }\r\n\r\n    const scrollToBottom = () => {\r\n        if (ps.current) {\r\n            ps.current.scrollTo({ top: maxScroll })\r\n        }\r\n    }\r\n\r\n    const onChange = useCallback((e) => setUserInput(e.target.value), [setUserInput])\r\n\r\n    const updateLastMessage = (text) => {\r\n        setMessages((prevMessages) => {\r\n            let allMessages = [...cloneDeep(prevMessages)]\r\n            if (allMessages[allMessages.length - 1].type === 'userMessage') return allMessages\r\n            allMessages[allMessages.length - 1].message += text\r\n            return allMessages\r\n        })\r\n    }\r\n\r\n    const updateLastMessageSourceDocuments = (sourceDocuments) => {\r\n        setMessages((prevMessages) => {\r\n            let allMessages = [...cloneDeep(prevMessages)]\r\n            if (allMessages[allMessages.length - 1].type === 'userMessage') return allMessages\r\n            allMessages[allMessages.length - 1].sourceDocuments = sourceDocuments\r\n            return allMessages\r\n        })\r\n    }\r\n\r\n    // Handle errors\r\n    const handleError = (message = 'Oops! There seems to be an error. Please try again.') => {\r\n        message = message.replace(`Unable to parse JSON response from chat agent.\\n\\n`, '')\r\n        setMessages((prevMessages) => [...prevMessages, { message, type: 'apiMessage' }])\r\n        setLoading(false)\r\n        setUserInput('')\r\n        setTimeout(() => {\r\n            inputRef.current?.focus()\r\n        }, 100)\r\n    }\r\n\r\n    // Handle form submission\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n\r\n        if (userInput.trim() === '') {\r\n            return\r\n        }\r\n\r\n        setLoading(true)\r\n        setMessages((prevMessages) => [...prevMessages, { message: userInput, type: 'userMessage' }])\r\n\r\n        // Send user question and history to API\r\n        try {\r\n            const params = {\r\n                question: userInput,\r\n                history: messages.filter((msg) => msg.message !== 'Hi there! How can I help?'),\r\n                chatId\r\n            }\r\n            if (isChatFlowAvailableToStream) params.socketIOClientId = socketIOClientId\r\n\r\n            const response = await predictionApi.sendMessageAndGetPrediction(chatflowid, params)\r\n\r\n            if (response.data) {\r\n                const data = response.data\r\n\r\n                if (!chatId) setChatId(data.chatId)\r\n\r\n                if (!isChatFlowAvailableToStream) {\r\n                    let text = ''\r\n                    if (data.text) text = data.text\r\n                    else if (data.json) text = '```json\\n' + JSON.stringify(data.json, null, 2)\r\n                    else text = JSON.stringify(data, null, 2)\r\n\r\n                    setMessages((prevMessages) => [\r\n                        ...prevMessages,\r\n                        {\r\n                            message: text,\r\n                            sourceDocuments: data?.sourceDocuments,\r\n                            usedTools: data?.usedTools,\r\n                            fileAnnotations: data?.fileAnnotations,\r\n                            type: 'apiMessage'\r\n                        }\r\n                    ])\r\n                }\r\n                setLocalStorageChatflow(chatflowid, data.chatId, messages)\r\n                setLoading(false)\r\n                setUserInput('')\r\n                setTimeout(() => {\r\n                    inputRef.current?.focus()\r\n                    scrollToBottom()\r\n                }, 100)\r\n            }\r\n        } catch (error) {\r\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n            handleError(errorData)\r\n            return\r\n        }\r\n    }\r\n\r\n    // Prevent blank submissions and allow for multiline input\r\n    const handleEnter = (e) => {\r\n        // Check if IME composition is in progress\r\n        const isIMEComposition = e.isComposing || e.keyCode === 229\r\n        if (e.key === 'Enter' && userInput && !isIMEComposition) {\r\n            if (!e.shiftKey && userInput) {\r\n                handleSubmit(e)\r\n            }\r\n        } else if (e.key === 'Enter') {\r\n            e.preventDefault()\r\n        }\r\n    }\r\n\r\n    const downloadFile = async (fileAnnotation) => {\r\n        try {\r\n            const response = await axios.post(\r\n                `${baseURL}/api/v1/openai-assistants-file`,\r\n                { fileName: fileAnnotation.fileName },\r\n                { responseType: 'blob' }\r\n            )\r\n            const blob = new Blob([response.data], { type: response.headers['content-type'] })\r\n            const downloadUrl = window.URL.createObjectURL(blob)\r\n            const link = document.createElement('a')\r\n            link.href = downloadUrl\r\n            link.download = fileAnnotation.fileName\r\n            document.body.appendChild(link)\r\n            link.click()\r\n            link.remove()\r\n        } catch (error) {\r\n            console.error('Download failed:', error)\r\n        }\r\n    }\r\n\r\n    // Get chatmessages successful\r\n    useEffect(() => {\r\n        if (getChatmessageApi.data?.length) {\r\n            const chatId = getChatmessageApi.data[0]?.chatId\r\n            setChatId(chatId)\r\n            const loadedMessages = getChatmessageApi.data.map((message) => {\r\n                const obj = {\r\n                    message: message.content,\r\n                    type: message.role\r\n                }\r\n                if (message.sourceDocuments) obj.sourceDocuments = JSON.parse(message.sourceDocuments)\r\n                if (message.usedTools) obj.usedTools = JSON.parse(message.usedTools)\r\n                if (message.fileAnnotations) obj.fileAnnotations = JSON.parse(message.fileAnnotations)\r\n                return obj\r\n            })\r\n            setMessages((prevMessages) => [...prevMessages, ...loadedMessages])\r\n            setLocalStorageChatflow(chatflowid, chatId, messages)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getChatmessageApi.data])\r\n\r\n    // Get chatflow streaming capability\r\n    useEffect(() => {\r\n        if (getIsChatflowStreamingApi.data) {\r\n            setIsChatFlowAvailableToStream(getIsChatflowStreamingApi.data?.isStreaming ?? false)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getIsChatflowStreamingApi.data])\r\n\r\n    // Auto scroll chat to bottom\r\n    useEffect(() => {\r\n        scrollToBottom()\r\n    }, [messages])\r\n\r\n    useEffect(() => {\r\n        if (isDialog && inputRef) {\r\n            setTimeout(() => {\r\n                inputRef.current?.focus()\r\n            }, 100)\r\n        }\r\n    }, [isDialog, inputRef])\r\n\r\n    useEffect(() => {\r\n        let socket\r\n        if (open && chatflowid) {\r\n            getChatmessageApi.request(chatflowid)\r\n            getIsChatflowStreamingApi.request(chatflowid)\r\n            scrollToBottom()\r\n\r\n            socket = socketIOClient(baseURL)\r\n\r\n            socket.on('connect', () => {\r\n                setSocketIOClientId(socket.id)\r\n            })\r\n\r\n            socket.on('start', () => {\r\n                setMessages((prevMessages) => [...prevMessages, { message: '', type: 'apiMessage' }])\r\n            })\r\n\r\n            socket.on('sourceDocuments', updateLastMessageSourceDocuments)\r\n\r\n            socket.on('token', updateLastMessage)\r\n        }\r\n\r\n        return () => {\r\n            setUserInput('')\r\n            setLoading(false)\r\n            setMessages([\r\n                {\r\n                    message: 'Hi there! How can I help?',\r\n                    type: 'apiMessage'\r\n                }\r\n            ])\r\n            if (socket) {\r\n                socket.disconnect()\r\n                setSocketIOClientId('')\r\n            }\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [open, chatflowid])\r\n\r\n    return (\r\n        <>\r\n            <div className={isDialog ? 'cloud-dialog' : 'cloud'}>\r\n                <div ref={ps} className='messagelist'>\r\n                    {messages &&\r\n                        messages.map((message, index) => {\r\n                            return (\r\n                                // The latest message sent by the user will be animated while waiting for a response\r\n                                <>\r\n                                    <Box\r\n                                        sx={{\r\n                                            background: message.type === 'apiMessage' ? theme.palette.asyncSelect.main : ''\r\n                                        }}\r\n                                        key={index}\r\n                                        style={{ display: 'flex' }}\r\n                                        className={\r\n                                            message.type === 'userMessage' && loading && index === messages.length - 1\r\n                                                ? customization.isDarkMode\r\n                                                    ? 'usermessagewaiting-dark'\r\n                                                    : 'usermessagewaiting-light'\r\n                                                : message.type === 'usermessagewaiting'\r\n                                                ? 'apimessage'\r\n                                                : 'usermessage'\r\n                                        }\r\n                                    >\r\n                                        {/* Display the correct icon depending on the message type */}\r\n                                        {message.type === 'apiMessage' ? (\r\n                                            <img src={robotPNG} alt='AI' width='30' height='30' className='boticon' />\r\n                                        ) : (\r\n                                            <img src={userPNG} alt='Me' width='30' height='30' className='usericon' />\r\n                                        )}\r\n                                        <div style={{ display: 'flex', flexDirection: 'column', width: '100%' }}>\r\n                                            {message.usedTools && (\r\n                                                <div style={{ display: 'block', flexDirection: 'row', width: '100%' }}>\r\n                                                    {message.usedTools.map((tool, index) => {\r\n                                                        return (\r\n                                                            <Chip\r\n                                                                size='small'\r\n                                                                key={index}\r\n                                                                label={tool.tool}\r\n                                                                component='a'\r\n                                                                sx={{ mr: 1, mt: 1 }}\r\n                                                                variant='outlined'\r\n                                                                clickable\r\n                                                                onClick={() => onSourceDialogClick(tool, 'Used Tools')}\r\n                                                            />\r\n                                                        )\r\n                                                    })}\r\n                                                </div>\r\n                                            )}\r\n                                            <div className='markdownanswer'>\r\n                                                {/* Messages are being rendered in Markdown format */}\r\n                                                <MemoizedReactMarkdown\r\n                                                    remarkPlugins={[remarkGfm, remarkMath]}\r\n                                                    rehypePlugins={[rehypeMathjax, rehypeRaw]}\r\n                                                    components={{\r\n                                                        code({ inline, className, children, ...props }) {\r\n                                                            const match = /language-(\\w+)/.exec(className || '')\r\n                                                            return !inline ? (\r\n                                                                <CodeBlock\r\n                                                                    key={Math.random()}\r\n                                                                    chatflowid={chatflowid}\r\n                                                                    isDialog={isDialog}\r\n                                                                    language={(match && match[1]) || ''}\r\n                                                                    value={String(children).replace(/\\n$/, '')}\r\n                                                                    {...props}\r\n                                                                />\r\n                                                            ) : (\r\n                                                                <code className={className} {...props}>\r\n                                                                    {children}\r\n                                                                </code>\r\n                                                            )\r\n                                                        }\r\n                                                    }}\r\n                                                >\r\n                                                    {message.message}\r\n                                                </MemoizedReactMarkdown>\r\n                                            </div>\r\n                                            {message.fileAnnotations && (\r\n                                                <div style={{ display: 'block', flexDirection: 'row', width: '100%' }}>\r\n                                                    {message.fileAnnotations.map((fileAnnotation, index) => {\r\n                                                        return (\r\n                                                            <Button\r\n                                                                sx={{ fontSize: '0.85rem', textTransform: 'none', mb: 1 }}\r\n                                                                key={index}\r\n                                                                variant='outlined'\r\n                                                                onClick={() => downloadFile(fileAnnotation)}\r\n                                                                endIcon={<IconDownload color={theme.palette.primary.main} />}\r\n                                                            >\r\n                                                                {fileAnnotation.fileName}\r\n                                                            </Button>\r\n                                                        )\r\n                                                    })}\r\n                                                </div>\r\n                                            )}\r\n                                            {message.sourceDocuments && (\r\n                                                <div style={{ display: 'block', flexDirection: 'row', width: '100%' }}>\r\n                                                    {removeDuplicateURL(message).map((source, index) => {\r\n                                                        const URL =\r\n                                                            source.metadata && source.metadata.source\r\n                                                                ? isValidURL(source.metadata.source)\r\n                                                                : undefined\r\n                                                        return (\r\n                                                            <Chip\r\n                                                                size='small'\r\n                                                                key={index}\r\n                                                                label={\r\n                                                                    URL\r\n                                                                        ? URL.pathname.substring(0, 15) === '/'\r\n                                                                            ? URL.host\r\n                                                                            : `${URL.pathname.substring(0, 15)}...`\r\n                                                                        : `${source.pageContent.substring(0, 15)}...`\r\n                                                                }\r\n                                                                component='a'\r\n                                                                sx={{ mr: 1, mb: 1 }}\r\n                                                                variant='outlined'\r\n                                                                clickable\r\n                                                                onClick={() =>\r\n                                                                    URL ? onURLClick(source.metadata.source) : onSourceDialogClick(source)\r\n                                                                }\r\n                                                            />\r\n                                                        )\r\n                                                    })}\r\n                                                </div>\r\n                                            )}\r\n                                        </div>\r\n                                    </Box>\r\n                                </>\r\n                            )\r\n                        })}\r\n                </div>\r\n            </div>\r\n            <Divider />\r\n            <div className='center'>\r\n                <div style={{ width: '100%' }}>\r\n                    <form style={{ width: '100%' }} onSubmit={handleSubmit}>\r\n                        <OutlinedInput\r\n                            inputRef={inputRef}\r\n                            // eslint-disable-next-line\r\n                            autoFocus\r\n                            sx={{ width: '100%' }}\r\n                            disabled={loading || !chatflowid}\r\n                            onKeyDown={handleEnter}\r\n                            id='userInput'\r\n                            name='userInput'\r\n                            placeholder={loading ? 'Waiting for response...' : 'Type your question...'}\r\n                            value={userInput}\r\n                            onChange={onChange}\r\n                            multiline={true}\r\n                            maxRows={isDialog ? 7 : 2}\r\n                            endAdornment={\r\n                                <InputAdornment position='end' sx={{ padding: '15px' }}>\r\n                                    <IconButton type='submit' disabled={loading || !chatflowid} edge='end'>\r\n                                        {loading ? (\r\n                                            <div>\r\n                                                <CircularProgress color='inherit' size={20} />\r\n                                            </div>\r\n                                        ) : (\r\n                                            // Send icon SVG in input field\r\n                                            <IconSend\r\n                                                color={loading || !chatflowid ? '#9e9e9e' : customization.isDarkMode ? 'white' : '#1e88e5'}\r\n                                            />\r\n                                        )}\r\n                                    </IconButton>\r\n                                </InputAdornment>\r\n                            }\r\n                        />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n            <SourceDocDialog show={sourceDialogOpen} dialogProps={sourceDialogProps} onCancel={() => setSourceDialogOpen(false)} />\r\n        </>\r\n    )\r\n}\r\n\r\nChatMessage.propTypes = {\r\n    open: PropTypes.bool,\r\n    chatflowid: PropTypes.string,\r\n    isDialog: PropTypes.bool\r\n}\r\n","import { createPortal } from 'react-dom'\r\nimport PropTypes from 'prop-types'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { Dialog, DialogContent, DialogTitle, Button } from '@mui/material'\r\nimport { ChatMessage } from './ChatMessage'\r\nimport { StyledButton } from 'ui-component/button/StyledButton'\r\nimport { IconEraser } from '@tabler/icons'\r\n\r\nconst ChatExpandDialog = ({ show, dialogProps, onClear, onCancel }) => {\r\n    const portalElement = document.getElementById('portal')\r\n    const customization = useSelector((state) => state.customization)\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            fullWidth\r\n            maxWidth='md'\r\n            onClose={onCancel}\r\n            aria-labelledby='alert-dialog-title'\r\n            aria-describedby='alert-dialog-description'\r\n            sx={{ overflow: 'visible' }}\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\r\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                    {dialogProps.title}\r\n                    <div style={{ flex: 1 }}></div>\r\n                    {customization.isDarkMode && (\r\n                        <StyledButton\r\n                            variant='outlined'\r\n                            color='error'\r\n                            title='Clear Conversation'\r\n                            onClick={onClear}\r\n                            startIcon={<IconEraser />}\r\n                        >\r\n                            Clear Chat\r\n                        </StyledButton>\r\n                    )}\r\n                    {!customization.isDarkMode && (\r\n                        <Button variant='outlined' color='error' title='Clear Conversation' onClick={onClear} startIcon={<IconEraser />}>\r\n                            Clear Chat\r\n                        </Button>\r\n                    )}\r\n                </div>\r\n            </DialogTitle>\r\n            <DialogContent sx={{ display: 'flex', justifyContent: 'flex-end', flexDirection: 'column' }}>\r\n                <ChatMessage isDialog={true} open={dialogProps.open} chatflowid={dialogProps.chatflowid} />\r\n            </DialogContent>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nChatExpandDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onClear: PropTypes.func,\r\n    onCancel: PropTypes.func\r\n}\r\n\r\nexport default ChatExpandDialog\r\n","import { useState, useRef, useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { ClickAwayListener, Paper, Popper, Button } from '@mui/material'\r\nimport { useTheme } from '@mui/material/styles'\r\nimport { IconMessage, IconX, IconEraser, IconArrowsMaximize } from '@tabler/icons'\r\n\r\n// project import\r\nimport { StyledFab } from 'ui-component/button/StyledFab'\r\nimport MainCard from 'ui-component/cards/MainCard'\r\nimport Transitions from 'ui-component/extended/Transitions'\r\nimport { ChatMessage } from './ChatMessage'\r\nimport ChatExpandDialog from './ChatExpandDialog'\r\n\r\n// api\r\nimport chatmessageApi from 'api/chatmessage'\r\n\r\n// Hooks\r\nimport useConfirm from 'hooks/useConfirm'\r\nimport useNotifier from 'utils/useNotifier'\r\n\r\n// Const\r\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction } from 'store/actions'\r\n\r\nexport const ChatPopUp = ({ chatflowid }) => {\r\n    const theme = useTheme()\r\n    const { confirm } = useConfirm()\r\n    const dispatch = useDispatch()\r\n\r\n    useNotifier()\r\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\r\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\r\n\r\n    const [open, setOpen] = useState(false)\r\n    const [showExpandDialog, setShowExpandDialog] = useState(false)\r\n    const [expandDialogProps, setExpandDialogProps] = useState({})\r\n\r\n    const anchorRef = useRef(null)\r\n    const prevOpen = useRef(open)\r\n\r\n    const handleClose = (event) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n            return\r\n        }\r\n        setOpen(false)\r\n    }\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen)\r\n    }\r\n\r\n    const expandChat = () => {\r\n        const props = {\r\n            open: true,\r\n            chatflowid: chatflowid\r\n        }\r\n        setExpandDialogProps(props)\r\n        setShowExpandDialog(true)\r\n    }\r\n\r\n    const resetChatDialog = () => {\r\n        const props = {\r\n            ...expandDialogProps,\r\n            open: false\r\n        }\r\n        setExpandDialogProps(props)\r\n        setTimeout(() => {\r\n            const resetProps = {\r\n                ...expandDialogProps,\r\n                open: true\r\n            }\r\n            setExpandDialogProps(resetProps)\r\n        }, 500)\r\n    }\r\n\r\n    const clearChat = async () => {\r\n        const confirmPayload = {\r\n            title: `Clear Chat History`,\r\n            description: `Are you sure you want to clear all chat history?`,\r\n            confirmButtonName: 'Clear',\r\n            cancelButtonName: 'Cancel'\r\n        }\r\n        const isConfirmed = await confirm(confirmPayload)\r\n\r\n        if (isConfirmed) {\r\n            try {\r\n                const chatDetails = localStorage.getItem(`${chatflowid}_INTERNAL`)\r\n                if (!chatDetails) return\r\n                const objChatDetails = JSON.parse(chatDetails)\r\n                await chatmessageApi.deleteChatmessage(chatflowid, { chatId: objChatDetails.chatId, chatType: 'INTERNAL' })\r\n                localStorage.removeItem(`${chatflowid}_INTERNAL`)\r\n                resetChatDialog()\r\n                enqueueSnackbar({\r\n                    message: 'Succesfully cleared all chat history',\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'success',\r\n                        action: (key) => (\r\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        )\r\n                    }\r\n                })\r\n            } catch (error) {\r\n                const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n                enqueueSnackbar({\r\n                    message: errorData,\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'error',\r\n                        persist: true,\r\n                        action: (key) => (\r\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current.focus()\r\n        }\r\n        prevOpen.current = open\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [open, chatflowid])\r\n\r\n    return (\r\n        <>\r\n            <StyledFab\r\n                sx={{ position: 'absolute', right: 20, top: 20 }}\r\n                ref={anchorRef}\r\n                size='small'\r\n                color='secondary'\r\n                aria-label='chat'\r\n                title='Chat'\r\n                onClick={handleToggle}\r\n            >\r\n                {open ? <IconX /> : <IconMessage />}\r\n            </StyledFab>\r\n            {open && (\r\n                <StyledFab\r\n                    sx={{ position: 'absolute', right: 80, top: 20 }}\r\n                    onClick={clearChat}\r\n                    size='small'\r\n                    color='error'\r\n                    aria-label='clear'\r\n                    title='Clear Chat History'\r\n                >\r\n                    <IconEraser />\r\n                </StyledFab>\r\n            )}\r\n            {open && (\r\n                <StyledFab\r\n                    sx={{ position: 'absolute', right: 140, top: 20 }}\r\n                    onClick={expandChat}\r\n                    size='small'\r\n                    color='primary'\r\n                    aria-label='expand'\r\n                    title='Expand Chat'\r\n                >\r\n                    <IconArrowsMaximize />\r\n                </StyledFab>\r\n            )}\r\n            <Popper\r\n                placement='bottom-end'\r\n                open={open}\r\n                anchorEl={anchorRef.current}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n                popperOptions={{\r\n                    modifiers: [\r\n                        {\r\n                            name: 'offset',\r\n                            options: {\r\n                                offset: [40, 14]\r\n                            }\r\n                        }\r\n                    ]\r\n                }}\r\n                sx={{ zIndex: 1000 }}\r\n            >\r\n                {({ TransitionProps }) => (\r\n                    <Transitions in={open} {...TransitionProps}>\r\n                        <Paper>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MainCard border={false} elevation={16} content={false} boxShadow shadow={theme.shadows[16]}>\r\n                                    <ChatMessage chatflowid={chatflowid} open={open} />\r\n                                </MainCard>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Transitions>\r\n                )}\r\n            </Popper>\r\n            <ChatExpandDialog\r\n                show={showExpandDialog}\r\n                dialogProps={expandDialogProps}\r\n                onClear={clearChat}\r\n                onCancel={() => setShowExpandDialog(false)}\r\n            ></ChatExpandDialog>\r\n        </>\r\n    )\r\n}\r\n\r\nChatPopUp.propTypes = { chatflowid: PropTypes.string }\r\n","import client from './client'\r\n\r\nconst upsertVectorStore = (id, input) => client.post(`/vector/internal-upsert/${id}`, input)\r\n\r\nexport default {\r\n    upsertVectorStore\r\n}\r\n","import { createPortal } from 'react-dom'\r\nimport PropTypes from 'prop-types'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useContext, useState, useEffect } from 'react'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport { CopyBlock, atomOneDark } from 'react-code-blocks'\r\n\r\nimport {\r\n    Dialog,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Button,\r\n    Box,\r\n    Tabs,\r\n    Tab,\r\n    Accordion,\r\n    AccordionSummary,\r\n    AccordionDetails,\r\n    Typography\r\n} from '@mui/material'\r\n\r\nimport { CheckboxInput } from 'ui-component/checkbox/Checkbox'\r\nimport { BackdropLoader } from 'ui-component/loading/BackdropLoader'\r\nimport { TableViewOnly } from 'ui-component/table/Table'\r\n\r\nimport { IconX } from '@tabler/icons'\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\r\nimport pythonSVG from 'assets/images/python.svg'\r\nimport javascriptSVG from 'assets/images/javascript.svg'\r\nimport cURLSVG from 'assets/images/cURL.svg'\r\n\r\nimport useApi from 'hooks/useApi'\r\nimport configApi from 'api/config'\r\nimport vectorstoreApi from 'api/vectorstore'\r\n\r\n// Utils\r\nimport {\r\n    getUpsertDetails,\r\n    getFileName,\r\n    unshiftFiles,\r\n    getConfigExamplesForJS,\r\n    getConfigExamplesForPython,\r\n    getConfigExamplesForCurl\r\n} from 'utils/genericHelper'\r\nimport useNotifier from 'utils/useNotifier'\r\n\r\n// Store\r\nimport { flowContext } from 'store/context/ReactFlowContext'\r\nimport { HIDE_CANVAS_DIALOG, SHOW_CANVAS_DIALOG } from 'store/actions'\r\nimport { baseURL } from 'store/constant'\r\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction } from 'store/actions'\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props\r\n    return (\r\n        <div\r\n            role='tabpanel'\r\n            hidden={value !== index}\r\n            id={`attachment-tabpanel-${index}`}\r\n            aria-labelledby={`attachment-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && <Box sx={{ p: 1 }}>{children}</Box>}\r\n        </div>\r\n    )\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.number.isRequired,\r\n    value: PropTypes.number.isRequired\r\n}\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `attachment-tab-${index}`,\r\n        'aria-controls': `attachment-tabpanel-${index}`\r\n    }\r\n}\r\n\r\nconst VectorStoreDialog = ({ show, dialogProps, onCancel }) => {\r\n    const portalElement = document.getElementById('portal')\r\n    const { reactFlowInstance } = useContext(flowContext)\r\n    const dispatch = useDispatch()\r\n\r\n    useNotifier()\r\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\r\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\r\n    const getConfigApi = useApi(configApi.getConfig)\r\n\r\n    const [nodes, setNodes] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n    const [isFormDataRequired, setIsFormDataRequired] = useState({})\r\n    const [nodeConfigExpanded, setNodeConfigExpanded] = useState({})\r\n    const [nodeCheckboxExpanded, setCheckboxExpanded] = useState({})\r\n    const [tabValue, setTabValue] = useState(0)\r\n    const [expandedVectorNodeId, setExpandedVectorNodeId] = useState('')\r\n    const [configData, setConfigData] = useState({})\r\n\r\n    const reformatConfigData = (configData, nodes) => {\r\n        return configData.filter((item1) => nodes.some((item2) => item1.nodeId === item2.id))\r\n    }\r\n\r\n    const getCode = (codeLang, vectorNodeId, isMultiple, configData) => {\r\n        if (codeLang === 'Python') {\r\n            return `import requests\r\n\r\nAPI_URL = \"${baseURL}/api/v1/vector/upsert/${dialogProps.chatflowid}\"\r\n\r\ndef query(payload):\r\n    response = requests.post(API_URL, json=payload)\r\n    return response.json()\r\n\r\noutput = query({\r\n    ${isMultiple ? `\"stopNodeId\": \"${vectorNodeId}\",\\n    ` : ``}\"overrideConfig\": {${getConfigExamplesForPython(\r\n                configData,\r\n                'json',\r\n                isMultiple,\r\n                vectorNodeId\r\n            )}\r\n    }\r\n})\r\n`\r\n        } else if (codeLang === 'JavaScript') {\r\n            return `async function query(data) {\r\n    const response = await fetch(\r\n        \"${baseURL}/api/v1/vector/upsert/${dialogProps.chatflowid}\",\r\n        {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(data)\r\n        }\r\n    );\r\n    const result = await response.json();\r\n    return result;\r\n}\r\n\r\nquery({\r\n  ${isMultiple ? `\"stopNodeId\": \"${vectorNodeId}\",\\n  ` : ``}\"overrideConfig\": {${getConfigExamplesForJS(\r\n                configData,\r\n                'json',\r\n                isMultiple,\r\n                vectorNodeId\r\n            )}\r\n  }\r\n}).then((response) => {\r\n    console.log(response);\r\n});\r\n`\r\n        } else if (codeLang === 'cURL') {\r\n            return `curl ${baseURL}/api/v1/vector/upsert/${dialogProps.chatflowid} \\\\\r\n      -X POST \\\\\r\n      ${\r\n          isMultiple\r\n              ? `-d '{\"stopNodeId\": \"${vectorNodeId}\", \"overrideConfig\": {${getConfigExamplesForCurl(\r\n                    configData,\r\n                    'json',\r\n                    isMultiple,\r\n                    vectorNodeId\r\n                )}}' \\\\`\r\n              : `-d '{\"overrideConfig\": {${getConfigExamplesForCurl(configData, 'json', isMultiple, vectorNodeId)}}' \\\\`\r\n      }\r\n      -H \"Content-Type: application/json\"`\r\n        }\r\n        return ''\r\n    }\r\n\r\n    const getCodeWithFormData = (codeLang, vectorNodeId, isMultiple, configData) => {\r\n        if (codeLang === 'Python') {\r\n            configData = unshiftFiles(configData)\r\n            let fileType = configData[0].type\r\n            if (fileType.includes(',')) fileType = fileType.split(',')[0]\r\n            return `import requests\r\n\r\nAPI_URL = \"${baseURL}/api/v1/vector/upsert/${dialogProps.chatflowid}\"\r\n\r\n# use form data to upload files\r\nform_data = {\r\n    \"files\": ${`('example${fileType}', open('example${fileType}', 'rb'))`}\r\n}\r\nbody_data = {${getConfigExamplesForPython(configData, 'formData', isMultiple, vectorNodeId)}}\r\n\r\ndef query(form_data, body_data):\r\n    response = requests.post(API_URL, files=form_data, data=body_data)\r\n    return response.json()\r\n\r\noutput = query(form_data, body_data)\r\n`\r\n        } else if (codeLang === 'JavaScript') {\r\n            return `// use FormData to upload files\r\nlet formData = new FormData();\r\n${getConfigExamplesForJS(configData, 'formData', isMultiple, vectorNodeId)}\r\nasync function query(formData) {\r\n    const response = await fetch(\r\n        \"${baseURL}/api/v1/vector/upsert/${dialogProps.chatflowid}\",\r\n        {\r\n            method: \"POST\",\r\n            body: formData\r\n        }\r\n    );\r\n    const result = await response.json();\r\n    return result;\r\n}\r\n\r\nquery(formData).then((response) => {\r\n    console.log(response);\r\n});\r\n`\r\n        } else if (codeLang === 'cURL') {\r\n            return `curl ${baseURL}/api/v1/vector/upsert/${dialogProps.chatflowid} \\\\\r\n     -X POST \\\\${getConfigExamplesForCurl(configData, 'formData', isMultiple, vectorNodeId)} \\\\\r\n     -H \"Content-Type: multipart/form-data\"`\r\n        }\r\n        return ''\r\n    }\r\n\r\n    const getLang = (codeLang) => {\r\n        if (codeLang === 'Python') {\r\n            return 'python'\r\n        } else if (codeLang === 'JavaScript') {\r\n            return 'javascript'\r\n        } else if (codeLang === 'cURL') {\r\n            return 'bash'\r\n        }\r\n        return 'python'\r\n    }\r\n\r\n    const getSVG = (codeLang) => {\r\n        if (codeLang === 'Python') {\r\n            return pythonSVG\r\n        } else if (codeLang === 'JavaScript') {\r\n            return javascriptSVG\r\n        } else if (codeLang === 'Embed') {\r\n            return EmbedSVG\r\n        } else if (codeLang === 'cURL') {\r\n            return cURLSVG\r\n        } else if (codeLang === 'Share Chatbot') {\r\n            return ShareChatbotSVG\r\n        } else if (codeLang === 'Configuration') {\r\n            return settingsSVG\r\n        }\r\n        return pythonSVG\r\n    }\r\n\r\n    const handleAccordionChange = (nodeLabel) => (event, isExpanded) => {\r\n        const accordianNodes = { ...nodeConfigExpanded }\r\n        accordianNodes[nodeLabel] = isExpanded\r\n        setNodeConfigExpanded(accordianNodes)\r\n    }\r\n\r\n    const onCheckBoxChanged = (vectorNodeId) => {\r\n        const checkboxNodes = { ...nodeCheckboxExpanded }\r\n        if (Object.keys(checkboxNodes).includes(vectorNodeId)) checkboxNodes[vectorNodeId] = !checkboxNodes[vectorNodeId]\r\n        else checkboxNodes[vectorNodeId] = true\r\n\r\n        if (checkboxNodes[vectorNodeId] === true) getConfigApi.request(dialogProps.chatflowid)\r\n        setCheckboxExpanded(checkboxNodes)\r\n        setExpandedVectorNodeId(vectorNodeId)\r\n\r\n        const newIsFormDataRequired = { ...isFormDataRequired }\r\n        newIsFormDataRequired[vectorNodeId] = false\r\n        setIsFormDataRequired(newIsFormDataRequired)\r\n        const newNodes = nodes.find((node) => node.vectorNode.data.id === vectorNodeId)?.nodes ?? []\r\n\r\n        for (const node of newNodes) {\r\n            if (node.data.inputParams.find((param) => param.type === 'file')) {\r\n                newIsFormDataRequired[vectorNodeId] = true\r\n                setIsFormDataRequired(newIsFormDataRequired)\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    const onUpsertClicked = async (vectorStoreNode) => {\r\n        setLoading(true)\r\n        try {\r\n            await vectorstoreApi.upsertVectorStore(dialogProps.chatflowid, { stopNodeId: vectorStoreNode.data.id })\r\n            enqueueSnackbar({\r\n                message: 'Succesfully upserted vector store. You can start chatting now!',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n            setLoading(false)\r\n        } catch (error) {\r\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n            enqueueSnackbar({\r\n                message: errorData,\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    const getNodeDetail = (node) => {\r\n        const nodeDetails = []\r\n        const inputKeys = Object.keys(node.data.inputs)\r\n        for (let i = 0; i < node.data.inputParams.length; i += 1) {\r\n            if (inputKeys.includes(node.data.inputParams[i].name)) {\r\n                nodeDetails.push({\r\n                    label: node.data.inputParams[i].label,\r\n                    name: node.data.inputParams[i].name,\r\n                    type: node.data.inputParams[i].type,\r\n                    value:\r\n                        node.data.inputParams[i].type === 'file'\r\n                            ? getFileName(node.data.inputs[node.data.inputParams[i].name])\r\n                            : node.data.inputs[node.data.inputParams[i].name] ?? ''\r\n                })\r\n            }\r\n        }\r\n        return nodeDetails\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (getConfigApi.data) {\r\n            const newConfigData = { ...configData }\r\n            newConfigData[expandedVectorNodeId] = reformatConfigData(\r\n                getConfigApi.data,\r\n                nodes.find((node) => node.vectorNode.data.id === expandedVectorNodeId)?.nodes ?? []\r\n            )\r\n            setConfigData(newConfigData)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getConfigApi.data])\r\n\r\n    useEffect(() => {\r\n        if (dialogProps && reactFlowInstance) {\r\n            const nodes = reactFlowInstance.getNodes()\r\n            const edges = reactFlowInstance.getEdges()\r\n            setNodes(getUpsertDetails(nodes, edges))\r\n        }\r\n\r\n        return () => {\r\n            setNodes([])\r\n            setLoading(false)\r\n            setIsFormDataRequired({})\r\n            setNodeConfigExpanded({})\r\n            setCheckboxExpanded({})\r\n            setTabValue(0)\r\n            setConfigData({})\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [dialogProps])\r\n\r\n    useEffect(() => {\r\n        if (show) dispatch({ type: SHOW_CANVAS_DIALOG })\r\n        else dispatch({ type: HIDE_CANVAS_DIALOG })\r\n        return () => dispatch({ type: HIDE_CANVAS_DIALOG })\r\n    }, [show, dispatch])\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            fullWidth\r\n            maxWidth='md'\r\n            onClose={onCancel}\r\n            aria-labelledby='alert-dialog-title'\r\n            aria-describedby='alert-dialog-description'\r\n            sx={{ overflow: 'visible' }}\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent sx={{ display: 'flex', justifyContent: 'flex-end', flexDirection: 'column' }}>\r\n                <PerfectScrollbar\r\n                    style={{\r\n                        height: '100%',\r\n                        maxHeight: 'calc(100vh - 220px)',\r\n                        overflowX: 'hidden'\r\n                    }}\r\n                >\r\n                    {nodes.length > 0 &&\r\n                        nodes.map((data, index) => {\r\n                            return (\r\n                                <div key={index}>\r\n                                    {data.nodes.length > 0 &&\r\n                                        data.nodes.map((node, index) => {\r\n                                            return (\r\n                                                <Accordion\r\n                                                    expanded={nodeConfigExpanded[node.data.id] || false}\r\n                                                    onChange={handleAccordionChange(node.data.id)}\r\n                                                    key={index}\r\n                                                    disableGutters\r\n                                                >\r\n                                                    <AccordionSummary\r\n                                                        expandIcon={<ExpandMoreIcon />}\r\n                                                        aria-controls={`nodes-accordian-${node.data.name}`}\r\n                                                        id={`nodes-accordian-header-${node.data.name}`}\r\n                                                    >\r\n                                                        <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                                                            <div\r\n                                                                style={{\r\n                                                                    width: 40,\r\n                                                                    height: 40,\r\n                                                                    marginRight: 10,\r\n                                                                    borderRadius: '50%',\r\n                                                                    backgroundColor: 'white'\r\n                                                                }}\r\n                                                            >\r\n                                                                <img\r\n                                                                    style={{\r\n                                                                        width: '100%',\r\n                                                                        height: '100%',\r\n                                                                        padding: 7,\r\n                                                                        borderRadius: '50%',\r\n                                                                        objectFit: 'contain'\r\n                                                                    }}\r\n                                                                    alt={node.data.name}\r\n                                                                    src={`${baseURL}/api/v1/node-icon/${node.data.name}`}\r\n                                                                />\r\n                                                            </div>\r\n                                                            <Typography variant='h5'>{node.data.label}</Typography>\r\n                                                            <div\r\n                                                                style={{\r\n                                                                    display: 'flex',\r\n                                                                    flexDirection: 'row',\r\n                                                                    width: 'max-content',\r\n                                                                    borderRadius: 15,\r\n                                                                    background: 'rgb(254,252,191)',\r\n                                                                    padding: 5,\r\n                                                                    paddingLeft: 10,\r\n                                                                    paddingRight: 10,\r\n                                                                    marginLeft: 10\r\n                                                                }}\r\n                                                            >\r\n                                                                <span style={{ color: 'rgb(116,66,16)', fontSize: '0.825rem' }}>\r\n                                                                    {node.data.id}\r\n                                                                </span>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </AccordionSummary>\r\n                                                    <AccordionDetails>\r\n                                                        <TableViewOnly\r\n                                                            sx={{ minWidth: 'max-content' }}\r\n                                                            rows={getNodeDetail(node)}\r\n                                                            columns={Object.keys(getNodeDetail(node)[0])}\r\n                                                        />\r\n                                                    </AccordionDetails>\r\n                                                </Accordion>\r\n                                            )\r\n                                        })}\r\n                                    <Box sx={{ p: 2 }}>\r\n                                        <CheckboxInput\r\n                                            key={JSON.stringify(nodeCheckboxExpanded)}\r\n                                            label='Show API'\r\n                                            value={nodeCheckboxExpanded[data.vectorNode.data.id]}\r\n                                            onChange={() => onCheckBoxChanged(data.vectorNode.data.id)}\r\n                                        />\r\n                                        {nodeCheckboxExpanded[data.vectorNode.data.id] && (\r\n                                            <div>\r\n                                                <Tabs value={tabValue} onChange={(event, val) => setTabValue(val)} aria-label='tabs'>\r\n                                                    {['Python', 'JavaScript', 'cURL'].map((codeLang, index) => (\r\n                                                        <Tab\r\n                                                            icon={\r\n                                                                <img\r\n                                                                    style={{ objectFit: 'cover', height: 15, width: 'auto' }}\r\n                                                                    src={getSVG(codeLang)}\r\n                                                                    alt='code'\r\n                                                                />\r\n                                                            }\r\n                                                            iconPosition='start'\r\n                                                            key={index}\r\n                                                            label={codeLang}\r\n                                                            {...a11yProps(index)}\r\n                                                        ></Tab>\r\n                                                    ))}\r\n                                                </Tabs>\r\n                                            </div>\r\n                                        )}\r\n                                        {nodeCheckboxExpanded[data.vectorNode.data.id] &&\r\n                                            isFormDataRequired[data.vectorNode.data.id] !== undefined &&\r\n                                            configData[data.vectorNode.data.id] &&\r\n                                            configData[data.vectorNode.data.id].length > 0 && (\r\n                                                <>\r\n                                                    <div style={{ marginTop: 10 }}>\r\n                                                        {['Python', 'JavaScript', 'cURL'].map((codeLang, index) => (\r\n                                                            <TabPanel key={index} value={tabValue} index={index}>\r\n                                                                <CopyBlock\r\n                                                                    theme={atomOneDark}\r\n                                                                    text={\r\n                                                                        isFormDataRequired[data.vectorNode.data.id]\r\n                                                                            ? getCodeWithFormData(\r\n                                                                                  codeLang,\r\n                                                                                  data.vectorNode.data.id,\r\n                                                                                  nodes.length > 1 ? true : false,\r\n                                                                                  configData[data.vectorNode.data.id]\r\n                                                                              )\r\n                                                                            : getCode(\r\n                                                                                  codeLang,\r\n                                                                                  data.vectorNode.data.id,\r\n                                                                                  nodes.length > 1 ? true : false,\r\n                                                                                  configData[data.vectorNode.data.id]\r\n                                                                              )\r\n                                                                    }\r\n                                                                    language={getLang(codeLang)}\r\n                                                                    showLineNumbers={false}\r\n                                                                    wrapLines\r\n                                                                />\r\n                                                            </TabPanel>\r\n                                                        ))}\r\n                                                    </div>\r\n                                                </>\r\n                                            )}\r\n                                    </Box>\r\n                                    <div style={{ marginBottom: '20px' }}>\r\n                                        {loading && <BackdropLoader open={loading} />}\r\n                                        {!loading && (\r\n                                            <Button\r\n                                                sx={{ color: 'white' }}\r\n                                                fullWidth\r\n                                                variant='contained'\r\n                                                color='teal'\r\n                                                title='Upsert'\r\n                                                onClick={() => onUpsertClicked(data.vectorNode)}\r\n                                            >\r\n                                                Upsert\r\n                                            </Button>\r\n                                        )}\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                </PerfectScrollbar>\r\n            </DialogContent>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nVectorStoreDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func\r\n}\r\n\r\nexport default VectorStoreDialog\r\n","import { useState, useRef, useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Button } from '@mui/material'\r\nimport { IconDatabaseImport, IconX } from '@tabler/icons'\r\n\r\n// project import\r\nimport { StyledFab } from 'ui-component/button/StyledFab'\r\nimport VectorStoreDialog from './VectorStoreDialog'\r\n\r\n// api\r\nimport vectorstoreApi from 'api/vectorstore'\r\n\r\n// Hooks\r\nimport useNotifier from 'utils/useNotifier'\r\n\r\n// Const\r\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction } from 'store/actions'\r\n\r\nexport const VectorStorePopUp = ({ chatflowid }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    useNotifier()\r\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\r\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\r\n\r\n    const [open, setOpen] = useState(false)\r\n    const [showExpandDialog, setShowExpandDialog] = useState(false)\r\n    const [expandDialogProps, setExpandDialogProps] = useState({})\r\n\r\n    const anchorRef = useRef(null)\r\n    const prevOpen = useRef(open)\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevopen) => !prevopen)\r\n        const props = {\r\n            open: true,\r\n            title: 'Upsert Vector Store',\r\n            chatflowid\r\n        }\r\n        setExpandDialogProps(props)\r\n        setShowExpandDialog(true)\r\n    }\r\n\r\n    const onUpsert = async () => {\r\n        try {\r\n            await vectorstoreApi.upsertVectorStore(chatflowid, {})\r\n            enqueueSnackbar({\r\n                message: 'Succesfully upserted vector store',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n        } catch (error) {\r\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n            enqueueSnackbar({\r\n                message: errorData,\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current.focus()\r\n        }\r\n        prevOpen.current = open\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [open, chatflowid])\r\n\r\n    return (\r\n        <>\r\n            <StyledFab\r\n                sx={{ position: 'absolute', right: 80, top: 20 }}\r\n                ref={anchorRef}\r\n                size='small'\r\n                color='teal'\r\n                aria-label='upsert'\r\n                title='Upsert Vector Database'\r\n                onClick={handleToggle}\r\n            >\r\n                {open ? <IconX /> : <IconDatabaseImport />}\r\n            </StyledFab>\r\n            <VectorStoreDialog\r\n                show={showExpandDialog}\r\n                dialogProps={expandDialogProps}\r\n                onUpsert={onUpsert}\r\n                onCancel={() => {\r\n                    setShowExpandDialog(false)\r\n                    setOpen((prevopen) => !prevopen)\r\n                }}\r\n            ></VectorStoreDialog>\r\n        </>\r\n    )\r\n}\r\n\r\nVectorStorePopUp.propTypes = { chatflowid: PropTypes.string }\r\n","import client from './client'\r\n\r\nconst getAllNodes = () => client.get('/nodes')\r\n\r\nconst getSpecificNode = (name) => client.get(`/nodes/${name}`)\r\n\r\nexport default {\r\n    getAllNodes,\r\n    getSpecificNode\r\n}\r\n","import { useEffect, useRef, useState, useCallback, useContext } from 'react'\r\nimport ReactFlow, { addEdge, Controls, Background, useNodesState, useEdgesState } from 'reactflow'\r\nimport 'reactflow/dist/style.css'\r\n\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useNavigate, useLocation } from 'react-router-dom'\r\nimport { usePrompt } from '../../utils/usePrompt'\r\nimport {\r\n    REMOVE_DIRTY,\r\n    SET_DIRTY,\r\n    SET_CHATFLOW,\r\n    enqueueSnackbar as enqueueSnackbarAction,\r\n    closeSnackbar as closeSnackbarAction\r\n} from 'store/actions'\r\nimport { omit, cloneDeep } from 'lodash'\r\n\r\n// material-ui\r\nimport { Toolbar, Box, AppBar, Button } from '@mui/material'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\n// project imports\r\nimport CanvasNode from './CanvasNode'\r\nimport ButtonEdge from './ButtonEdge'\r\nimport CanvasHeader from './CanvasHeader'\r\nimport AddNodes from './AddNodes'\r\nimport ConfirmDialog from 'ui-component/dialog/ConfirmDialog'\r\nimport { ChatPopUp } from 'views/chatmessage/ChatPopUp'\r\nimport { VectorStorePopUp } from 'views/vectorstore/VectorStorePopUp'\r\nimport { flowContext } from 'store/context/ReactFlowContext'\r\n\r\n// API\r\nimport nodesApi from 'api/nodes'\r\nimport chatflowsApi from 'api/chatflows'\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi'\r\nimport useConfirm from 'hooks/useConfirm'\r\n\r\n// icons\r\nimport { IconX } from '@tabler/icons'\r\n\r\n// utils\r\nimport { getUniqueNodeId, initNode, getEdgeLabelName, rearrangeToolsOrdering, getUpsertDetails } from 'utils/genericHelper'\r\nimport useNotifier from 'utils/useNotifier'\r\n\r\n// const\r\nimport { FLOWISE_CREDENTIAL_ID } from 'store/constant'\r\n\r\nconst nodeTypes = { customNode: CanvasNode }\r\nconst edgeTypes = { buttonedge: ButtonEdge }\r\n\r\n// ==============================|| CANVAS ||============================== //\r\n\r\nconst Canvas = () => {\r\n    const theme = useTheme()\r\n    const navigate = useNavigate()\r\n\r\n    const { state } = useLocation()\r\n    const templateFlowData = state ? state.templateFlowData : ''\r\n\r\n    const URLpath = document.location.pathname.toString().split('/')\r\n    const chatflowId = URLpath[URLpath.length - 1] === 'canvas' ? '' : URLpath[URLpath.length - 1]\r\n\r\n    const { confirm } = useConfirm()\r\n\r\n    const dispatch = useDispatch()\r\n    const canvas = useSelector((state) => state.canvas)\r\n    const [canvasDataStore, setCanvasDataStore] = useState(canvas)\r\n    const [chatflow, setChatflow] = useState(null)\r\n\r\n    const { reactFlowInstance, setReactFlowInstance } = useContext(flowContext)\r\n\r\n    // ==============================|| Snackbar ||============================== //\r\n\r\n    useNotifier()\r\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\r\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\r\n\r\n    // ==============================|| ReactFlow ||============================== //\r\n\r\n    const [nodes, setNodes, onNodesChange] = useNodesState()\r\n    const [edges, setEdges, onEdgesChange] = useEdgesState()\r\n\r\n    const [selectedNode, setSelectedNode] = useState(null)\r\n    const [isUpsertButtonEnabled, setIsUpsertButtonEnabled] = useState(false)\r\n\r\n    const reactFlowWrapper = useRef(null)\r\n\r\n    // ==============================|| Chatflow API ||============================== //\r\n\r\n    const getNodesApi = useApi(nodesApi.getAllNodes)\r\n    const createNewChatflowApi = useApi(chatflowsApi.createNewChatflow)\r\n    const testChatflowApi = useApi(chatflowsApi.testChatflow)\r\n    const updateChatflowApi = useApi(chatflowsApi.updateChatflow)\r\n    const getSpecificChatflowApi = useApi(chatflowsApi.getSpecificChatflow)\r\n\r\n    // ==============================|| Events & Actions ||============================== //\r\n\r\n    const onConnect = (params) => {\r\n        const newEdge = {\r\n            ...params,\r\n            type: 'buttonedge',\r\n            id: `${params.source}-${params.sourceHandle}-${params.target}-${params.targetHandle}`,\r\n            data: { label: getEdgeLabelName(params.sourceHandle) }\r\n        }\r\n\r\n        const targetNodeId = params.targetHandle.split('-')[0]\r\n        const sourceNodeId = params.sourceHandle.split('-')[0]\r\n        const targetInput = params.targetHandle.split('-')[2]\r\n\r\n        setNodes((nds) =>\r\n            nds.map((node) => {\r\n                if (node.id === targetNodeId) {\r\n                    setTimeout(() => setDirty(), 0)\r\n                    let value\r\n                    const inputAnchor = node.data.inputAnchors.find((ancr) => ancr.name === targetInput)\r\n                    const inputParam = node.data.inputParams.find((param) => param.name === targetInput)\r\n\r\n                    if (inputAnchor && inputAnchor.list) {\r\n                        const newValues = node.data.inputs[targetInput] || []\r\n                        if (targetInput === 'tools') {\r\n                            rearrangeToolsOrdering(newValues, sourceNodeId)\r\n                        } else {\r\n                            newValues.push(`{{${sourceNodeId}.data.instance}}`)\r\n                        }\r\n                        value = newValues\r\n                    } else if (inputParam && inputParam.acceptVariable) {\r\n                        value = node.data.inputs[targetInput] || ''\r\n                    } else {\r\n                        value = `{{${sourceNodeId}.data.instance}}`\r\n                    }\r\n                    node.data = {\r\n                        ...node.data,\r\n                        inputs: {\r\n                            ...node.data.inputs,\r\n                            [targetInput]: value\r\n                        }\r\n                    }\r\n                }\r\n                return node\r\n            })\r\n        )\r\n\r\n        setEdges((eds) => addEdge(newEdge, eds))\r\n    }\r\n\r\n    const handleLoadFlow = (file) => {\r\n        try {\r\n            const flowData = JSON.parse(file)\r\n            const nodes = flowData.nodes || []\r\n\r\n            setNodes(nodes)\r\n            setEdges(flowData.edges || [])\r\n            setDirty()\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n    }\r\n\r\n    const handleDeleteFlow = async () => {\r\n        const confirmPayload = {\r\n            title: `Delete`,\r\n            description: `Delete chatflow ${chatflow.name}?`,\r\n            confirmButtonName: 'Delete',\r\n            cancelButtonName: 'Cancel'\r\n        }\r\n        const isConfirmed = await confirm(confirmPayload)\r\n\r\n        if (isConfirmed) {\r\n            try {\r\n                await chatflowsApi.deleteChatflow(chatflow.id)\r\n                localStorage.removeItem(`${chatflow.id}_INTERNAL`)\r\n                navigate(-1)\r\n            } catch (error) {\r\n                const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n                enqueueSnackbar({\r\n                    message: errorData,\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'error',\r\n                        persist: true,\r\n                        action: (key) => (\r\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleSaveFlow = (chatflowName) => {\r\n        if (reactFlowInstance) {\r\n            const nodes = reactFlowInstance.getNodes().map((node) => {\r\n                const nodeData = cloneDeep(node.data)\r\n                if (Object.prototype.hasOwnProperty.call(nodeData.inputs, FLOWISE_CREDENTIAL_ID)) {\r\n                    nodeData.credential = nodeData.inputs[FLOWISE_CREDENTIAL_ID]\r\n                    nodeData.inputs = omit(nodeData.inputs, [FLOWISE_CREDENTIAL_ID])\r\n                }\r\n                node.data = {\r\n                    ...nodeData,\r\n                    selected: false\r\n                }\r\n                return node\r\n            })\r\n\r\n            const rfInstanceObject = reactFlowInstance.toObject()\r\n            rfInstanceObject.nodes = nodes\r\n            const flowData = JSON.stringify(rfInstanceObject)\r\n\r\n            if (!chatflow.id) {\r\n                const newChatflowBody = {\r\n                    name: chatflowName,\r\n                    deployed: false,\r\n                    isPublic: false,\r\n                    flowData\r\n                }\r\n                createNewChatflowApi.request(newChatflowBody)\r\n            } else {\r\n                const updateBody = {\r\n                    name: chatflowName,\r\n                    flowData\r\n                }\r\n                updateChatflowApi.request(chatflow.id, updateBody)\r\n            }\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n    const onNodeClick = useCallback((event, clickedNode) => {\r\n        setSelectedNode(clickedNode)\r\n        setNodes((nds) =>\r\n            nds.map((node) => {\r\n                if (node.id === clickedNode.id) {\r\n                    node.data = {\r\n                        ...node.data,\r\n                        selected: true\r\n                    }\r\n                } else {\r\n                    node.data = {\r\n                        ...node.data,\r\n                        selected: false\r\n                    }\r\n                }\r\n\r\n                return node\r\n            })\r\n        )\r\n    })\r\n\r\n    const onDragOver = useCallback((event) => {\r\n        event.preventDefault()\r\n        event.dataTransfer.dropEffect = 'move'\r\n    }, [])\r\n\r\n    const onDrop = useCallback(\r\n        (event) => {\r\n            event.preventDefault()\r\n            const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect()\r\n            let nodeData = event.dataTransfer.getData('application/reactflow')\r\n\r\n            // check if the dropped element is valid\r\n            if (typeof nodeData === 'undefined' || !nodeData) {\r\n                return\r\n            }\r\n\r\n            nodeData = JSON.parse(nodeData)\r\n\r\n            const position = reactFlowInstance.project({\r\n                x: event.clientX - reactFlowBounds.left - 100,\r\n                y: event.clientY - reactFlowBounds.top - 50\r\n            })\r\n\r\n            const newNodeId = getUniqueNodeId(nodeData, reactFlowInstance.getNodes())\r\n\r\n            const newNode = {\r\n                id: newNodeId,\r\n                position,\r\n                type: 'customNode',\r\n                data: initNode(nodeData, newNodeId)\r\n            }\r\n\r\n            setSelectedNode(newNode)\r\n            setNodes((nds) =>\r\n                nds.concat(newNode).map((node) => {\r\n                    if (node.id === newNode.id) {\r\n                        node.data = {\r\n                            ...node.data,\r\n                            selected: true\r\n                        }\r\n                    } else {\r\n                        node.data = {\r\n                            ...node.data,\r\n                            selected: false\r\n                        }\r\n                    }\r\n\r\n                    return node\r\n                })\r\n            )\r\n            setTimeout(() => setDirty(), 0)\r\n        },\r\n\r\n        // eslint-disable-next-line\r\n        [reactFlowInstance]\r\n    )\r\n\r\n    const saveChatflowSuccess = () => {\r\n        dispatch({ type: REMOVE_DIRTY })\r\n        enqueueSnackbar({\r\n            message: 'Chatflow saved',\r\n            options: {\r\n                key: new Date().getTime() + Math.random(),\r\n                variant: 'success',\r\n                action: (key) => (\r\n                    <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                        <IconX />\r\n                    </Button>\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    const errorFailed = (message) => {\r\n        enqueueSnackbar({\r\n            message,\r\n            options: {\r\n                key: new Date().getTime() + Math.random(),\r\n                variant: 'error',\r\n                persist: true,\r\n                action: (key) => (\r\n                    <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                        <IconX />\r\n                    </Button>\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    const setDirty = () => {\r\n        dispatch({ type: SET_DIRTY })\r\n    }\r\n\r\n    const checkIfUpsertAvailable = (nodes, edges) => {\r\n        const upsertNodeDetails = getUpsertDetails(nodes, edges)\r\n        if (upsertNodeDetails.length) setIsUpsertButtonEnabled(true)\r\n        else setIsUpsertButtonEnabled(false)\r\n    }\r\n\r\n    // ==============================|| useEffect ||============================== //\r\n\r\n    // Get specific chatflow successful\r\n    useEffect(() => {\r\n        if (getSpecificChatflowApi.data) {\r\n            const chatflow = getSpecificChatflowApi.data\r\n            const initialFlow = chatflow.flowData ? JSON.parse(chatflow.flowData) : []\r\n            setNodes(initialFlow.nodes || [])\r\n            setEdges(initialFlow.edges || [])\r\n            dispatch({ type: SET_CHATFLOW, chatflow })\r\n        } else if (getSpecificChatflowApi.error) {\r\n            const error = getSpecificChatflowApi.error\r\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n            errorFailed(`Failed to retrieve chatflow: ${errorData}`)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getSpecificChatflowApi.data, getSpecificChatflowApi.error])\r\n\r\n    // Create new chatflow successful\r\n    useEffect(() => {\r\n        if (createNewChatflowApi.data) {\r\n            const chatflow = createNewChatflowApi.data\r\n            dispatch({ type: SET_CHATFLOW, chatflow })\r\n            saveChatflowSuccess()\r\n            window.history.replaceState(null, null, `/canvas/${chatflow.id}`)\r\n        } else if (createNewChatflowApi.error) {\r\n            const error = createNewChatflowApi.error\r\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n            errorFailed(`Failed to save chatflow: ${errorData}`)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [createNewChatflowApi.data, createNewChatflowApi.error])\r\n\r\n    // Update chatflow successful\r\n    useEffect(() => {\r\n        if (updateChatflowApi.data) {\r\n            dispatch({ type: SET_CHATFLOW, chatflow: updateChatflowApi.data })\r\n            saveChatflowSuccess()\r\n        } else if (updateChatflowApi.error) {\r\n            const error = updateChatflowApi.error\r\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n            errorFailed(`Failed to save chatflow: ${errorData}`)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [updateChatflowApi.data, updateChatflowApi.error])\r\n\r\n    // Test chatflow failed\r\n    useEffect(() => {\r\n        if (testChatflowApi.error) {\r\n            enqueueSnackbar({\r\n                message: 'Test chatflow failed',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [testChatflowApi.error])\r\n\r\n    useEffect(() => {\r\n        setChatflow(canvasDataStore.chatflow)\r\n        if (canvasDataStore.chatflow) {\r\n            const flowData = canvasDataStore.chatflow.flowData ? JSON.parse(canvasDataStore.chatflow.flowData) : []\r\n            checkIfUpsertAvailable(flowData.nodes || [], flowData.edges || [])\r\n        }\r\n    }, [canvasDataStore.chatflow])\r\n\r\n    // Initialization\r\n    useEffect(() => {\r\n        if (chatflowId) {\r\n            getSpecificChatflowApi.request(chatflowId)\r\n        } else {\r\n            if (localStorage.getItem('duplicatedFlowData')) {\r\n                handleLoadFlow(localStorage.getItem('duplicatedFlowData'))\r\n                setTimeout(() => localStorage.removeItem('duplicatedFlowData'), 0)\r\n            } else {\r\n                setNodes([])\r\n                setEdges([])\r\n            }\r\n            dispatch({\r\n                type: SET_CHATFLOW,\r\n                chatflow: {\r\n                    name: 'Untitled chatflow'\r\n                }\r\n            })\r\n        }\r\n\r\n        getNodesApi.request()\r\n\r\n        // Clear dirty state before leaving and remove any ongoing test triggers and webhooks\r\n        return () => {\r\n            setTimeout(() => dispatch({ type: REMOVE_DIRTY }), 0)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setCanvasDataStore(canvas)\r\n    }, [canvas])\r\n\r\n    useEffect(() => {\r\n        function handlePaste(e) {\r\n            const pasteData = e.clipboardData.getData('text')\r\n            //TODO: prevent paste event when input focused, temporary fix: catch chatflow syntax\r\n            if (pasteData.includes('{\"nodes\":[') && pasteData.includes('],\"edges\":[')) {\r\n                handleLoadFlow(pasteData)\r\n            }\r\n        }\r\n\r\n        window.addEventListener('paste', handlePaste)\r\n\r\n        return () => {\r\n            window.removeEventListener('paste', handlePaste)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (templateFlowData && templateFlowData.includes('\"nodes\":[') && templateFlowData.includes('],\"edges\":[')) {\r\n            handleLoadFlow(templateFlowData)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [templateFlowData])\r\n\r\n    usePrompt('You have unsaved changes! Do you want to navigate away?', canvasDataStore.isDirty)\r\n\r\n    return (\r\n        <>\r\n            <Box>\r\n                <AppBar\r\n                    enableColorOnDark\r\n                    position='fixed'\r\n                    color='inherit'\r\n                    elevation={1}\r\n                    sx={{\r\n                        bgcolor: theme.palette.background.default\r\n                    }}\r\n                >\r\n                    <Toolbar>\r\n                        <CanvasHeader\r\n                            chatflow={chatflow}\r\n                            handleSaveFlow={handleSaveFlow}\r\n                            handleDeleteFlow={handleDeleteFlow}\r\n                            handleLoadFlow={handleLoadFlow}\r\n                        />\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Box sx={{ pt: '70px', height: '100vh', width: '100%' }}>\r\n                    <div className='reactflow-parent-wrapper'>\r\n                        <div className='reactflow-wrapper' ref={reactFlowWrapper}>\r\n                            <ReactFlow\r\n                                nodes={nodes}\r\n                                edges={edges}\r\n                                onNodesChange={onNodesChange}\r\n                                onNodeClick={onNodeClick}\r\n                                onEdgesChange={onEdgesChange}\r\n                                onDrop={onDrop}\r\n                                onDragOver={onDragOver}\r\n                                onNodeDragStop={setDirty}\r\n                                nodeTypes={nodeTypes}\r\n                                edgeTypes={edgeTypes}\r\n                                onConnect={onConnect}\r\n                                onInit={setReactFlowInstance}\r\n                                fitView\r\n                                deleteKeyCode={canvas.canvasDialogShow ? null : ['Backspace', 'Delete']}\r\n                                minZoom={0.1}\r\n                            >\r\n                                <Controls\r\n                                    style={{\r\n                                        display: 'flex',\r\n                                        flexDirection: 'row',\r\n                                        left: '50%',\r\n                                        transform: 'translate(-50%, -50%)'\r\n                                    }}\r\n                                />\r\n                                <Background color='#aaa' gap={16} />\r\n                                <AddNodes nodesData={getNodesApi.data} node={selectedNode} />\r\n                                {isUpsertButtonEnabled && <VectorStorePopUp chatflowid={chatflowId} />}\r\n                                <ChatPopUp chatflowid={chatflowId} />\r\n                            </ReactFlow>\r\n                        </div>\r\n                    </div>\r\n                </Box>\r\n                <ConfirmDialog />\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Canvas\r\n"],"names":["getAllAPIKeys","client","get","createNewAPI","body","post","updateAPI","id","put","concat","deleteAPI","delete","getAllChatflows","getSpecificChatflow","getSpecificChatflowFromPublicEndpoint","createNewChatflow","updateChatflow","deleteChatflow","getIsChatflowStreaming","_ref","show","dialogProps","onCancel","onConfirm","portalElement","document","getElementById","chatflowName","setChatflowName","useState","isReadyToSave","setIsReadyToSave","useEffect","component","_jsxs","Dialog","open","fullWidth","maxWidth","onClose","children","_jsx","DialogTitle","sx","fontSize","title","DialogContent","OutlinedInput","mt","type","placeholder","value","onChange","e","target","DialogActions","Button","onClick","cancelButtonName","StyledButton","disabled","variant","confirmButtonName","createPortal","usePrompt","message","when","arguments","length","undefined","blocker","navigator","useContext","NavigationContext","unblock","block","tx","autoUnblockingTx","retry","useBlocker","useCallback","window","confirm","TableViewOnly","columns","rows","_Fragment","TableContainer","Paper","Table","minWidth","TableHead","TableRow","map","col","index","TableCell","charAt","toUpperCase","slice","TableBody","row","border","Object","keys","key","_dialogProps$data","dispatch","useDispatch","getNodeConfigApi","useApi","configApi","data","request","SHOW_CANVAS_DIALOG","HIDE_CANVAS_DIALOG","name","label","style","display","flexDirection","alignItems","width","height","marginRight","borderRadius","backgroundColor","padding","objectFit","alt","src","baseURL","marginLeft","background","paddingLeft","paddingRight","marginTop","marginBottom","color","version","badge","description","obj","node","nodeId","rest","CardWrapper","styled","MainCard","theme","palette","card","main","darkTextPrimary","borderColor","primary","boxShadow","LightTooltip","_ref2","className","props","Tooltip","classes","popper","_ref3","tooltipClasses","tooltip","nodeToolTip","shadows","_ref4","_theme$customization","_theme$colors","_theme$customization2","_theme$colors2","_theme$customization3","_theme$colors3","useTheme","canvas","useSelector","state","deleteNode","duplicateNode","flowContext","showDialog","setShowDialog","setDialogProps","showInfoDialog","setShowInfoDialog","infoDialogProps","setInfoDialogProps","warningMessage","setWarningMessage","setOpen","componentNode","componentNodes","find","nd","newVersion","nodeOutdatedMessage","oldVersion","content","selected","text","secondary","canvasDialogShow","handleClose","onOpen","handleOpen","disableFocusListener","IconButton","customization","isDarkMode","colors","paper","IconCopy","IconTrash","IconInfoCircle","placement","Box","typography","commonAvatar","largeAvatar","cursor","Typography","fontWeight","mr","flexGrow","whiteSpace","IconAlertTriangle","size","inputAnchors","inputParams","Divider","asyncSelect","p","textAlign","inputAnchor","NodeInputHandler","filter","inputParam","hidden","param","additionalParams","mb","onDialogClicked","outputAnchors","outputAnchor","NodeOutputHandler","AdditionalParamsDialog","NodeInfoDialog","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","markerEnd","edgePath","edgeCenterX","edgeCenterY","getBezierPath","deleteEdge","d","EdgeText","x","y","labelStyle","fill","labelBgStyle","labelBgPadding","labelBgBorderRadius","foreignObjectSize","requiredExtensions","event","onEdgeClick","evt","stopPropagation","SET_DIRTY","icons","IconFileUpload","IconFileExport","IconSearch","IconMessage","url","icon","chatflow","isSettingsOpen","anchorEl","onSettingsItemClick","onUploadFile","settingsMenu","setSettingsMenu","settings","menu","items","NavItem","item","level","navType","Popper","role","transition","disablePortal","popperOptions","modifiers","options","offset","zIndex","TransitionProps","Transitions","in","ClickAwayListener","onClickAway","elevation","shadow","PerfectScrollbar","maxHeight","overflowX","List","defaultConfig","textColor","sendButtonColor","_chatflow$isPublic","_chatbotConfig$genera","_chatbotConfig$title","_chatbotConfig$titleA","_chatbotConfig$welcom","_chatbotConfig$backgr","_chatbotConfig$fontSi","_chatbotConfig$powere","_chatbotConfig$botMes","_chatbotConfig$botMes2","_chatbotConfig$botMes3","_chatbotConfig$botMes4","_chatbotConfig$botMes5","_chatbotConfig$botMes6","_chatbotConfig$botMes7","_chatbotConfig$botMes8","_chatbotConfig$userMe","_chatbotConfig$userMe2","_chatbotConfig$userMe3","_chatbotConfig$userMe4","_chatbotConfig$userMe5","_chatbotConfig$userMe6","_chatbotConfig$userMe7","_chatbotConfig$userMe8","_chatbotConfig$textIn","_chatbotConfig$textIn2","_chatbotConfig$textIn3","_chatbotConfig$textIn4","_chatbotConfig$textIn5","_chatbotConfig$textIn6","_chatbotConfig$textIn7","_chatbotConfig$textIn8","isSessionMemory","chatflowid","chatbotConfig","JSON","parse","useNotifier","enqueueSnackbar","enqueueSnackbarAction","closeSnackbar","closeSnackbarAction","isPublicChatflow","setChatflowIsPublic","isPublic","generateNewSession","setGenerateNewSession","setTitle","titleAvatarSrc","setTitleAvatarSrc","welcomeMessage","setWelcomeMessage","setBackgroundColor","setFontSize","poweredByTextColor","setPoweredByTextColor","botMessageBackgroundColor","setBotMessageBackgroundColor","botMessage","botMessageTextColor","setBotMessageTextColor","botMessageAvatarSrc","setBotMessageAvatarSrc","avatarSrc","botMessageShowAvatar","setBotMessageShowAvatar","showAvatar","userMessageBackgroundColor","setUserMessageBackgroundColor","userMessage","userMessageTextColor","setUserMessageTextColor","userMessageAvatarSrc","setUserMessageAvatarSrc","userMessageShowAvatar","setUserMessageShowAvatar","textInputBackgroundColor","setTextInputBackgroundColor","textInput","textInputTextColor","setTextInputTextColor","textInputPlaceholder","setTextInputPlaceholder","textInputSendButtonColor","setTextInputSendButtonColor","colorAnchorEl","setColorAnchorEl","selectedColorConfig","setSelectedColorConfig","sketchPickerColor","setSketchPickerColor","openColorPopOver","Boolean","copyAnchorEl","setCopyAnchorEl","openCopyPopOver","formatObj","overrideConfig","handleCloseCopyPopOver","colorField","fieldName","fieldLabel","pt","pb","currentTarget","booleanField","Switch","checked","onBooleanChanged","textField","fieldType","onTextChanged","Stack","direction","light","clipboard","writeText","setTimeout","IconArrowUpRightCircle","flex","async","saveResp","chatflowsApi","Date","getTime","Math","random","action","IconX","SET_CHATFLOW","error","console","errorData","response","status","statusText","persist","onSwitchChange","TooltipWithParser","stringify","onSave","Popover","handleClosePopOver","anchorOrigin","vertical","horizontal","transformOrigin","SketchPicker","hexColor","onColorSelected","hex","pl","pr","success","dark","CheckboxInput","myValue","setMyValue","FormControlLabel","control","Checkbox","TabPanel","other","a11yProps","buttonConfig","chatwindowConfig","codes","setValue","embedChatCheckboxVal","setEmbedChatCheckbox","onCheckBoxEmbedChatChanged","newVal","getCode","codeLang","embedPopupHtmlCode","embedFullpageHtmlCode","embedPopupReactCode","embedFullpageReactCode","getCodeCustomization","embedPopupHtmlCodeCustomization","embedFullpageHtmlCodeCustomization","embedPopupReactCodeCustomization","embedFullpageReactCodeCustomization","Tabs","handleChange","newValue","Tab","rel","href","CopyBlock","atomOneDark","language","showLineNumbers","wrapLines","Configuration","_apiConfig$rateLimit$","_apiConfig$rateLimit","_apiConfig$rateLimit$2","_apiConfig$rateLimit2","_apiConfig$rateLimit$3","_apiConfig$rateLimit3","apiConfig","limitMax","setLimitMax","rateLimit","limitDuration","setLimitDuration","limitMsg","setLimitMsg","rateLimitFilledValues","Error","_dialogProps$chatflow","navigate","useNavigate","keyOptions","setKeyOptions","apiKeys","setAPIKeys","chatflowApiKeyId","setChatflowApiKeyId","selectedApiKey","setSelectedApiKey","checkboxVal","setCheckbox","nodeConfig","setNodeConfig","nodeConfigExpanded","setNodeConfigExpanded","getAllAPIKeysApi","apiKeyApi","updateChatflowApi","getIsChatflowStreamingApi","getConfigApi","onCheckBoxChanged","handleAccordionChange","nodeLabel","isExpanded","accordianNodes","nodes","isFilter","result","reduce","r","a","push","create","groupByNodeLabel","getCodeWithAuthorization","apiKey","getLang","getSVG","pythonSVG","javascriptSVG","EmbedSVG","cURLSVG","ShareChatbotSVG","settingsSVG","getConfigCodeWithFormData","configData","fileType","unshiftFiles","includes","split","getConfigExamplesForPython","getConfigExamplesForJS","getConfigExamplesForCurl","getConfigCodeWithFormDataWithAuth","getConfigCode","getConfigCodeWithAuthorization","getMultiConfigCodeWithFormData","keyName","iconPosition","Dropdown","disableClearable","onSelect","keyValue","updateBody","apikeyid","onApiKeySelected","_getIsChatflowStreami","EmbedChat","sort","Accordion","expanded","disableGutters","AccordionSummary","expandIcon","ExpandMoreIcon","AccordionDetails","isFormDataRequired","IconBulb","isStreaming","ShareChatbot","analyticProviders","inputs","credentialNames","optional","analytic","setAnalytic","providerExpanded","setProviderExpanded","providerName","inputParamName","prototype","hasOwnProperty","call","provider","accordianProviders","ListItem","margin","ListItemAvatar","ListItemText","ml","alignContent","_inputParam$default","_inputParam$default2","CredentialInputHandler","credential","credentialId","SwitchInput","default","Input","MemoizedReactMarkdown","memo","ReactMarkdown","prevProps","nextProps","programmingLanguages","javascript","python","java","c","cpp","ruby","php","swift","kotlin","typescript","go","perl","rust","scala","haskell","lua","shell","sql","html","css","CodeBlock","_theme$palette","isDialog","setAnchorEl","openPopOver","common","borderTopLeftRadius","borderTopRightRadius","IconClipboard","downloadAsFile","fileExtension","fileName","blob","Blob","URL","createObjectURL","link","createElement","download","appendChild","click","removeChild","revokeObjectURL","IconDownload","SyntaxHighlighter","oneDark","customStyle","displayName","_dialogProps$title","setData","ReactJson","quotesOnKeys","enableClipboard","displayDataTypes","params","order","DatePickerCustomInput","forwardRef","ref","ListItemButton","useConfirm","chatlogs","setChatLogs","allChatlogs","setAllChatLogs","chatMessages","setChatMessages","selectedMessageIndex","setSelectedMessageIndex","sourceDialogOpen","setSourceDialogOpen","sourceDialogProps","setSourceDialogProps","chatTypeFilter","setChatTypeFilter","startDate","setStartDate","setMonth","getMonth","endDate","setEndDate","getChatmessageApi","chatmessageApi","getChatmessageFromPKApi","getChatPK","chatmsg","_chatmsg$memoryType2","_chatmsg$sessionId2","chatId","memoryType","sessionId","transformChatPKToParams","chatPK","c1","c2","join","onSourceDialogClick","chatmessages","prevDate","loadedMessages","i","currentDate","createdDate","sourceDocuments","usedTools","fileAnnotations","getChatMessages","allChatMessages","seen","filteredChatLogs","PK","counter","apiContent","userContent","processChatLogs","exportMessages","msg","time","_chatmsg$sessionId","_chatmsg$memoryType","messages","source","chatType","reverse","dataStr","dataUri","encodeURIComponent","exportFileDefaultName","linkElement","setAttribute","startIcon","DatePicker","date","onStartDateSelected","selectsStart","customInput","onEndDateSelected","selectsEnd","minDate","maxDate","MultiDropdown","onChatTypeSelected","chatTypes","formControlSx","justifyContent","msgEmptySVG","flexBasis","overflowY","handleItemClick","idx","overflow","textOverflow","moment","format","confirmPayload","isConfirmed","isClearFromViewMessageDialog","clearChat","IconEraser","robotPNG","userPNG","tool","Chip","clickable","remarkPlugins","remarkGfm","remarkMath","rehypePlugins","rehypeMathjax","rehypeRaw","components","code","inline","match","exec","String","replace","fileAnnotation","textTransform","axios","responseType","headers","downloadUrl","remove","downloadFile","endIcon","removeDuplicateURL","metadata","isValidURL","pathname","substring","host","pageContent","timeMessage","SourceDocDialog","handleSaveFlow","handleDeleteFlow","handleLoadFlow","flowNameRef","useRef","settingsRef","isEditingFlowName","setEditingFlowName","flowName","setFlowName","setSettingsOpen","flowDialogOpen","setFlowDialogOpen","apiDialogOpen","setAPIDialogOpen","apiDialogProps","setAPIDialogProps","analyseDialogOpen","setAnalyseDialogOpen","analyseDialogProps","setAnalyseDialogProps","viewMessagesDialogOpen","setViewMessagesDialogOpen","viewMessagesDialogProps","setViewMessagesDialogProps","ButtonBase","Avatar","mediumAvatar","history","IconChevronLeft","stroke","isDirty","orange","IconPencil","TextField","inputRef","defaultValue","submitFlowName","current","IconCheck","canvasHeader","deployLight","deployDark","onAPIDialogClick","flowData","IconCode","saveLight","saveDark","onSaveChatflowClick","IconDeviceFloppy","settingsLight","settingsDark","IconSettings","Settings","setting","localStorage","setItem","uiBaseURL","generateExportFlowData","file","SaveChatflowDialog","APICodeDialog","AnalyseFlowDialog","ViewMessagesDialog","StyledFab","Fab","backgroundImage","nodesData","searchValue","setSearchValue","setNodes","categoryExpanded","setCategoryExpanded","anchorRef","prevOpen","ps","scrollTop","curr","filterSearch","returnData","passesQuery","toLowerCase","passesCategory","category","getSearchedNodes","groupByCategory","accordianCategories","categorizeVectorStores","_obj$VectorStores","vsNodes","deprecatingNodes","newNodes","vsNode","contains","focus","SET_COMPONENT_NODES","left","top","handleToggle","IconMinus","IconPlus","my","startAdornment","InputAdornment","position","grey","endAdornment","inputProps","containerRef","el","py","breakpoints","down","warning","teal","onDragStart","dataTransfer","effectAllowed","draggable","sendMessageAndGetPrediction","input","ChatMessage","userInput","setUserInput","loading","setLoading","setMessages","socketIOClientId","setSocketIOClientId","isChatFlowAvailableToStream","setIsChatFlowAvailableToStream","setChatId","scrollToBottom","scrollTo","maxScroll","updateLastMessage","prevMessages","allMessages","cloneDeep","updateLastMessageSourceDocuments","handleSubmit","preventDefault","trim","question","predictionApi","json","setLocalStorageChatflow","_inputRef$current2","_inputRef$current","handleError","_getChatmessageApi$da","_getChatmessageApi$da2","_getIsChatflowStreami2","_inputRef$current3","socket","socketIOClient","on","disconnect","onSubmit","autoFocus","onKeyDown","isIMEComposition","isComposing","keyCode","shiftKey","multiline","maxRows","edge","CircularProgress","IconSend","onClear","ChatPopUp","showExpandDialog","setShowExpandDialog","expandDialogProps","setExpandDialogProps","chatDetails","getItem","objChatDetails","removeItem","resetChatDialog","resetProps","right","expandChat","IconArrowsMaximize","ChatExpandDialog","upsertVectorStore","reactFlowInstance","setIsFormDataRequired","nodeCheckboxExpanded","setCheckboxExpanded","tabValue","setTabValue","expandedVectorNodeId","setExpandedVectorNodeId","setConfigData","vectorNodeId","isMultiple","getCodeWithFormData","getNodeDetail","nodeDetails","inputKeys","_node$data$inputs$nod","getFileName","_nodes$find$nodes2","_nodes$find2","newConfigData","reformatConfigData","item1","some","item2","vectorNode","getNodes","edges","getEdges","getUpsertDetails","_nodes$find$nodes","_nodes$find","checkboxNodes","newIsFormDataRequired","val","BackdropLoader","vectorstoreApi","stopNodeId","vectorStoreNode","onUpsertClicked","VectorStorePopUp","prevopen","IconDatabaseImport","VectorStoreDialog","onUpsert","getAllNodes","nodeTypes","customNode","CanvasNode","edgeTypes","buttonedge","ButtonEdge","Canvas","useLocation","templateFlowData","URLpath","location","toString","chatflowId","canvasDataStore","setCanvasDataStore","setChatflow","setReactFlowInstance","onNodesChange","useNodesState","setEdges","onEdgesChange","useEdgesState","selectedNode","setSelectedNode","isUpsertButtonEnabled","setIsUpsertButtonEnabled","reactFlowWrapper","getNodesApi","nodesApi","createNewChatflowApi","testChatflowApi","testChatflow","getSpecificChatflowApi","setDirty","onNodeClick","clickedNode","nds","onDragOver","dropEffect","onDrop","reactFlowBounds","getBoundingClientRect","nodeData","getData","project","clientX","clientY","newNodeId","getUniqueNodeId","newNode","initNode","saveChatflowSuccess","REMOVE_DIRTY","errorFailed","initialFlow","replaceState","checkIfUpsertAvailable","handlePaste","pasteData","clipboardData","addEventListener","removeEventListener","AppBar","enableColorOnDark","bgcolor","Toolbar","CanvasHeader","FLOWISE_CREDENTIAL_ID","omit","rfInstanceObject","toObject","newChatflowBody","deployed","ReactFlow","onNodeDragStop","onConnect","newEdge","sourceHandle","targetHandle","getEdgeLabelName","targetNodeId","sourceNodeId","targetInput","ancr","list","newValues","rearrangeToolsOrdering","acceptVariable","eds","addEdge","onInit","fitView","deleteKeyCode","minZoom","Controls","transform","Background","gap","AddNodes","ConfirmDialog"],"sourceRoot":""}